"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/filepond";
exports.ids = ["vendor-chunks/filepond"];
exports.modules = {

/***/ "(ssr)/./node_modules/filepond/dist/filepond.esm.js":
/*!****************************************************!*\
  !*** ./node_modules/filepond/dist/filepond.esm.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FileOrigin: () => (/* binding */ FileOrigin$1),\n/* harmony export */   FileStatus: () => (/* binding */ FileStatus),\n/* harmony export */   OptionTypes: () => (/* binding */ OptionTypes),\n/* harmony export */   Status: () => (/* binding */ Status$1),\n/* harmony export */   create: () => (/* binding */ create$f),\n/* harmony export */   destroy: () => (/* binding */ destroy),\n/* harmony export */   find: () => (/* binding */ find),\n/* harmony export */   getOptions: () => (/* binding */ getOptions$1),\n/* harmony export */   parse: () => (/* binding */ parse),\n/* harmony export */   registerPlugin: () => (/* binding */ registerPlugin),\n/* harmony export */   setOptions: () => (/* binding */ setOptions$1),\n/* harmony export */   supported: () => (/* binding */ supported)\n/* harmony export */ });\n/*!\n * FilePond 4.32.7\n * Licensed under MIT, https://opensource.org/licenses/MIT/\n * Please visit https://pqina.nl/filepond/ for details.\n */ /* eslint-disable */ const isNode = (value)=>value instanceof HTMLElement;\nconst createStore = (initialState, queries = [], actions = [])=>{\n    // internal state\n    const state = {\n        ...initialState\n    };\n    // contains all actions for next frame, is clear when actions are requested\n    const actionQueue = [];\n    const dispatchQueue = [];\n    // returns a duplicate of the current state\n    const getState = ()=>({\n            ...state\n        });\n    // returns a duplicate of the actions array and clears the actions array\n    const processActionQueue = ()=>{\n        // create copy of actions queue\n        const queue = [\n            ...actionQueue\n        ];\n        // clear actions queue (we don't want no double actions)\n        actionQueue.length = 0;\n        return queue;\n    };\n    // processes actions that might block the main UI thread\n    const processDispatchQueue = ()=>{\n        // create copy of actions queue\n        const queue = [\n            ...dispatchQueue\n        ];\n        // clear actions queue (we don't want no double actions)\n        dispatchQueue.length = 0;\n        // now dispatch these actions\n        queue.forEach(({ type, data })=>{\n            dispatch(type, data);\n        });\n    };\n    // adds a new action, calls its handler and\n    const dispatch = (type, data, isBlocking)=>{\n        // is blocking action (should never block if document is hidden)\n        if (isBlocking && !document.hidden) {\n            dispatchQueue.push({\n                type,\n                data\n            });\n            return;\n        }\n        // if this action has a handler, handle the action\n        if (actionHandlers[type]) {\n            actionHandlers[type](data);\n        }\n        // now add action\n        actionQueue.push({\n            type,\n            data\n        });\n    };\n    const query = (str, ...args)=>queryHandles[str] ? queryHandles[str](...args) : null;\n    const api = {\n        getState,\n        processActionQueue,\n        processDispatchQueue,\n        dispatch,\n        query\n    };\n    let queryHandles = {};\n    queries.forEach((query)=>{\n        queryHandles = {\n            ...query(state),\n            ...queryHandles\n        };\n    });\n    let actionHandlers = {};\n    actions.forEach((action)=>{\n        actionHandlers = {\n            ...action(dispatch, query, state),\n            ...actionHandlers\n        };\n    });\n    return api;\n};\nconst defineProperty = (obj, property, definition)=>{\n    if (typeof definition === \"function\") {\n        obj[property] = definition;\n        return;\n    }\n    Object.defineProperty(obj, property, {\n        ...definition\n    });\n};\nconst forin = (obj, cb)=>{\n    for(const key in obj){\n        if (!obj.hasOwnProperty(key)) {\n            continue;\n        }\n        cb(key, obj[key]);\n    }\n};\nconst createObject = (definition)=>{\n    const obj = {};\n    forin(definition, (property)=>{\n        defineProperty(obj, property, definition[property]);\n    });\n    return obj;\n};\nconst attr = (node, name, value = null)=>{\n    if (value === null) {\n        return node.getAttribute(name) || node.hasAttribute(name);\n    }\n    node.setAttribute(name, value);\n};\nconst ns = \"http://www.w3.org/2000/svg\";\nconst svgElements = [\n    \"svg\",\n    \"path\"\n]; // only svg elements used\nconst isSVGElement = (tag)=>svgElements.includes(tag);\nconst createElement = (tag, className, attributes = {})=>{\n    if (typeof className === \"object\") {\n        attributes = className;\n        className = null;\n    }\n    const element = isSVGElement(tag) ? document.createElementNS(ns, tag) : document.createElement(tag);\n    if (className) {\n        if (isSVGElement(tag)) {\n            attr(element, \"class\", className);\n        } else {\n            element.className = className;\n        }\n    }\n    forin(attributes, (name, value)=>{\n        attr(element, name, value);\n    });\n    return element;\n};\nconst appendChild = (parent)=>(child, index)=>{\n        if (typeof index !== \"undefined\" && parent.children[index]) {\n            parent.insertBefore(child, parent.children[index]);\n        } else {\n            parent.appendChild(child);\n        }\n    };\nconst appendChildView = (parent, childViews)=>(view, index)=>{\n        if (typeof index !== \"undefined\") {\n            childViews.splice(index, 0, view);\n        } else {\n            childViews.push(view);\n        }\n        return view;\n    };\nconst removeChildView = (parent, childViews)=>(view)=>{\n        // remove from child views\n        childViews.splice(childViews.indexOf(view), 1);\n        // remove the element\n        if (view.element.parentNode) {\n            parent.removeChild(view.element);\n        }\n        return view;\n    };\nconst IS_BROWSER = (()=> false && 0)();\nconst isBrowser = ()=>IS_BROWSER;\nconst testElement = isBrowser() ? createElement(\"svg\") : {};\nconst getChildCount = \"children\" in testElement ? (el)=>el.children.length : (el)=>el.childNodes.length;\nconst getViewRect = (elementRect, childViews, offset, scale)=>{\n    const left = offset[0] || elementRect.left;\n    const top = offset[1] || elementRect.top;\n    const right = left + elementRect.width;\n    const bottom = top + elementRect.height * (scale[1] || 1);\n    const rect = {\n        // the rectangle of the element itself\n        element: {\n            ...elementRect\n        },\n        // the rectangle of the element expanded to contain its children, does not include any margins\n        inner: {\n            left: elementRect.left,\n            top: elementRect.top,\n            right: elementRect.right,\n            bottom: elementRect.bottom\n        },\n        // the rectangle of the element expanded to contain its children including own margin and child margins\n        // margins will be added after we've recalculated the size\n        outer: {\n            left,\n            top,\n            right,\n            bottom\n        }\n    };\n    // expand rect to fit all child rectangles\n    childViews.filter((childView)=>!childView.isRectIgnored()).map((childView)=>childView.rect).forEach((childViewRect)=>{\n        expandRect(rect.inner, {\n            ...childViewRect.inner\n        });\n        expandRect(rect.outer, {\n            ...childViewRect.outer\n        });\n    });\n    // calculate inner width and height\n    calculateRectSize(rect.inner);\n    // append additional margin (top and left margins are included in top and left automatically)\n    rect.outer.bottom += rect.element.marginBottom;\n    rect.outer.right += rect.element.marginRight;\n    // calculate outer width and height\n    calculateRectSize(rect.outer);\n    return rect;\n};\nconst expandRect = (parent, child)=>{\n    // adjust for parent offset\n    child.top += parent.top;\n    child.right += parent.left;\n    child.bottom += parent.top;\n    child.left += parent.left;\n    if (child.bottom > parent.bottom) {\n        parent.bottom = child.bottom;\n    }\n    if (child.right > parent.right) {\n        parent.right = child.right;\n    }\n};\nconst calculateRectSize = (rect)=>{\n    rect.width = rect.right - rect.left;\n    rect.height = rect.bottom - rect.top;\n};\nconst isNumber = (value)=>typeof value === \"number\";\n/**\n * Determines if position is at destination\n * @param position\n * @param destination\n * @param velocity\n * @param errorMargin\n * @returns {boolean}\n */ const thereYet = (position, destination, velocity, errorMargin = 0.001)=>{\n    return Math.abs(position - destination) < errorMargin && Math.abs(velocity) < errorMargin;\n};\n/**\n * Spring animation\n */ const spring = // default options\n({ stiffness = 0.5, damping = 0.75, mass = 10 } = {})=>// method definition\n{\n    let target = null;\n    let position = null;\n    let velocity = 0;\n    let resting = false;\n    // updates spring state\n    const interpolate = (ts, skipToEndState)=>{\n        // in rest, don't animate\n        if (resting) return;\n        // need at least a target or position to do springy things\n        if (!(isNumber(target) && isNumber(position))) {\n            resting = true;\n            velocity = 0;\n            return;\n        }\n        // calculate spring force\n        const f = -(position - target) * stiffness;\n        // update velocity by adding force based on mass\n        velocity += f / mass;\n        // update position by adding velocity\n        position += velocity;\n        // slow down based on amount of damping\n        velocity *= damping;\n        // we've arrived if we're near target and our velocity is near zero\n        if (thereYet(position, target, velocity) || skipToEndState) {\n            position = target;\n            velocity = 0;\n            resting = true;\n            // we done\n            api.onupdate(position);\n            api.oncomplete(position);\n        } else {\n            // progress update\n            api.onupdate(position);\n        }\n    };\n    /**\n             * Set new target value\n             * @param value\n             */ const setTarget = (value)=>{\n        // if currently has no position, set target and position to this value\n        if (isNumber(value) && !isNumber(position)) {\n            position = value;\n        }\n        // next target value will not be animated to\n        if (target === null) {\n            target = value;\n            position = value;\n        }\n        // let start moving to target\n        target = value;\n        // already at target\n        if (position === target || typeof target === \"undefined\") {\n            // now resting as target is current position, stop moving\n            resting = true;\n            velocity = 0;\n            // done!\n            api.onupdate(position);\n            api.oncomplete(position);\n            return;\n        }\n        resting = false;\n    };\n    // need 'api' to call onupdate callback\n    const api = createObject({\n        interpolate,\n        target: {\n            set: setTarget,\n            get: ()=>target\n        },\n        resting: {\n            get: ()=>resting\n        },\n        onupdate: (value)=>{},\n        oncomplete: (value)=>{}\n    });\n    return api;\n};\nconst easeLinear = (t)=>t;\nconst easeInOutQuad = (t)=>t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\nconst tween = // default values\n({ duration = 500, easing = easeInOutQuad, delay = 0 } = {})=>// method definition\n{\n    let start = null;\n    let t;\n    let p;\n    let resting = true;\n    let reverse = false;\n    let target = null;\n    const interpolate = (ts, skipToEndState)=>{\n        if (resting || target === null) return;\n        if (start === null) {\n            start = ts;\n        }\n        if (ts - start < delay) return;\n        t = ts - start - delay;\n        if (t >= duration || skipToEndState) {\n            t = 1;\n            p = reverse ? 0 : 1;\n            api.onupdate(p * target);\n            api.oncomplete(p * target);\n            resting = true;\n        } else {\n            p = t / duration;\n            api.onupdate((t >= 0 ? easing(reverse ? 1 - p : p) : 0) * target);\n        }\n    };\n    // need 'api' to call onupdate callback\n    const api = createObject({\n        interpolate,\n        target: {\n            get: ()=>reverse ? 0 : target,\n            set: (value)=>{\n                // is initial value\n                if (target === null) {\n                    target = value;\n                    api.onupdate(value);\n                    api.oncomplete(value);\n                    return;\n                }\n                // want to tween to a smaller value and have a current value\n                if (value < target) {\n                    target = 1;\n                    reverse = true;\n                } else {\n                    // not tweening to a smaller value\n                    reverse = false;\n                    target = value;\n                }\n                // let's go!\n                resting = false;\n                start = null;\n            }\n        },\n        resting: {\n            get: ()=>resting\n        },\n        onupdate: (value)=>{},\n        oncomplete: (value)=>{}\n    });\n    return api;\n};\nconst animator = {\n    spring,\n    tween\n};\n/*\n { type: 'spring', stiffness: .5, damping: .75, mass: 10 };\n { translation: { type: 'spring', ... }, ... }\n { translation: { x: { type: 'spring', ... } } }\n*/ const createAnimator = (definition, category, property)=>{\n    // default is single definition\n    // we check if transform is set, if so, we check if property is set\n    const def = definition[category] && typeof definition[category][property] === \"object\" ? definition[category][property] : definition[category] || definition;\n    const type = typeof def === \"string\" ? def : def.type;\n    const props = typeof def === \"object\" ? {\n        ...def\n    } : {};\n    return animator[type] ? animator[type](props) : null;\n};\nconst addGetSet = (keys, obj, props, overwrite = false)=>{\n    obj = Array.isArray(obj) ? obj : [\n        obj\n    ];\n    obj.forEach((o)=>{\n        keys.forEach((key)=>{\n            let name = key;\n            let getter = ()=>props[key];\n            let setter = (value)=>props[key] = value;\n            if (typeof key === \"object\") {\n                name = key.key;\n                getter = key.getter || getter;\n                setter = key.setter || setter;\n            }\n            if (o[name] && !overwrite) {\n                return;\n            }\n            o[name] = {\n                get: getter,\n                set: setter\n            };\n        });\n    });\n};\n// add to state,\n// add getters and setters to internal and external api (if not set)\n// setup animators\nconst animations = ({ mixinConfig, viewProps, viewInternalAPI, viewExternalAPI })=>{\n    // initial properties\n    const initialProps = {\n        ...viewProps\n    };\n    // list of all active animations\n    const animations = [];\n    // setup animators\n    forin(mixinConfig, (property, animation)=>{\n        const animator = createAnimator(animation);\n        if (!animator) {\n            return;\n        }\n        // when the animator updates, update the view state value\n        animator.onupdate = (value)=>{\n            viewProps[property] = value;\n        };\n        // set animator target\n        animator.target = initialProps[property];\n        // when value is set, set the animator target value\n        const prop = {\n            key: property,\n            setter: (value)=>{\n                // if already at target, we done!\n                if (animator.target === value) {\n                    return;\n                }\n                animator.target = value;\n            },\n            getter: ()=>viewProps[property]\n        };\n        // add getters and setters\n        addGetSet([\n            prop\n        ], [\n            viewInternalAPI,\n            viewExternalAPI\n        ], viewProps, true);\n        // add it to the list for easy updating from the _write method\n        animations.push(animator);\n    });\n    // expose internal write api\n    return {\n        write: (ts)=>{\n            let skipToEndState = document.hidden;\n            let resting = true;\n            animations.forEach((animation)=>{\n                if (!animation.resting) resting = false;\n                animation.interpolate(ts, skipToEndState);\n            });\n            return resting;\n        },\n        destroy: ()=>{}\n    };\n};\nconst addEvent = (element)=>(type, fn)=>{\n        element.addEventListener(type, fn);\n    };\nconst removeEvent = (element)=>(type, fn)=>{\n        element.removeEventListener(type, fn);\n    };\n// mixin\nconst listeners = ({ mixinConfig, viewProps, viewInternalAPI, viewExternalAPI, viewState, view })=>{\n    const events = [];\n    const add = addEvent(view.element);\n    const remove = removeEvent(view.element);\n    viewExternalAPI.on = (type, fn)=>{\n        events.push({\n            type,\n            fn\n        });\n        add(type, fn);\n    };\n    viewExternalAPI.off = (type, fn)=>{\n        events.splice(events.findIndex((event)=>event.type === type && event.fn === fn), 1);\n        remove(type, fn);\n    };\n    return {\n        write: ()=>{\n            // not busy\n            return true;\n        },\n        destroy: ()=>{\n            events.forEach((event)=>{\n                remove(event.type, event.fn);\n            });\n        }\n    };\n};\n// add to external api and link to props\nconst apis = ({ mixinConfig, viewProps, viewExternalAPI })=>{\n    addGetSet(mixinConfig, viewExternalAPI, viewProps);\n};\nconst isDefined = (value)=>value != null;\n// add to state,\n// add getters and setters to internal and external api (if not set)\n// set initial state based on props in viewProps\n// apply as transforms each frame\nconst defaults = {\n    opacity: 1,\n    scaleX: 1,\n    scaleY: 1,\n    translateX: 0,\n    translateY: 0,\n    rotateX: 0,\n    rotateY: 0,\n    rotateZ: 0,\n    originX: 0,\n    originY: 0\n};\nconst styles = ({ mixinConfig, viewProps, viewInternalAPI, viewExternalAPI, view })=>{\n    // initial props\n    const initialProps = {\n        ...viewProps\n    };\n    // current props\n    const currentProps = {};\n    // we will add those properties to the external API and link them to the viewState\n    addGetSet(mixinConfig, [\n        viewInternalAPI,\n        viewExternalAPI\n    ], viewProps);\n    // override rect on internal and external rect getter so it takes in account transforms\n    const getOffset = ()=>[\n            viewProps[\"translateX\"] || 0,\n            viewProps[\"translateY\"] || 0\n        ];\n    const getScale = ()=>[\n            viewProps[\"scaleX\"] || 0,\n            viewProps[\"scaleY\"] || 0\n        ];\n    const getRect = ()=>view.rect ? getViewRect(view.rect, view.childViews, getOffset(), getScale()) : null;\n    viewInternalAPI.rect = {\n        get: getRect\n    };\n    viewExternalAPI.rect = {\n        get: getRect\n    };\n    // apply view props\n    mixinConfig.forEach((key)=>{\n        viewProps[key] = typeof initialProps[key] === \"undefined\" ? defaults[key] : initialProps[key];\n    });\n    // expose api\n    return {\n        write: ()=>{\n            // see if props have changed\n            if (!propsHaveChanged(currentProps, viewProps)) {\n                return;\n            }\n            // moves element to correct position on screen\n            applyStyles(view.element, viewProps);\n            // store new transforms\n            Object.assign(currentProps, {\n                ...viewProps\n            });\n            // no longer busy\n            return true;\n        },\n        destroy: ()=>{}\n    };\n};\nconst propsHaveChanged = (currentProps, newProps)=>{\n    // different amount of keys\n    if (Object.keys(currentProps).length !== Object.keys(newProps).length) {\n        return true;\n    }\n    // lets analyze the individual props\n    for(const prop in newProps){\n        if (newProps[prop] !== currentProps[prop]) {\n            return true;\n        }\n    }\n    return false;\n};\nconst applyStyles = (element, { opacity, perspective, translateX, translateY, scaleX, scaleY, rotateX, rotateY, rotateZ, originX, originY, width, height })=>{\n    let transforms = \"\";\n    let styles = \"\";\n    // handle transform origin\n    if (isDefined(originX) || isDefined(originY)) {\n        styles += `transform-origin: ${originX || 0}px ${originY || 0}px;`;\n    }\n    // transform order is relevant\n    // 0. perspective\n    if (isDefined(perspective)) {\n        transforms += `perspective(${perspective}px) `;\n    }\n    // 1. translate\n    if (isDefined(translateX) || isDefined(translateY)) {\n        transforms += `translate3d(${translateX || 0}px, ${translateY || 0}px, 0) `;\n    }\n    // 2. scale\n    if (isDefined(scaleX) || isDefined(scaleY)) {\n        transforms += `scale3d(${isDefined(scaleX) ? scaleX : 1}, ${isDefined(scaleY) ? scaleY : 1}, 1) `;\n    }\n    // 3. rotate\n    if (isDefined(rotateZ)) {\n        transforms += `rotateZ(${rotateZ}rad) `;\n    }\n    if (isDefined(rotateX)) {\n        transforms += `rotateX(${rotateX}rad) `;\n    }\n    if (isDefined(rotateY)) {\n        transforms += `rotateY(${rotateY}rad) `;\n    }\n    // add transforms\n    if (transforms.length) {\n        styles += `transform:${transforms};`;\n    }\n    // add opacity\n    if (isDefined(opacity)) {\n        styles += `opacity:${opacity};`;\n        // if we reach zero, we make the element inaccessible\n        if (opacity === 0) {\n            styles += `visibility:hidden;`;\n        }\n        // if we're below 100% opacity this element can't be clicked\n        if (opacity < 1) {\n            styles += `pointer-events:none;`;\n        }\n    }\n    // add height\n    if (isDefined(height)) {\n        styles += `height:${height}px;`;\n    }\n    // add width\n    if (isDefined(width)) {\n        styles += `width:${width}px;`;\n    }\n    // apply styles\n    const elementCurrentStyle = element.elementCurrentStyle || \"\";\n    // if new styles does not match current styles, lets update!\n    if (styles.length !== elementCurrentStyle.length || styles !== elementCurrentStyle) {\n        element.style.cssText = styles;\n        // store current styles so we can compare them to new styles later on\n        // _not_ getting the style value is faster\n        element.elementCurrentStyle = styles;\n    }\n};\nconst Mixins = {\n    styles,\n    listeners,\n    animations,\n    apis\n};\nconst updateRect = (rect = {}, element = {}, style = {})=>{\n    if (!element.layoutCalculated) {\n        rect.paddingTop = parseInt(style.paddingTop, 10) || 0;\n        rect.marginTop = parseInt(style.marginTop, 10) || 0;\n        rect.marginRight = parseInt(style.marginRight, 10) || 0;\n        rect.marginBottom = parseInt(style.marginBottom, 10) || 0;\n        rect.marginLeft = parseInt(style.marginLeft, 10) || 0;\n        element.layoutCalculated = true;\n    }\n    rect.left = element.offsetLeft || 0;\n    rect.top = element.offsetTop || 0;\n    rect.width = element.offsetWidth || 0;\n    rect.height = element.offsetHeight || 0;\n    rect.right = rect.left + rect.width;\n    rect.bottom = rect.top + rect.height;\n    rect.scrollTop = element.scrollTop;\n    rect.hidden = element.offsetParent === null;\n    return rect;\n};\nconst createView = // default view definition\n({ // element definition\ntag = \"div\", name = null, attributes = {}, // view interaction\nread = ()=>{}, write = ()=>{}, create = ()=>{}, destroy = ()=>{}, // hooks\nfilterFrameActionsForChild = (child, actions)=>actions, didCreateView = ()=>{}, didWriteView = ()=>{}, // rect related\nignoreRect = false, ignoreRectUpdate = false, // mixins\nmixins = [] } = {})=>(// each view requires reference to store\n    store, // specific properties for this view\n    props = {})=>{\n        // root element should not be changed\n        const element = createElement(tag, `filepond--${name}`, attributes);\n        // style reference should also not be changed\n        const style = window.getComputedStyle(element, null);\n        // element rectangle\n        const rect = updateRect();\n        let frameRect = null;\n        // rest state\n        let isResting = false;\n        // pretty self explanatory\n        const childViews = [];\n        // loaded mixins\n        const activeMixins = [];\n        // references to created children\n        const ref = {};\n        // state used for each instance\n        const state = {};\n        // list of writers that will be called to update this view\n        const writers = [\n            write\n        ];\n        const readers = [\n            read\n        ];\n        const destroyers = [\n            destroy\n        ];\n        // core view methods\n        const getElement = ()=>element;\n        const getChildViews = ()=>childViews.concat();\n        const getReference = ()=>ref;\n        const createChildView = (store)=>(view, props)=>view(store, props);\n        const getRect = ()=>{\n            if (frameRect) {\n                return frameRect;\n            }\n            frameRect = getViewRect(rect, childViews, [\n                0,\n                0\n            ], [\n                1,\n                1\n            ]);\n            return frameRect;\n        };\n        const getStyle = ()=>style;\n        /**\n         * Read data from DOM\n         * @private\n         */ const _read = ()=>{\n            frameRect = null;\n            // read child views\n            childViews.forEach((child)=>child._read());\n            const shouldUpdate = !(ignoreRectUpdate && rect.width && rect.height);\n            if (shouldUpdate) {\n                updateRect(rect, element, style);\n            }\n            // readers\n            const api = {\n                root: internalAPI,\n                props,\n                rect\n            };\n            readers.forEach((reader)=>reader(api));\n        };\n        /**\n         * Write data to DOM\n         * @private\n         */ const _write = (ts, frameActions, shouldOptimize)=>{\n            // if no actions, we assume that the view is resting\n            let resting = frameActions.length === 0;\n            // writers\n            writers.forEach((writer)=>{\n                const writerResting = writer({\n                    props,\n                    root: internalAPI,\n                    actions: frameActions,\n                    timestamp: ts,\n                    shouldOptimize\n                });\n                if (writerResting === false) {\n                    resting = false;\n                }\n            });\n            // run mixins\n            activeMixins.forEach((mixin)=>{\n                // if one of the mixins is still busy after write operation, we are not resting\n                const mixinResting = mixin.write(ts);\n                if (mixinResting === false) {\n                    resting = false;\n                }\n            });\n            // updates child views that are currently attached to the DOM\n            childViews.filter((child)=>!!child.element.parentNode).forEach((child)=>{\n                // if a child view is not resting, we are not resting\n                const childResting = child._write(ts, filterFrameActionsForChild(child, frameActions), shouldOptimize);\n                if (!childResting) {\n                    resting = false;\n                }\n            });\n            // append new elements to DOM and update those\n            childViews//.filter(child => !child.element.parentNode)\n            .forEach((child, index)=>{\n                // skip\n                if (child.element.parentNode) {\n                    return;\n                }\n                // append to DOM\n                internalAPI.appendChild(child.element, index);\n                // call read (need to know the size of these elements)\n                child._read();\n                // re-call write\n                child._write(ts, filterFrameActionsForChild(child, frameActions), shouldOptimize);\n                // we just added somthing to the dom, no rest\n                resting = false;\n            });\n            // update resting state\n            isResting = resting;\n            didWriteView({\n                props,\n                root: internalAPI,\n                actions: frameActions,\n                timestamp: ts\n            });\n            // let parent know if we are resting\n            return resting;\n        };\n        const _destroy = ()=>{\n            activeMixins.forEach((mixin)=>mixin.destroy());\n            destroyers.forEach((destroyer)=>{\n                destroyer({\n                    root: internalAPI,\n                    props\n                });\n            });\n            childViews.forEach((child)=>child._destroy());\n        };\n        // sharedAPI\n        const sharedAPIDefinition = {\n            element: {\n                get: getElement\n            },\n            style: {\n                get: getStyle\n            },\n            childViews: {\n                get: getChildViews\n            }\n        };\n        // private API definition\n        const internalAPIDefinition = {\n            ...sharedAPIDefinition,\n            rect: {\n                get: getRect\n            },\n            // access to custom children references\n            ref: {\n                get: getReference\n            },\n            // dom modifiers\n            is: (needle)=>name === needle,\n            appendChild: appendChild(element),\n            createChildView: createChildView(store),\n            linkView: (view)=>{\n                childViews.push(view);\n                return view;\n            },\n            unlinkView: (view)=>{\n                childViews.splice(childViews.indexOf(view), 1);\n            },\n            appendChildView: appendChildView(element, childViews),\n            removeChildView: removeChildView(element, childViews),\n            registerWriter: (writer)=>writers.push(writer),\n            registerReader: (reader)=>readers.push(reader),\n            registerDestroyer: (destroyer)=>destroyers.push(destroyer),\n            invalidateLayout: ()=>element.layoutCalculated = false,\n            // access to data store\n            dispatch: store.dispatch,\n            query: store.query\n        };\n        // public view API methods\n        const externalAPIDefinition = {\n            element: {\n                get: getElement\n            },\n            childViews: {\n                get: getChildViews\n            },\n            rect: {\n                get: getRect\n            },\n            resting: {\n                get: ()=>isResting\n            },\n            isRectIgnored: ()=>ignoreRect,\n            _read,\n            _write,\n            _destroy\n        };\n        // mixin API methods\n        const mixinAPIDefinition = {\n            ...sharedAPIDefinition,\n            rect: {\n                get: ()=>rect\n            }\n        };\n        // add mixin functionality\n        Object.keys(mixins).sort((a, b)=>{\n            // move styles to the back of the mixin list (so adjustments of other mixins are applied to the props correctly)\n            if (a === \"styles\") {\n                return 1;\n            } else if (b === \"styles\") {\n                return -1;\n            }\n            return 0;\n        }).forEach((key)=>{\n            const mixinAPI = Mixins[key]({\n                mixinConfig: mixins[key],\n                viewProps: props,\n                viewState: state,\n                viewInternalAPI: internalAPIDefinition,\n                viewExternalAPI: externalAPIDefinition,\n                view: createObject(mixinAPIDefinition)\n            });\n            if (mixinAPI) {\n                activeMixins.push(mixinAPI);\n            }\n        });\n        // construct private api\n        const internalAPI = createObject(internalAPIDefinition);\n        // create the view\n        create({\n            root: internalAPI,\n            props\n        });\n        // append created child views to root node\n        const childCount = getChildCount(element); // need to know the current child count so appending happens in correct order\n        childViews.forEach((child, index)=>{\n            internalAPI.appendChild(child.element, childCount + index);\n        });\n        // call did create\n        didCreateView(internalAPI);\n        // expose public api\n        return createObject(externalAPIDefinition);\n    };\nconst createPainter = (read, write, fps = 60)=>{\n    const name = \"__framePainter\";\n    // set global painter\n    if (window[name]) {\n        window[name].readers.push(read);\n        window[name].writers.push(write);\n        return;\n    }\n    window[name] = {\n        readers: [\n            read\n        ],\n        writers: [\n            write\n        ]\n    };\n    const painter = window[name];\n    const interval = 1000 / fps;\n    let last = null;\n    let id = null;\n    let requestTick = null;\n    let cancelTick = null;\n    const setTimerType = ()=>{\n        if (document.hidden) {\n            requestTick = ()=>window.setTimeout(()=>tick(performance.now()), interval);\n            cancelTick = ()=>window.clearTimeout(id);\n        } else {\n            requestTick = ()=>window.requestAnimationFrame(tick);\n            cancelTick = ()=>window.cancelAnimationFrame(id);\n        }\n    };\n    document.addEventListener(\"visibilitychange\", ()=>{\n        if (cancelTick) cancelTick();\n        setTimerType();\n        tick(performance.now());\n    });\n    const tick = (ts)=>{\n        // queue next tick\n        id = requestTick(tick);\n        // limit fps\n        if (!last) {\n            last = ts;\n        }\n        const delta = ts - last;\n        if (delta <= interval) {\n            // skip frame\n            return;\n        }\n        // align next frame\n        last = ts - delta % interval;\n        // update view\n        painter.readers.forEach((read)=>read());\n        painter.writers.forEach((write)=>write(ts));\n    };\n    setTimerType();\n    tick(performance.now());\n    return {\n        pause: ()=>{\n            cancelTick(id);\n        }\n    };\n};\nconst createRoute = (routes, fn)=>({ root, props, actions = [], timestamp, shouldOptimize })=>{\n        actions.filter((action)=>routes[action.type]).forEach((action)=>routes[action.type]({\n                root,\n                props,\n                action: action.data,\n                timestamp,\n                shouldOptimize\n            }));\n        if (fn) {\n            fn({\n                root,\n                props,\n                actions,\n                timestamp,\n                shouldOptimize\n            });\n        }\n    };\nconst insertBefore = (newNode, referenceNode)=>referenceNode.parentNode.insertBefore(newNode, referenceNode);\nconst insertAfter = (newNode, referenceNode)=>{\n    return referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);\n};\nconst isArray = (value)=>Array.isArray(value);\nconst isEmpty = (value)=>value == null;\nconst trim = (str)=>str.trim();\nconst toString = (value)=>\"\" + value;\nconst toArray = (value, splitter = \",\")=>{\n    if (isEmpty(value)) {\n        return [];\n    }\n    if (isArray(value)) {\n        return value;\n    }\n    return toString(value).split(splitter).map(trim).filter((str)=>str.length);\n};\nconst isBoolean = (value)=>typeof value === \"boolean\";\nconst toBoolean = (value)=>isBoolean(value) ? value : value === \"true\";\nconst isString = (value)=>typeof value === \"string\";\nconst toNumber = (value)=>isNumber(value) ? value : isString(value) ? toString(value).replace(/[a-z]+/gi, \"\") : 0;\nconst toInt = (value)=>parseInt(toNumber(value), 10);\nconst toFloat = (value)=>parseFloat(toNumber(value));\nconst isInt = (value)=>isNumber(value) && isFinite(value) && Math.floor(value) === value;\nconst toBytes = (value, base = 1000)=>{\n    // is in bytes\n    if (isInt(value)) {\n        return value;\n    }\n    // is natural file size\n    let naturalFileSize = toString(value).trim();\n    // if is value in megabytes\n    if (/MB$/i.test(naturalFileSize)) {\n        naturalFileSize = naturalFileSize.replace(/MB$i/, \"\").trim();\n        return toInt(naturalFileSize) * base * base;\n    }\n    // if is value in kilobytes\n    if (/KB/i.test(naturalFileSize)) {\n        naturalFileSize = naturalFileSize.replace(/KB$i/, \"\").trim();\n        return toInt(naturalFileSize) * base;\n    }\n    return toInt(naturalFileSize);\n};\nconst isFunction = (value)=>typeof value === \"function\";\nconst toFunctionReference = (string)=>{\n    let ref = self;\n    let levels = string.split(\".\");\n    let level = null;\n    while(level = levels.shift()){\n        ref = ref[level];\n        if (!ref) {\n            return null;\n        }\n    }\n    return ref;\n};\nconst methods = {\n    process: \"POST\",\n    patch: \"PATCH\",\n    revert: \"DELETE\",\n    fetch: \"GET\",\n    restore: \"GET\",\n    load: \"GET\"\n};\nconst createServerAPI = (outline)=>{\n    const api = {};\n    api.url = isString(outline) ? outline : outline.url || \"\";\n    api.timeout = outline.timeout ? parseInt(outline.timeout, 10) : 0;\n    api.headers = outline.headers ? outline.headers : {};\n    forin(methods, (key)=>{\n        api[key] = createAction(key, outline[key], methods[key], api.timeout, api.headers);\n    });\n    // remove process if no url or process on outline\n    api.process = outline.process || isString(outline) || outline.url ? api.process : null;\n    // special treatment for remove\n    api.remove = outline.remove || null;\n    // remove generic headers from api object\n    delete api.headers;\n    return api;\n};\nconst createAction = (name, outline, method, timeout, headers)=>{\n    // is explicitely set to null so disable\n    if (outline === null) {\n        return null;\n    }\n    // if is custom function, done! Dev handles everything.\n    if (typeof outline === \"function\") {\n        return outline;\n    }\n    // build action object\n    const action = {\n        url: method === \"GET\" || method === \"PATCH\" ? `?${name}=` : \"\",\n        method,\n        headers,\n        withCredentials: false,\n        timeout,\n        onload: null,\n        ondata: null,\n        onerror: null\n    };\n    // is a single url\n    if (isString(outline)) {\n        action.url = outline;\n        return action;\n    }\n    // overwrite\n    Object.assign(action, outline);\n    // see if should reformat headers;\n    if (isString(action.headers)) {\n        const parts = action.headers.split(/:(.+)/);\n        action.headers = {\n            header: parts[0],\n            value: parts[1]\n        };\n    }\n    // if is bool withCredentials\n    action.withCredentials = toBoolean(action.withCredentials);\n    return action;\n};\nconst toServerAPI = (value)=>createServerAPI(value);\nconst isNull = (value)=>value === null;\nconst isObject = (value)=>typeof value === \"object\" && value !== null;\nconst isAPI = (value)=>{\n    return isObject(value) && isString(value.url) && isObject(value.process) && isObject(value.revert) && isObject(value.restore) && isObject(value.fetch);\n};\nconst getType = (value)=>{\n    if (isArray(value)) {\n        return \"array\";\n    }\n    if (isNull(value)) {\n        return \"null\";\n    }\n    if (isInt(value)) {\n        return \"int\";\n    }\n    if (/^[0-9]+ ?(?:GB|MB|KB)$/gi.test(value)) {\n        return \"bytes\";\n    }\n    if (isAPI(value)) {\n        return \"api\";\n    }\n    return typeof value;\n};\nconst replaceSingleQuotes = (str)=>str.replace(/{\\s*'/g, '{\"').replace(/'\\s*}/g, '\"}').replace(/'\\s*:/g, '\":').replace(/:\\s*'/g, ':\"').replace(/,\\s*'/g, ',\"').replace(/'\\s*,/g, '\",');\nconst conversionTable = {\n    array: toArray,\n    boolean: toBoolean,\n    int: (value)=>getType(value) === \"bytes\" ? toBytes(value) : toInt(value),\n    number: toFloat,\n    float: toFloat,\n    bytes: toBytes,\n    string: (value)=>isFunction(value) ? value : toString(value),\n    function: (value)=>toFunctionReference(value),\n    serverapi: toServerAPI,\n    object: (value)=>{\n        try {\n            return JSON.parse(replaceSingleQuotes(value));\n        } catch (e) {\n            return null;\n        }\n    }\n};\nconst convertTo = (value, type)=>conversionTable[type](value);\nconst getValueByType = (newValue, defaultValue, valueType)=>{\n    // can always assign default value\n    if (newValue === defaultValue) {\n        return newValue;\n    }\n    // get the type of the new value\n    let newValueType = getType(newValue);\n    // is valid type?\n    if (newValueType !== valueType) {\n        // is string input, let's attempt to convert\n        const convertedValue = convertTo(newValue, valueType);\n        // what is the type now\n        newValueType = getType(convertedValue);\n        // no valid conversions found\n        if (convertedValue === null) {\n            throw `Trying to assign value with incorrect type to \"${option}\", allowed type: \"${valueType}\"`;\n        } else {\n            newValue = convertedValue;\n        }\n    }\n    // assign new value\n    return newValue;\n};\nconst createOption = (defaultValue, valueType)=>{\n    let currentValue = defaultValue;\n    return {\n        enumerable: true,\n        get: ()=>currentValue,\n        set: (newValue)=>{\n            currentValue = getValueByType(newValue, defaultValue, valueType);\n        }\n    };\n};\nconst createOptions = (options)=>{\n    const obj = {};\n    forin(options, (prop)=>{\n        const optionDefinition = options[prop];\n        obj[prop] = createOption(optionDefinition[0], optionDefinition[1]);\n    });\n    return createObject(obj);\n};\nconst createInitialState = (options)=>({\n        // model\n        items: [],\n        // timeout used for calling update items\n        listUpdateTimeout: null,\n        // timeout used for stacking metadata updates\n        itemUpdateTimeout: null,\n        // queue of items waiting to be processed\n        processingQueue: [],\n        // options\n        options: createOptions(options)\n    });\nconst fromCamels = (string, separator = \"-\")=>string.split(/(?=[A-Z])/).map((part)=>part.toLowerCase()).join(separator);\nconst createOptionAPI = (store, options)=>{\n    const obj = {};\n    forin(options, (key)=>{\n        obj[key] = {\n            get: ()=>store.getState().options[key],\n            set: (value)=>{\n                store.dispatch(`SET_${fromCamels(key, \"_\").toUpperCase()}`, {\n                    value\n                });\n            }\n        };\n    });\n    return obj;\n};\nconst createOptionActions = (options)=>(dispatch, query, state)=>{\n        const obj = {};\n        forin(options, (key)=>{\n            const name = fromCamels(key, \"_\").toUpperCase();\n            obj[`SET_${name}`] = (action)=>{\n                try {\n                    state.options[key] = action.value;\n                } catch (e) {\n                // nope, failed\n                }\n                // we successfully set the value of this option\n                dispatch(`DID_SET_${name}`, {\n                    value: state.options[key]\n                });\n            };\n        });\n        return obj;\n    };\nconst createOptionQueries = (options)=>(state)=>{\n        const obj = {};\n        forin(options, (key)=>{\n            obj[`GET_${fromCamels(key, \"_\").toUpperCase()}`] = (action)=>state.options[key];\n        });\n        return obj;\n    };\nconst InteractionMethod = {\n    API: 1,\n    DROP: 2,\n    BROWSE: 3,\n    PASTE: 4,\n    NONE: 5\n};\nconst getUniqueId = ()=>Math.random().toString(36).substring(2, 11);\nconst arrayRemove = (arr, index)=>arr.splice(index, 1);\nconst run = (cb, sync)=>{\n    if (sync) {\n        cb();\n    } else if (document.hidden) {\n        Promise.resolve(1).then(cb);\n    } else {\n        setTimeout(cb, 0);\n    }\n};\nconst on = ()=>{\n    const listeners = [];\n    const off = (event, cb)=>{\n        arrayRemove(listeners, listeners.findIndex((listener)=>listener.event === event && (listener.cb === cb || !cb)));\n    };\n    const fire = (event, args, sync)=>{\n        listeners.filter((listener)=>listener.event === event).map((listener)=>listener.cb).forEach((cb)=>run(()=>cb(...args), sync));\n    };\n    return {\n        fireSync: (event, ...args)=>{\n            fire(event, args, true);\n        },\n        fire: (event, ...args)=>{\n            fire(event, args, false);\n        },\n        on: (event, cb)=>{\n            listeners.push({\n                event,\n                cb\n            });\n        },\n        onOnce: (event, cb)=>{\n            listeners.push({\n                event,\n                cb: (...args)=>{\n                    off(event, cb);\n                    cb(...args);\n                }\n            });\n        },\n        off\n    };\n};\nconst copyObjectPropertiesToObject = (src, target, excluded)=>{\n    Object.getOwnPropertyNames(src).filter((property)=>!excluded.includes(property)).forEach((key)=>Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(src, key)));\n};\nconst PRIVATE = [\n    \"fire\",\n    \"process\",\n    \"revert\",\n    \"load\",\n    \"on\",\n    \"off\",\n    \"onOnce\",\n    \"retryLoad\",\n    \"extend\",\n    \"archive\",\n    \"archived\",\n    \"release\",\n    \"released\",\n    \"requestProcessing\",\n    \"freeze\"\n];\nconst createItemAPI = (item)=>{\n    const api = {};\n    copyObjectPropertiesToObject(item, api, PRIVATE);\n    return api;\n};\nconst removeReleasedItems = (items)=>{\n    items.forEach((item, index)=>{\n        if (item.released) {\n            arrayRemove(items, index);\n        }\n    });\n};\nconst ItemStatus = {\n    INIT: 1,\n    IDLE: 2,\n    PROCESSING_QUEUED: 9,\n    PROCESSING: 3,\n    PROCESSING_COMPLETE: 5,\n    PROCESSING_ERROR: 6,\n    PROCESSING_REVERT_ERROR: 10,\n    LOADING: 7,\n    LOAD_ERROR: 8\n};\nconst FileOrigin = {\n    INPUT: 1,\n    LIMBO: 2,\n    LOCAL: 3\n};\nconst getNonNumeric = (str)=>/[^0-9]+/.exec(str);\nconst getDecimalSeparator = ()=>getNonNumeric(1.1.toLocaleString())[0];\nconst getThousandsSeparator = ()=>{\n    // Added for browsers that do not return the thousands separator (happend on native browser Android 4.4.4)\n    // We check against the normal toString output and if they're the same return a comma when decimal separator is a dot\n    const decimalSeparator = getDecimalSeparator();\n    const thousandsStringWithSeparator = 1000.0.toLocaleString();\n    const thousandsStringWithoutSeparator = 1000.0.toString();\n    if (thousandsStringWithSeparator !== thousandsStringWithoutSeparator) {\n        return getNonNumeric(thousandsStringWithSeparator)[0];\n    }\n    return decimalSeparator === \".\" ? \",\" : \".\";\n};\nconst Type = {\n    BOOLEAN: \"boolean\",\n    INT: \"int\",\n    NUMBER: \"number\",\n    STRING: \"string\",\n    ARRAY: \"array\",\n    OBJECT: \"object\",\n    FUNCTION: \"function\",\n    ACTION: \"action\",\n    SERVER_API: \"serverapi\",\n    REGEX: \"regex\"\n};\n// all registered filters\nconst filters = [];\n// loops over matching filters and passes options to each filter, returning the mapped results\nconst applyFilterChain = (key, value, utils)=>new Promise((resolve, reject)=>{\n        // find matching filters for this key\n        const matchingFilters = filters.filter((f)=>f.key === key).map((f)=>f.cb);\n        // resolve now\n        if (matchingFilters.length === 0) {\n            resolve(value);\n            return;\n        }\n        // first filter to kick things of\n        const initialFilter = matchingFilters.shift();\n        // chain filters\n        matchingFilters.reduce(// loop over promises passing value to next promise\n        (current, next)=>current.then((value)=>next(value, utils)), // call initial filter, will return a promise\n        initialFilter(value, utils)).then((value)=>resolve(value)).catch((error)=>reject(error));\n    });\nconst applyFilters = (key, value, utils)=>filters.filter((f)=>f.key === key).map((f)=>f.cb(value, utils));\n// adds a new filter to the list\nconst addFilter = (key, cb)=>filters.push({\n        key,\n        cb\n    });\nconst extendDefaultOptions = (additionalOptions)=>Object.assign(defaultOptions, additionalOptions);\nconst getOptions = ()=>({\n        ...defaultOptions\n    });\nconst setOptions = (opts)=>{\n    forin(opts, (key, value)=>{\n        // key does not exist, so this option cannot be set\n        if (!defaultOptions[key]) {\n            return;\n        }\n        defaultOptions[key][0] = getValueByType(value, defaultOptions[key][0], defaultOptions[key][1]);\n    });\n};\n// default options on app\nconst defaultOptions = {\n    // the id to add to the root element\n    id: [\n        null,\n        Type.STRING\n    ],\n    // input field name to use\n    name: [\n        \"filepond\",\n        Type.STRING\n    ],\n    // disable the field\n    disabled: [\n        false,\n        Type.BOOLEAN\n    ],\n    // classname to put on wrapper\n    className: [\n        null,\n        Type.STRING\n    ],\n    // is the field required\n    required: [\n        false,\n        Type.BOOLEAN\n    ],\n    // Allow media capture when value is set\n    captureMethod: [\n        null,\n        Type.STRING\n    ],\n    // - \"camera\", \"microphone\" or \"camcorder\",\n    // - Does not work with multiple on apple devices\n    // - If set, acceptedFileTypes must be made to match with media wildcard \"image/*\", \"audio/*\" or \"video/*\"\n    // sync `acceptedFileTypes` property with `accept` attribute\n    allowSyncAcceptAttribute: [\n        true,\n        Type.BOOLEAN\n    ],\n    // Feature toggles\n    allowDrop: [\n        true,\n        Type.BOOLEAN\n    ],\n    allowBrowse: [\n        true,\n        Type.BOOLEAN\n    ],\n    allowPaste: [\n        true,\n        Type.BOOLEAN\n    ],\n    allowMultiple: [\n        false,\n        Type.BOOLEAN\n    ],\n    allowReplace: [\n        true,\n        Type.BOOLEAN\n    ],\n    allowRevert: [\n        true,\n        Type.BOOLEAN\n    ],\n    allowRemove: [\n        true,\n        Type.BOOLEAN\n    ],\n    allowProcess: [\n        true,\n        Type.BOOLEAN\n    ],\n    allowReorder: [\n        false,\n        Type.BOOLEAN\n    ],\n    allowDirectoriesOnly: [\n        false,\n        Type.BOOLEAN\n    ],\n    // Try store file if `server` not set\n    storeAsFile: [\n        false,\n        Type.BOOLEAN\n    ],\n    // Revert mode\n    forceRevert: [\n        false,\n        Type.BOOLEAN\n    ],\n    // Input requirements\n    maxFiles: [\n        null,\n        Type.INT\n    ],\n    checkValidity: [\n        false,\n        Type.BOOLEAN\n    ],\n    // Where to put file\n    itemInsertLocationFreedom: [\n        true,\n        Type.BOOLEAN\n    ],\n    itemInsertLocation: [\n        \"before\",\n        Type.STRING\n    ],\n    itemInsertInterval: [\n        75,\n        Type.INT\n    ],\n    // Drag 'n Drop related\n    dropOnPage: [\n        false,\n        Type.BOOLEAN\n    ],\n    dropOnElement: [\n        true,\n        Type.BOOLEAN\n    ],\n    dropValidation: [\n        false,\n        Type.BOOLEAN\n    ],\n    ignoredFiles: [\n        [\n            \".ds_store\",\n            \"thumbs.db\",\n            \"desktop.ini\"\n        ],\n        Type.ARRAY\n    ],\n    // Upload related\n    instantUpload: [\n        true,\n        Type.BOOLEAN\n    ],\n    maxParallelUploads: [\n        2,\n        Type.INT\n    ],\n    allowMinimumUploadDuration: [\n        true,\n        Type.BOOLEAN\n    ],\n    // Chunks\n    chunkUploads: [\n        false,\n        Type.BOOLEAN\n    ],\n    chunkForce: [\n        false,\n        Type.BOOLEAN\n    ],\n    chunkSize: [\n        5000000,\n        Type.INT\n    ],\n    chunkRetryDelays: [\n        [\n            500,\n            1000,\n            3000\n        ],\n        Type.ARRAY\n    ],\n    // The server api end points to use for uploading (see docs)\n    server: [\n        null,\n        Type.SERVER_API\n    ],\n    // File size calculations, can set to 1024, this is only used for display, properties use file size base 1000\n    fileSizeBase: [\n        1000,\n        Type.INT\n    ],\n    // Labels and status messages\n    labelFileSizeBytes: [\n        \"bytes\",\n        Type.STRING\n    ],\n    labelFileSizeKilobytes: [\n        \"KB\",\n        Type.STRING\n    ],\n    labelFileSizeMegabytes: [\n        \"MB\",\n        Type.STRING\n    ],\n    labelFileSizeGigabytes: [\n        \"GB\",\n        Type.STRING\n    ],\n    labelDecimalSeparator: [\n        getDecimalSeparator(),\n        Type.STRING\n    ],\n    labelThousandsSeparator: [\n        getThousandsSeparator(),\n        Type.STRING\n    ],\n    labelIdle: [\n        'Drag & Drop your files or <span class=\"filepond--label-action\">Browse</span>',\n        Type.STRING\n    ],\n    labelInvalidField: [\n        \"Field contains invalid files\",\n        Type.STRING\n    ],\n    labelFileWaitingForSize: [\n        \"Waiting for size\",\n        Type.STRING\n    ],\n    labelFileSizeNotAvailable: [\n        \"Size not available\",\n        Type.STRING\n    ],\n    labelFileCountSingular: [\n        \"file in list\",\n        Type.STRING\n    ],\n    labelFileCountPlural: [\n        \"files in list\",\n        Type.STRING\n    ],\n    labelFileLoading: [\n        \"Loading\",\n        Type.STRING\n    ],\n    labelFileAdded: [\n        \"Added\",\n        Type.STRING\n    ],\n    labelFileLoadError: [\n        \"Error during load\",\n        Type.STRING\n    ],\n    labelFileRemoved: [\n        \"Removed\",\n        Type.STRING\n    ],\n    labelFileRemoveError: [\n        \"Error during remove\",\n        Type.STRING\n    ],\n    labelFileProcessing: [\n        \"Uploading\",\n        Type.STRING\n    ],\n    labelFileProcessingComplete: [\n        \"Upload complete\",\n        Type.STRING\n    ],\n    labelFileProcessingAborted: [\n        \"Upload cancelled\",\n        Type.STRING\n    ],\n    labelFileProcessingError: [\n        \"Error during upload\",\n        Type.STRING\n    ],\n    labelFileProcessingRevertError: [\n        \"Error during revert\",\n        Type.STRING\n    ],\n    labelTapToCancel: [\n        \"tap to cancel\",\n        Type.STRING\n    ],\n    labelTapToRetry: [\n        \"tap to retry\",\n        Type.STRING\n    ],\n    labelTapToUndo: [\n        \"tap to undo\",\n        Type.STRING\n    ],\n    labelButtonRemoveItem: [\n        \"Remove\",\n        Type.STRING\n    ],\n    labelButtonAbortItemLoad: [\n        \"Abort\",\n        Type.STRING\n    ],\n    labelButtonRetryItemLoad: [\n        \"Retry\",\n        Type.STRING\n    ],\n    labelButtonAbortItemProcessing: [\n        \"Cancel\",\n        Type.STRING\n    ],\n    labelButtonUndoItemProcessing: [\n        \"Undo\",\n        Type.STRING\n    ],\n    labelButtonRetryItemProcessing: [\n        \"Retry\",\n        Type.STRING\n    ],\n    labelButtonProcessItem: [\n        \"Upload\",\n        Type.STRING\n    ],\n    // make sure width and height plus viewpox are even numbers so icons are nicely centered\n    iconRemove: [\n        '<svg width=\"26\" height=\"26\" viewBox=\"0 0 26 26\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M11.586 13l-2.293 2.293a1 1 0 0 0 1.414 1.414L13 14.414l2.293 2.293a1 1 0 0 0 1.414-1.414L14.414 13l2.293-2.293a1 1 0 0 0-1.414-1.414L13 11.586l-2.293-2.293a1 1 0 0 0-1.414 1.414L11.586 13z\" fill=\"currentColor\" fill-rule=\"nonzero\"/></svg>',\n        Type.STRING\n    ],\n    iconProcess: [\n        '<svg width=\"26\" height=\"26\" viewBox=\"0 0 26 26\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M14 10.414v3.585a1 1 0 0 1-2 0v-3.585l-1.293 1.293a1 1 0 0 1-1.414-1.415l3-3a1 1 0 0 1 1.414 0l3 3a1 1 0 0 1-1.414 1.415L14 10.414zM9 18a1 1 0 0 1 0-2h8a1 1 0 0 1 0 2H9z\" fill=\"currentColor\" fill-rule=\"evenodd\"/></svg>',\n        Type.STRING\n    ],\n    iconRetry: [\n        '<svg width=\"26\" height=\"26\" viewBox=\"0 0 26 26\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10.81 9.185l-.038.02A4.997 4.997 0 0 0 8 13.683a5 5 0 0 0 5 5 5 5 0 0 0 5-5 1 1 0 0 1 2 0A7 7 0 1 1 9.722 7.496l-.842-.21a.999.999 0 1 1 .484-1.94l3.23.806c.535.133.86.675.73 1.21l-.804 3.233a.997.997 0 0 1-1.21.73.997.997 0 0 1-.73-1.21l.23-.928v-.002z\" fill=\"currentColor\" fill-rule=\"nonzero\"/></svg>',\n        Type.STRING\n    ],\n    iconUndo: [\n        '<svg width=\"26\" height=\"26\" viewBox=\"0 0 26 26\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M9.185 10.81l.02-.038A4.997 4.997 0 0 1 13.683 8a5 5 0 0 1 5 5 5 5 0 0 1-5 5 1 1 0 0 0 0 2A7 7 0 1 0 7.496 9.722l-.21-.842a.999.999 0 1 0-1.94.484l.806 3.23c.133.535.675.86 1.21.73l3.233-.803a.997.997 0 0 0 .73-1.21.997.997 0 0 0-1.21-.73l-.928.23-.002-.001z\" fill=\"currentColor\" fill-rule=\"nonzero\"/></svg>',\n        Type.STRING\n    ],\n    iconDone: [\n        '<svg width=\"26\" height=\"26\" viewBox=\"0 0 26 26\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M18.293 9.293a1 1 0 0 1 1.414 1.414l-7.002 7a1 1 0 0 1-1.414 0l-3.998-4a1 1 0 1 1 1.414-1.414L12 15.586l6.294-6.293z\" fill=\"currentColor\" fill-rule=\"nonzero\"/></svg>',\n        Type.STRING\n    ],\n    // event handlers\n    oninit: [\n        null,\n        Type.FUNCTION\n    ],\n    onwarning: [\n        null,\n        Type.FUNCTION\n    ],\n    onerror: [\n        null,\n        Type.FUNCTION\n    ],\n    onactivatefile: [\n        null,\n        Type.FUNCTION\n    ],\n    oninitfile: [\n        null,\n        Type.FUNCTION\n    ],\n    onaddfilestart: [\n        null,\n        Type.FUNCTION\n    ],\n    onaddfileprogress: [\n        null,\n        Type.FUNCTION\n    ],\n    onaddfile: [\n        null,\n        Type.FUNCTION\n    ],\n    onprocessfilestart: [\n        null,\n        Type.FUNCTION\n    ],\n    onprocessfileprogress: [\n        null,\n        Type.FUNCTION\n    ],\n    onprocessfileabort: [\n        null,\n        Type.FUNCTION\n    ],\n    onprocessfilerevert: [\n        null,\n        Type.FUNCTION\n    ],\n    onprocessfile: [\n        null,\n        Type.FUNCTION\n    ],\n    onprocessfiles: [\n        null,\n        Type.FUNCTION\n    ],\n    onremovefile: [\n        null,\n        Type.FUNCTION\n    ],\n    onpreparefile: [\n        null,\n        Type.FUNCTION\n    ],\n    onupdatefiles: [\n        null,\n        Type.FUNCTION\n    ],\n    onreorderfiles: [\n        null,\n        Type.FUNCTION\n    ],\n    // hooks\n    beforeDropFile: [\n        null,\n        Type.FUNCTION\n    ],\n    beforeAddFile: [\n        null,\n        Type.FUNCTION\n    ],\n    beforeRemoveFile: [\n        null,\n        Type.FUNCTION\n    ],\n    beforePrepareFile: [\n        null,\n        Type.FUNCTION\n    ],\n    // styles\n    stylePanelLayout: [\n        null,\n        Type.STRING\n    ],\n    stylePanelAspectRatio: [\n        null,\n        Type.STRING\n    ],\n    styleItemPanelAspectRatio: [\n        null,\n        Type.STRING\n    ],\n    styleButtonRemoveItemPosition: [\n        \"left\",\n        Type.STRING\n    ],\n    styleButtonProcessItemPosition: [\n        \"right\",\n        Type.STRING\n    ],\n    styleLoadIndicatorPosition: [\n        \"right\",\n        Type.STRING\n    ],\n    styleProgressIndicatorPosition: [\n        \"right\",\n        Type.STRING\n    ],\n    styleButtonRemoveItemAlign: [\n        false,\n        Type.BOOLEAN\n    ],\n    // custom initial files array\n    files: [\n        [],\n        Type.ARRAY\n    ],\n    // show support by displaying credits\n    credits: [\n        [\n            \"https://pqina.nl/\",\n            \"Powered by PQINA\"\n        ],\n        Type.ARRAY\n    ]\n};\nconst getItemByQuery = (items, query)=>{\n    // just return first index\n    if (isEmpty(query)) {\n        return items[0] || null;\n    }\n    // query is index\n    if (isInt(query)) {\n        return items[query] || null;\n    }\n    // if query is item, get the id\n    if (typeof query === \"object\") {\n        query = query.id;\n    }\n    // assume query is a string and return item by id\n    return items.find((item)=>item.id === query) || null;\n};\nconst getNumericAspectRatioFromString = (aspectRatio)=>{\n    if (isEmpty(aspectRatio)) {\n        return aspectRatio;\n    }\n    if (/:/.test(aspectRatio)) {\n        const parts = aspectRatio.split(\":\");\n        return parts[1] / parts[0];\n    }\n    return parseFloat(aspectRatio);\n};\nconst getActiveItems = (items)=>items.filter((item)=>!item.archived);\nconst Status = {\n    EMPTY: 0,\n    IDLE: 1,\n    ERROR: 2,\n    BUSY: 3,\n    READY: 4\n};\nlet res = null;\nconst canUpdateFileInput = ()=>{\n    if (res === null) {\n        try {\n            const dataTransfer = new DataTransfer();\n            dataTransfer.items.add(new File([\n                \"hello world\"\n            ], \"This_Works.txt\"));\n            const el = document.createElement(\"input\");\n            el.setAttribute(\"type\", \"file\");\n            el.files = dataTransfer.files;\n            res = el.files.length === 1;\n        } catch (err) {\n            res = false;\n        }\n    }\n    return res;\n};\nconst ITEM_ERROR = [\n    ItemStatus.LOAD_ERROR,\n    ItemStatus.PROCESSING_ERROR,\n    ItemStatus.PROCESSING_REVERT_ERROR\n];\nconst ITEM_BUSY = [\n    ItemStatus.LOADING,\n    ItemStatus.PROCESSING,\n    ItemStatus.PROCESSING_QUEUED,\n    ItemStatus.INIT\n];\nconst ITEM_READY = [\n    ItemStatus.PROCESSING_COMPLETE\n];\nconst isItemInErrorState = (item)=>ITEM_ERROR.includes(item.status);\nconst isItemInBusyState = (item)=>ITEM_BUSY.includes(item.status);\nconst isItemInReadyState = (item)=>ITEM_READY.includes(item.status);\nconst isAsync = (state)=>isObject(state.options.server) && (isObject(state.options.server.process) || isFunction(state.options.server.process));\nconst queries = (state)=>({\n        GET_STATUS: ()=>{\n            const items = getActiveItems(state.items);\n            const { EMPTY, ERROR, BUSY, IDLE, READY } = Status;\n            if (items.length === 0) return EMPTY;\n            if (items.some(isItemInErrorState)) return ERROR;\n            if (items.some(isItemInBusyState)) return BUSY;\n            if (items.some(isItemInReadyState)) return READY;\n            return IDLE;\n        },\n        GET_ITEM: (query)=>getItemByQuery(state.items, query),\n        GET_ACTIVE_ITEM: (query)=>getItemByQuery(getActiveItems(state.items), query),\n        GET_ACTIVE_ITEMS: ()=>getActiveItems(state.items),\n        GET_ITEMS: ()=>state.items,\n        GET_ITEM_NAME: (query)=>{\n            const item = getItemByQuery(state.items, query);\n            return item ? item.filename : null;\n        },\n        GET_ITEM_SIZE: (query)=>{\n            const item = getItemByQuery(state.items, query);\n            return item ? item.fileSize : null;\n        },\n        GET_STYLES: ()=>Object.keys(state.options).filter((key)=>/^style/.test(key)).map((option1)=>({\n                    name: option1,\n                    value: state.options[option1]\n                })),\n        GET_PANEL_ASPECT_RATIO: ()=>{\n            const isShapeCircle = /circle/.test(state.options.stylePanelLayout);\n            const aspectRatio = isShapeCircle ? 1 : getNumericAspectRatioFromString(state.options.stylePanelAspectRatio);\n            return aspectRatio;\n        },\n        GET_ITEM_PANEL_ASPECT_RATIO: ()=>state.options.styleItemPanelAspectRatio,\n        GET_ITEMS_BY_STATUS: (status)=>getActiveItems(state.items).filter((item)=>item.status === status),\n        GET_TOTAL_ITEMS: ()=>getActiveItems(state.items).length,\n        SHOULD_UPDATE_FILE_INPUT: ()=>state.options.storeAsFile && canUpdateFileInput() && !isAsync(state),\n        IS_ASYNC: ()=>isAsync(state),\n        GET_FILE_SIZE_LABELS: (query)=>({\n                labelBytes: query(\"GET_LABEL_FILE_SIZE_BYTES\") || undefined,\n                labelKilobytes: query(\"GET_LABEL_FILE_SIZE_KILOBYTES\") || undefined,\n                labelMegabytes: query(\"GET_LABEL_FILE_SIZE_MEGABYTES\") || undefined,\n                labelGigabytes: query(\"GET_LABEL_FILE_SIZE_GIGABYTES\") || undefined\n            })\n    });\nconst hasRoomForItem = (state)=>{\n    const count = getActiveItems(state.items).length;\n    // if cannot have multiple items, to add one item it should currently not contain items\n    if (!state.options.allowMultiple) {\n        return count === 0;\n    }\n    // if allows multiple items, we check if a max item count has been set, if not, there's no limit\n    const maxFileCount = state.options.maxFiles;\n    if (maxFileCount === null) {\n        return true;\n    }\n    // we check if the current count is smaller than the max count, if so, another file can still be added\n    if (count < maxFileCount) {\n        return true;\n    }\n    // no more room for another file\n    return false;\n};\nconst limit = (value, min, max)=>Math.max(Math.min(max, value), min);\nconst arrayInsert = (arr, index, item)=>arr.splice(index, 0, item);\nconst insertItem = (items, item, index)=>{\n    if (isEmpty(item)) {\n        return null;\n    }\n    // if index is undefined, append\n    if (typeof index === \"undefined\") {\n        items.push(item);\n        return item;\n    }\n    // limit the index to the size of the items array\n    index = limit(index, 0, items.length);\n    // add item to array\n    arrayInsert(items, index, item);\n    // expose\n    return item;\n};\nconst isBase64DataURI = (str)=>/^\\s*data:([a-z]+\\/[a-z0-9-+.]+(;[a-z-]+=[a-z0-9-]+)?)?(;base64)?,([a-z0-9!$&',()*+;=\\-._~:@\\/?%\\s]*)\\s*$/i.test(str);\nconst getFilenameFromURL = (url)=>`${url}`.split(\"/\").pop().split(\"?\").shift();\nconst getExtensionFromFilename = (name)=>name.split(\".\").pop();\nconst guesstimateExtension = (type)=>{\n    // if no extension supplied, exit here\n    if (typeof type !== \"string\") {\n        return \"\";\n    }\n    // get subtype\n    const subtype = type.split(\"/\").pop();\n    // is svg subtype\n    if (/svg/.test(subtype)) {\n        return \"svg\";\n    }\n    if (/zip|compressed/.test(subtype)) {\n        return \"zip\";\n    }\n    if (/plain/.test(subtype)) {\n        return \"txt\";\n    }\n    if (/msword/.test(subtype)) {\n        return \"doc\";\n    }\n    // if is valid subtype\n    if (/[a-z]+/.test(subtype)) {\n        // always use jpg extension\n        if (subtype === \"jpeg\") {\n            return \"jpg\";\n        }\n        // return subtype\n        return subtype;\n    }\n    return \"\";\n};\nconst leftPad = (value, padding = \"\")=>(padding + value).slice(-padding.length);\nconst getDateString = (date = new Date())=>`${date.getFullYear()}-${leftPad(date.getMonth() + 1, \"00\")}-${leftPad(date.getDate(), \"00\")}_${leftPad(date.getHours(), \"00\")}-${leftPad(date.getMinutes(), \"00\")}-${leftPad(date.getSeconds(), \"00\")}`;\nconst getFileFromBlob = (blob, filename, type = null, extension = null)=>{\n    const file = typeof type === \"string\" ? blob.slice(0, blob.size, type) : blob.slice(0, blob.size, blob.type);\n    file.lastModifiedDate = new Date();\n    // copy relative path\n    if (blob._relativePath) file._relativePath = blob._relativePath;\n    // if blob has name property, use as filename if no filename supplied\n    if (!isString(filename)) {\n        filename = getDateString();\n    }\n    // if filename supplied but no extension and filename has extension\n    if (filename && extension === null && getExtensionFromFilename(filename)) {\n        file.name = filename;\n    } else {\n        extension = extension || guesstimateExtension(file.type);\n        file.name = filename + (extension ? \".\" + extension : \"\");\n    }\n    return file;\n};\nconst getBlobBuilder = ()=>{\n    return window.BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;\n};\nconst createBlob = (arrayBuffer, mimeType)=>{\n    const BB = getBlobBuilder();\n    if (BB) {\n        const bb = new BB();\n        bb.append(arrayBuffer);\n        return bb.getBlob(mimeType);\n    }\n    return new Blob([\n        arrayBuffer\n    ], {\n        type: mimeType\n    });\n};\nconst getBlobFromByteStringWithMimeType = (byteString, mimeType)=>{\n    const ab = new ArrayBuffer(byteString.length);\n    const ia = new Uint8Array(ab);\n    for(let i = 0; i < byteString.length; i++){\n        ia[i] = byteString.charCodeAt(i);\n    }\n    return createBlob(ab, mimeType);\n};\nconst getMimeTypeFromBase64DataURI = (dataURI)=>{\n    return (/^data:(.+);/.exec(dataURI) || [])[1] || null;\n};\nconst getBase64DataFromBase64DataURI = (dataURI)=>{\n    // get data part of string (remove data:image/jpeg...,)\n    const data = dataURI.split(\",\")[1];\n    // remove any whitespace as that causes InvalidCharacterError in IE\n    return data.replace(/\\s/g, \"\");\n};\nconst getByteStringFromBase64DataURI = (dataURI)=>{\n    return atob(getBase64DataFromBase64DataURI(dataURI));\n};\nconst getBlobFromBase64DataURI = (dataURI)=>{\n    const mimeType = getMimeTypeFromBase64DataURI(dataURI);\n    const byteString = getByteStringFromBase64DataURI(dataURI);\n    return getBlobFromByteStringWithMimeType(byteString, mimeType);\n};\nconst getFileFromBase64DataURI = (dataURI, filename, extension)=>{\n    return getFileFromBlob(getBlobFromBase64DataURI(dataURI), filename, null, extension);\n};\nconst getFileNameFromHeader = (header)=>{\n    // test if is content disposition header, if not exit\n    if (!/^content-disposition:/i.test(header)) return null;\n    // get filename parts\n    const matches = header.split(/filename=|filename\\*=.+''/).splice(1).map((name)=>name.trim().replace(/^[\"']|[;\"']{0,2}$/g, \"\")).filter((name)=>name.length);\n    return matches.length ? decodeURI(matches[matches.length - 1]) : null;\n};\nconst getFileSizeFromHeader = (header)=>{\n    if (/content-length:/i.test(header)) {\n        const size = header.match(/[0-9]+/)[0];\n        return size ? parseInt(size, 10) : null;\n    }\n    return null;\n};\nconst getTranfserIdFromHeader = (header)=>{\n    if (/x-content-transfer-id:/i.test(header)) {\n        const id = (header.split(\":\")[1] || \"\").trim();\n        return id || null;\n    }\n    return null;\n};\nconst getFileInfoFromHeaders = (headers)=>{\n    const info = {\n        source: null,\n        name: null,\n        size: null\n    };\n    const rows = headers.split(\"\\n\");\n    for (let header of rows){\n        const name = getFileNameFromHeader(header);\n        if (name) {\n            info.name = name;\n            continue;\n        }\n        const size = getFileSizeFromHeader(header);\n        if (size) {\n            info.size = size;\n            continue;\n        }\n        const source = getTranfserIdFromHeader(header);\n        if (source) {\n            info.source = source;\n            continue;\n        }\n    }\n    return info;\n};\nconst createFileLoader = (fetchFn)=>{\n    const state = {\n        source: null,\n        complete: false,\n        progress: 0,\n        size: null,\n        timestamp: null,\n        duration: 0,\n        request: null\n    };\n    const getProgress = ()=>state.progress;\n    const abort = ()=>{\n        if (state.request && state.request.abort) {\n            state.request.abort();\n        }\n    };\n    // load source\n    const load = ()=>{\n        // get quick reference\n        const source = state.source;\n        api.fire(\"init\", source);\n        // Load Files\n        if (source instanceof File) {\n            api.fire(\"load\", source);\n        } else if (source instanceof Blob) {\n            // Load blobs, set default name to current date\n            api.fire(\"load\", getFileFromBlob(source, source.name));\n        } else if (isBase64DataURI(source)) {\n            // Load base 64, set default name to current date\n            api.fire(\"load\", getFileFromBase64DataURI(source));\n        } else {\n            // Deal as if is external URL, let's load it!\n            loadURL(source);\n        }\n    };\n    // loads a url\n    const loadURL = (url)=>{\n        // is remote url and no fetch method supplied\n        if (!fetchFn) {\n            api.fire(\"error\", {\n                type: \"error\",\n                body: \"Can't load URL\",\n                code: 400\n            });\n            return;\n        }\n        // set request start\n        state.timestamp = Date.now();\n        // load file\n        state.request = fetchFn(url, (response)=>{\n            // update duration\n            state.duration = Date.now() - state.timestamp;\n            // done!\n            state.complete = true;\n            // turn blob response into a file\n            if (response instanceof Blob) {\n                response = getFileFromBlob(response, response.name || getFilenameFromURL(url));\n            }\n            api.fire(\"load\", // if has received blob, we go with blob, if no response, we return null\n            response instanceof Blob ? response : response ? response.body : null);\n        }, (error)=>{\n            api.fire(\"error\", typeof error === \"string\" ? {\n                type: \"error\",\n                code: 0,\n                body: error\n            } : error);\n        }, (computable, current, total)=>{\n            // collected some meta data already\n            if (total) {\n                state.size = total;\n            }\n            // update duration\n            state.duration = Date.now() - state.timestamp;\n            // if we can't compute progress, we're not going to fire progress events\n            if (!computable) {\n                state.progress = null;\n                return;\n            }\n            // update progress percentage\n            state.progress = current / total;\n            // expose\n            api.fire(\"progress\", state.progress);\n        }, ()=>{\n            api.fire(\"abort\");\n        }, (response)=>{\n            const fileinfo = getFileInfoFromHeaders(typeof response === \"string\" ? response : response.headers);\n            api.fire(\"meta\", {\n                size: state.size || fileinfo.size,\n                filename: fileinfo.name,\n                source: fileinfo.source\n            });\n        });\n    };\n    const api = {\n        ...on(),\n        setSource: (source)=>state.source = source,\n        getProgress,\n        abort,\n        load\n    };\n    return api;\n};\nconst isGet = (method)=>/GET|HEAD/.test(method);\nconst sendRequest = (data, url, options)=>{\n    const api = {\n        onheaders: ()=>{},\n        onprogress: ()=>{},\n        onload: ()=>{},\n        ontimeout: ()=>{},\n        onerror: ()=>{},\n        onabort: ()=>{},\n        abort: ()=>{\n            aborted = true;\n            xhr.abort();\n        }\n    };\n    // timeout identifier, only used when timeout is defined\n    let aborted = false;\n    let headersReceived = false;\n    // set default options\n    options = {\n        method: \"POST\",\n        headers: {},\n        withCredentials: false,\n        ...options\n    };\n    // encode url\n    url = encodeURI(url);\n    // if method is GET, add any received data to url\n    if (isGet(options.method) && data) {\n        url = `${url}${encodeURIComponent(typeof data === \"string\" ? data : JSON.stringify(data))}`;\n    }\n    // create request\n    const xhr = new XMLHttpRequest();\n    // progress of load\n    const process = isGet(options.method) ? xhr : xhr.upload;\n    process.onprogress = (e)=>{\n        // no progress event when aborted ( onprogress is called once after abort() )\n        if (aborted) {\n            return;\n        }\n        api.onprogress(e.lengthComputable, e.loaded, e.total);\n    };\n    // tries to get header info to the app as fast as possible\n    xhr.onreadystatechange = ()=>{\n        // not interesting in these states ('unsent' and 'openend' as they don't give us any additional info)\n        if (xhr.readyState < 2) {\n            return;\n        }\n        // no server response\n        if (xhr.readyState === 4 && xhr.status === 0) {\n            return;\n        }\n        if (headersReceived) {\n            return;\n        }\n        headersReceived = true;\n        // we've probably received some useful data in response headers\n        api.onheaders(xhr);\n    };\n    // load successful\n    xhr.onload = ()=>{\n        // is classified as valid response\n        if (xhr.status >= 200 && xhr.status < 300) {\n            api.onload(xhr);\n        } else {\n            api.onerror(xhr);\n        }\n    };\n    // error during load\n    xhr.onerror = ()=>api.onerror(xhr);\n    // request aborted\n    xhr.onabort = ()=>{\n        aborted = true;\n        api.onabort();\n    };\n    // request timeout\n    xhr.ontimeout = ()=>api.ontimeout(xhr);\n    // open up open up!\n    xhr.open(options.method, url, true);\n    // set timeout if defined (do it after open so IE11 plays ball)\n    if (isInt(options.timeout)) {\n        xhr.timeout = options.timeout;\n    }\n    // add headers\n    Object.keys(options.headers).forEach((key)=>{\n        const value = unescape(encodeURIComponent(options.headers[key]));\n        xhr.setRequestHeader(key, value);\n    });\n    // set type of response\n    if (options.responseType) {\n        xhr.responseType = options.responseType;\n    }\n    // set credentials\n    if (options.withCredentials) {\n        xhr.withCredentials = true;\n    }\n    // let's send our data\n    xhr.send(data);\n    return api;\n};\nconst createResponse = (type, code, body, headers)=>({\n        type,\n        code,\n        body,\n        headers\n    });\nconst createTimeoutResponse = (cb)=>(xhr)=>{\n        cb(createResponse(\"error\", 0, \"Timeout\", xhr.getAllResponseHeaders()));\n    };\nconst hasQS = (str)=>/\\?/.test(str);\nconst buildURL = (...parts)=>{\n    let url = \"\";\n    parts.forEach((part)=>{\n        url += hasQS(url) && hasQS(part) ? part.replace(/\\?/, \"&\") : part;\n    });\n    return url;\n};\nconst createFetchFunction = (apiUrl = \"\", action)=>{\n    // custom handler (should also handle file, load, error, progress and abort)\n    if (typeof action === \"function\") {\n        return action;\n    }\n    // no action supplied\n    if (!action || !isString(action.url)) {\n        return null;\n    }\n    // set onload hanlder\n    const onload = action.onload || ((res)=>res);\n    const onerror = action.onerror || ((res)=>null);\n    // internal handler\n    return (url, load, error, progress, abort, headers)=>{\n        // do local or remote request based on if the url is external\n        const request = sendRequest(url, buildURL(apiUrl, action.url), {\n            ...action,\n            responseType: \"blob\"\n        });\n        request.onload = (xhr)=>{\n            // get headers\n            const headers = xhr.getAllResponseHeaders();\n            // get filename\n            const filename = getFileInfoFromHeaders(headers).name || getFilenameFromURL(url);\n            // create response\n            load(createResponse(\"load\", xhr.status, action.method === \"HEAD\" ? null : getFileFromBlob(onload(xhr.response), filename), headers));\n        };\n        request.onerror = (xhr)=>{\n            error(createResponse(\"error\", xhr.status, onerror(xhr.response) || xhr.statusText, xhr.getAllResponseHeaders()));\n        };\n        request.onheaders = (xhr)=>{\n            headers(createResponse(\"headers\", xhr.status, null, xhr.getAllResponseHeaders()));\n        };\n        request.ontimeout = createTimeoutResponse(error);\n        request.onprogress = progress;\n        request.onabort = abort;\n        // should return request\n        return request;\n    };\n};\nconst ChunkStatus = {\n    QUEUED: 0,\n    COMPLETE: 1,\n    PROCESSING: 2,\n    ERROR: 3,\n    WAITING: 4\n};\n/*\nfunction signature:\n  (file, metadata, load, error, progress, abort, transfer, options) => {\n    return {\n    abort:() => {}\n  }\n}\n*/ // apiUrl, action, name, file, metadata, load, error, progress, abort, transfer, options\nconst processFileChunked = (apiUrl, action, name, file, metadata, load, error, progress, abort, transfer, options)=>{\n    // all chunks\n    const chunks = [];\n    const { chunkTransferId, chunkServer, chunkSize, chunkRetryDelays } = options;\n    // default state\n    const state = {\n        serverId: chunkTransferId,\n        aborted: false\n    };\n    // set onload handlers\n    const ondata = action.ondata || ((fd)=>fd);\n    const onload = action.onload || ((xhr, method)=>method === \"HEAD\" ? xhr.getResponseHeader(\"Upload-Offset\") : xhr.response);\n    const onerror = action.onerror || ((res)=>null);\n    // create server hook\n    const requestTransferId = (cb)=>{\n        const formData = new FormData();\n        // add metadata under same name\n        if (isObject(metadata)) formData.append(name, JSON.stringify(metadata));\n        const headers = typeof action.headers === \"function\" ? action.headers(file, metadata) : {\n            ...action.headers,\n            \"Upload-Length\": file.size\n        };\n        const requestParams = {\n            ...action,\n            headers\n        };\n        // send request object\n        const request = sendRequest(ondata(formData), buildURL(apiUrl, action.url), requestParams);\n        request.onload = (xhr)=>cb(onload(xhr, requestParams.method));\n        request.onerror = (xhr)=>error(createResponse(\"error\", xhr.status, onerror(xhr.response) || xhr.statusText, xhr.getAllResponseHeaders()));\n        request.ontimeout = createTimeoutResponse(error);\n    };\n    const requestTransferOffset = (cb)=>{\n        const requestUrl = buildURL(apiUrl, chunkServer.url, state.serverId);\n        const headers = typeof action.headers === \"function\" ? action.headers(state.serverId) : {\n            ...action.headers\n        };\n        const requestParams = {\n            headers,\n            method: \"HEAD\"\n        };\n        const request = sendRequest(null, requestUrl, requestParams);\n        request.onload = (xhr)=>cb(onload(xhr, requestParams.method));\n        request.onerror = (xhr)=>error(createResponse(\"error\", xhr.status, onerror(xhr.response) || xhr.statusText, xhr.getAllResponseHeaders()));\n        request.ontimeout = createTimeoutResponse(error);\n    };\n    // create chunks\n    const lastChunkIndex = Math.floor(file.size / chunkSize);\n    for(let i = 0; i <= lastChunkIndex; i++){\n        const offset = i * chunkSize;\n        const data = file.slice(offset, offset + chunkSize, \"application/offset+octet-stream\");\n        chunks[i] = {\n            index: i,\n            size: data.size,\n            offset,\n            data,\n            file,\n            progress: 0,\n            retries: [\n                ...chunkRetryDelays\n            ],\n            status: ChunkStatus.QUEUED,\n            error: null,\n            request: null,\n            timeout: null\n        };\n    }\n    const completeProcessingChunks = ()=>load(state.serverId);\n    const canProcessChunk = (chunk)=>chunk.status === ChunkStatus.QUEUED || chunk.status === ChunkStatus.ERROR;\n    const processChunk = (chunk)=>{\n        // processing is paused, wait here\n        if (state.aborted) return;\n        // get next chunk to process\n        chunk = chunk || chunks.find(canProcessChunk);\n        // no more chunks to process\n        if (!chunk) {\n            // all done?\n            if (chunks.every((chunk)=>chunk.status === ChunkStatus.COMPLETE)) {\n                completeProcessingChunks();\n            }\n            // no chunk to handle\n            return;\n        }\n        // now processing this chunk\n        chunk.status = ChunkStatus.PROCESSING;\n        chunk.progress = null;\n        // allow parsing of formdata\n        const ondata = chunkServer.ondata || ((fd)=>fd);\n        const onerror = chunkServer.onerror || ((res)=>null);\n        const onload = chunkServer.onload || (()=>{});\n        // send request object\n        const requestUrl = buildURL(apiUrl, chunkServer.url, state.serverId);\n        const headers = typeof chunkServer.headers === \"function\" ? chunkServer.headers(chunk) : {\n            ...chunkServer.headers,\n            \"Content-Type\": \"application/offset+octet-stream\",\n            \"Upload-Offset\": chunk.offset,\n            \"Upload-Length\": file.size,\n            \"Upload-Name\": file.name\n        };\n        const request = chunk.request = sendRequest(ondata(chunk.data), requestUrl, {\n            ...chunkServer,\n            headers\n        });\n        request.onload = (xhr)=>{\n            // allow hooking into request result\n            onload(xhr, chunk.index, chunks.length);\n            // done!\n            chunk.status = ChunkStatus.COMPLETE;\n            // remove request reference\n            chunk.request = null;\n            // start processing more chunks\n            processChunks();\n        };\n        request.onprogress = (lengthComputable, loaded, total)=>{\n            chunk.progress = lengthComputable ? loaded : null;\n            updateTotalProgress();\n        };\n        request.onerror = (xhr)=>{\n            chunk.status = ChunkStatus.ERROR;\n            chunk.request = null;\n            chunk.error = onerror(xhr.response) || xhr.statusText;\n            if (!retryProcessChunk(chunk)) {\n                error(createResponse(\"error\", xhr.status, onerror(xhr.response) || xhr.statusText, xhr.getAllResponseHeaders()));\n            }\n        };\n        request.ontimeout = (xhr)=>{\n            chunk.status = ChunkStatus.ERROR;\n            chunk.request = null;\n            if (!retryProcessChunk(chunk)) {\n                createTimeoutResponse(error)(xhr);\n            }\n        };\n        request.onabort = ()=>{\n            chunk.status = ChunkStatus.QUEUED;\n            chunk.request = null;\n            abort();\n        };\n    };\n    const retryProcessChunk = (chunk)=>{\n        // no more retries left\n        if (chunk.retries.length === 0) return false;\n        // new retry\n        chunk.status = ChunkStatus.WAITING;\n        clearTimeout(chunk.timeout);\n        chunk.timeout = setTimeout(()=>{\n            processChunk(chunk);\n        }, chunk.retries.shift());\n        // we're going to retry\n        return true;\n    };\n    const updateTotalProgress = ()=>{\n        // calculate total progress fraction\n        const totalBytesTransfered = chunks.reduce((p, chunk)=>{\n            if (p === null || chunk.progress === null) return null;\n            return p + chunk.progress;\n        }, 0);\n        // can't compute progress\n        if (totalBytesTransfered === null) return progress(false, 0, 0);\n        // calculate progress values\n        const totalSize = chunks.reduce((total, chunk)=>total + chunk.size, 0);\n        // can update progress indicator\n        progress(true, totalBytesTransfered, totalSize);\n    };\n    // process new chunks\n    const processChunks = ()=>{\n        const totalProcessing = chunks.filter((chunk)=>chunk.status === ChunkStatus.PROCESSING).length;\n        if (totalProcessing >= 1) return;\n        processChunk();\n    };\n    const abortChunks = ()=>{\n        chunks.forEach((chunk)=>{\n            clearTimeout(chunk.timeout);\n            if (chunk.request) {\n                chunk.request.abort();\n            }\n        });\n    };\n    // let's go!\n    if (!state.serverId) {\n        requestTransferId((serverId)=>{\n            // stop here if aborted, might have happened in between request and callback\n            if (state.aborted) return;\n            // pass back to item so we can use it if something goes wrong\n            transfer(serverId);\n            // store internally\n            state.serverId = serverId;\n            processChunks();\n        });\n    } else {\n        requestTransferOffset((offset)=>{\n            // stop here if aborted, might have happened in between request and callback\n            if (state.aborted) return;\n            // mark chunks with lower offset as complete\n            chunks.filter((chunk)=>chunk.offset < offset).forEach((chunk)=>{\n                chunk.status = ChunkStatus.COMPLETE;\n                chunk.progress = chunk.size;\n            });\n            // continue processing\n            processChunks();\n        });\n    }\n    return {\n        abort: ()=>{\n            state.aborted = true;\n            abortChunks();\n        }\n    };\n};\n/*\nfunction signature:\n  (file, metadata, load, error, progress, abort) => {\n    return {\n    abort:() => {}\n  }\n}\n*/ const createFileProcessorFunction = (apiUrl, action, name, options)=>(file, metadata, load, error, progress, abort, transfer)=>{\n        // no file received\n        if (!file) return;\n        // if was passed a file, and we can chunk it, exit here\n        const canChunkUpload = options.chunkUploads;\n        const shouldChunkUpload = canChunkUpload && file.size > options.chunkSize;\n        const willChunkUpload = canChunkUpload && (shouldChunkUpload || options.chunkForce);\n        if (file instanceof Blob && willChunkUpload) return processFileChunked(apiUrl, action, name, file, metadata, load, error, progress, abort, transfer, options);\n        // set handlers\n        const ondata = action.ondata || ((fd)=>fd);\n        const onload = action.onload || ((res)=>res);\n        const onerror = action.onerror || ((res)=>null);\n        const headers = typeof action.headers === \"function\" ? action.headers(file, metadata) || {} : {\n            ...action.headers\n        };\n        const requestParams = {\n            ...action,\n            headers\n        };\n        // create formdata object\n        var formData = new FormData();\n        // add metadata under same name\n        if (isObject(metadata)) {\n            formData.append(name, JSON.stringify(metadata));\n        }\n        // Turn into an array of objects so no matter what the input, we can handle it the same way\n        (file instanceof Blob ? [\n            {\n                name: null,\n                file\n            }\n        ] : file).forEach((item)=>{\n            formData.append(name, item.file, item.name === null ? item.file.name : `${item.name}${item.file.name}`);\n        });\n        // send request object\n        const request = sendRequest(ondata(formData), buildURL(apiUrl, action.url), requestParams);\n        request.onload = (xhr)=>{\n            load(createResponse(\"load\", xhr.status, onload(xhr.response), xhr.getAllResponseHeaders()));\n        };\n        request.onerror = (xhr)=>{\n            error(createResponse(\"error\", xhr.status, onerror(xhr.response) || xhr.statusText, xhr.getAllResponseHeaders()));\n        };\n        request.ontimeout = createTimeoutResponse(error);\n        request.onprogress = progress;\n        request.onabort = abort;\n        // should return request\n        return request;\n    };\nconst createProcessorFunction = (apiUrl = \"\", action, name, options)=>{\n    // custom handler (should also handle file, load, error, progress and abort)\n    if (typeof action === \"function\") return (...params)=>action(name, ...params, options);\n    // no action supplied\n    if (!action || !isString(action.url)) return null;\n    // internal handler\n    return createFileProcessorFunction(apiUrl, action, name, options);\n};\n/*\n function signature:\n (uniqueFileId, load, error) => { }\n */ const createRevertFunction = (apiUrl = \"\", action)=>{\n    // is custom implementation\n    if (typeof action === \"function\") {\n        return action;\n    }\n    // no action supplied, return stub function, interface will work, but file won't be removed\n    if (!action || !isString(action.url)) {\n        return (uniqueFileId, load)=>load();\n    }\n    // set onload hanlder\n    const onload = action.onload || ((res)=>res);\n    const onerror = action.onerror || ((res)=>null);\n    // internal implementation\n    return (uniqueFileId, load, error)=>{\n        const request = sendRequest(uniqueFileId, apiUrl + action.url, action // contains method, headers and withCredentials properties\n        );\n        request.onload = (xhr)=>{\n            load(createResponse(\"load\", xhr.status, onload(xhr.response), xhr.getAllResponseHeaders()));\n        };\n        request.onerror = (xhr)=>{\n            error(createResponse(\"error\", xhr.status, onerror(xhr.response) || xhr.statusText, xhr.getAllResponseHeaders()));\n        };\n        request.ontimeout = createTimeoutResponse(error);\n        return request;\n    };\n};\nconst getRandomNumber = (min = 0, max = 1)=>min + Math.random() * (max - min);\nconst createPerceivedPerformanceUpdater = (cb, duration = 1000, offset = 0, tickMin = 25, tickMax = 250)=>{\n    let timeout = null;\n    const start = Date.now();\n    const tick = ()=>{\n        let runtime = Date.now() - start;\n        let delay = getRandomNumber(tickMin, tickMax);\n        if (runtime + delay > duration) {\n            delay = runtime + delay - duration;\n        }\n        let progress = runtime / duration;\n        if (progress >= 1 || document.hidden) {\n            cb(1);\n            return;\n        }\n        cb(progress);\n        timeout = setTimeout(tick, delay);\n    };\n    if (duration > 0) tick();\n    return {\n        clear: ()=>{\n            clearTimeout(timeout);\n        }\n    };\n};\nconst createFileProcessor = (processFn, options)=>{\n    const state = {\n        complete: false,\n        perceivedProgress: 0,\n        perceivedPerformanceUpdater: null,\n        progress: null,\n        timestamp: null,\n        perceivedDuration: 0,\n        duration: 0,\n        request: null,\n        response: null\n    };\n    const { allowMinimumUploadDuration } = options;\n    const process = (file, metadata)=>{\n        const progressFn = ()=>{\n            // we've not yet started the real download, stop here\n            // the request might not go through, for instance, there might be some server trouble\n            // if state.progress is null, the server does not allow computing progress and we show the spinner instead\n            if (state.duration === 0 || state.progress === null) return;\n            // as we're now processing, fire the progress event\n            api.fire(\"progress\", api.getProgress());\n        };\n        const completeFn = ()=>{\n            state.complete = true;\n            api.fire(\"load-perceived\", state.response.body);\n        };\n        // let's start processing\n        api.fire(\"start\");\n        // set request start\n        state.timestamp = Date.now();\n        // create perceived performance progress indicator\n        state.perceivedPerformanceUpdater = createPerceivedPerformanceUpdater((progress)=>{\n            state.perceivedProgress = progress;\n            state.perceivedDuration = Date.now() - state.timestamp;\n            progressFn();\n            // if fake progress is done, and a response has been received,\n            // and we've not yet called the complete method\n            if (state.response && state.perceivedProgress === 1 && !state.complete) {\n                // we done!\n                completeFn();\n            }\n        }, // random delay as in a list of files you start noticing\n        // files uploading at the exact same speed\n        allowMinimumUploadDuration ? getRandomNumber(750, 1500) : 0);\n        // remember request so we can abort it later\n        state.request = processFn(// the file to process\n        file, // the metadata to send along\n        metadata, // callbacks (load, error, progress, abort, transfer)\n        // load expects the body to be a server id if\n        // you want to make use of revert\n        (response)=>{\n            // we put the response in state so we can access\n            // it outside of this method\n            state.response = isObject(response) ? response : {\n                type: \"load\",\n                code: 200,\n                body: `${response}`,\n                headers: {}\n            };\n            // update duration\n            state.duration = Date.now() - state.timestamp;\n            // force progress to 1 as we're now done\n            state.progress = 1;\n            // actual load is done let's share results\n            api.fire(\"load\", state.response.body);\n            // we are really done\n            // if perceived progress is 1 ( wait for perceived progress to complete )\n            // or if server does not support progress ( null )\n            if (!allowMinimumUploadDuration || allowMinimumUploadDuration && state.perceivedProgress === 1) {\n                completeFn();\n            }\n        }, // error is expected to be an object with type, code, body\n        (error)=>{\n            // cancel updater\n            state.perceivedPerformanceUpdater.clear();\n            // update others about this error\n            api.fire(\"error\", isObject(error) ? error : {\n                type: \"error\",\n                code: 0,\n                body: `${error}`\n            });\n        }, // actual processing progress\n        (computable, current, total)=>{\n            // update actual duration\n            state.duration = Date.now() - state.timestamp;\n            // update actual progress\n            state.progress = computable ? current / total : null;\n            progressFn();\n        }, // abort does not expect a value\n        ()=>{\n            // stop updater\n            state.perceivedPerformanceUpdater.clear();\n            // fire the abort event so we can switch visuals\n            api.fire(\"abort\", state.response ? state.response.body : null);\n        }, // register the id for this transfer\n        (transferId)=>{\n            api.fire(\"transfer\", transferId);\n        });\n    };\n    const abort = ()=>{\n        // no request running, can't abort\n        if (!state.request) return;\n        // stop updater\n        state.perceivedPerformanceUpdater.clear();\n        // abort actual request\n        if (state.request.abort) state.request.abort();\n        // if has response object, we've completed the request\n        state.complete = true;\n    };\n    const reset = ()=>{\n        abort();\n        state.complete = false;\n        state.perceivedProgress = 0;\n        state.progress = 0;\n        state.timestamp = null;\n        state.perceivedDuration = 0;\n        state.duration = 0;\n        state.request = null;\n        state.response = null;\n    };\n    const getProgress = allowMinimumUploadDuration ? ()=>state.progress ? Math.min(state.progress, state.perceivedProgress) : null : ()=>state.progress || null;\n    const getDuration = allowMinimumUploadDuration ? ()=>Math.min(state.duration, state.perceivedDuration) : ()=>state.duration;\n    const api = {\n        ...on(),\n        process,\n        abort,\n        getProgress,\n        getDuration,\n        reset\n    };\n    return api;\n};\nconst getFilenameWithoutExtension = (name)=>name.substring(0, name.lastIndexOf(\".\")) || name;\nconst createFileStub = (source)=>{\n    let data = [\n        source.name,\n        source.size,\n        source.type\n    ];\n    // is blob or base64, then we need to set the name\n    if (source instanceof Blob || isBase64DataURI(source)) {\n        data[0] = source.name || getDateString();\n    } else if (isBase64DataURI(source)) {\n        // if is base64 data uri we need to determine the average size and type\n        data[1] = source.length;\n        data[2] = getMimeTypeFromBase64DataURI(source);\n    } else if (isString(source)) {\n        // url\n        data[0] = getFilenameFromURL(source);\n        data[1] = 0;\n        data[2] = \"application/octet-stream\";\n    }\n    return {\n        name: data[0],\n        size: data[1],\n        type: data[2]\n    };\n};\nconst isFile = (value)=>!!(value instanceof File || value instanceof Blob && value.name);\nconst deepCloneObject = (src)=>{\n    if (!isObject(src)) return src;\n    const target = isArray(src) ? [] : {};\n    for(const key in src){\n        if (!src.hasOwnProperty(key)) continue;\n        const v = src[key];\n        target[key] = v && isObject(v) ? deepCloneObject(v) : v;\n    }\n    return target;\n};\nconst createItem = (origin = null, serverFileReference = null, file = null)=>{\n    // unique id for this item, is used to identify the item across views\n    const id = getUniqueId();\n    /**\n     * Internal item state\n     */ const state = {\n        // is archived\n        archived: false,\n        // if is frozen, no longer fires events\n        frozen: false,\n        // removed from view\n        released: false,\n        // original source\n        source: null,\n        // file model reference\n        file,\n        // id of file on server\n        serverFileReference,\n        // id of file transfer on server\n        transferId: null,\n        // is aborted\n        processingAborted: false,\n        // current item status\n        status: serverFileReference ? ItemStatus.PROCESSING_COMPLETE : ItemStatus.INIT,\n        // active processes\n        activeLoader: null,\n        activeProcessor: null\n    };\n    // callback used when abort processing is called to link back to the resolve method\n    let abortProcessingRequestComplete = null;\n    /**\n     * Externally added item metadata\n     */ const metadata = {};\n    // item data\n    const setStatus = (status)=>state.status = status;\n    // fire event unless the item has been archived\n    const fire = (event, ...params)=>{\n        if (state.released || state.frozen) return;\n        api.fire(event, ...params);\n    };\n    // file data\n    const getFileExtension = ()=>getExtensionFromFilename(state.file.name);\n    const getFileType = ()=>state.file.type;\n    const getFileSize = ()=>state.file.size;\n    const getFile = ()=>state.file;\n    //\n    // logic to load a file\n    //\n    const load = (source, loader, onload)=>{\n        // remember the original item source\n        state.source = source;\n        // source is known\n        api.fireSync(\"init\");\n        // file stub is already there\n        if (state.file) {\n            api.fireSync(\"load-skip\");\n            return;\n        }\n        // set a stub file object while loading the actual data\n        state.file = createFileStub(source);\n        // starts loading\n        loader.on(\"init\", ()=>{\n            fire(\"load-init\");\n        });\n        // we'eve received a size indication, let's update the stub\n        loader.on(\"meta\", (meta)=>{\n            // set size of file stub\n            state.file.size = meta.size;\n            // set name of file stub\n            state.file.filename = meta.filename;\n            // if has received source, we done\n            if (meta.source) {\n                origin = FileOrigin.LIMBO;\n                state.serverFileReference = meta.source;\n                state.status = ItemStatus.PROCESSING_COMPLETE;\n            }\n            // size has been updated\n            fire(\"load-meta\");\n        });\n        // the file is now loading we need to update the progress indicators\n        loader.on(\"progress\", (progress)=>{\n            setStatus(ItemStatus.LOADING);\n            fire(\"load-progress\", progress);\n        });\n        // an error was thrown while loading the file, we need to switch to error state\n        loader.on(\"error\", (error)=>{\n            setStatus(ItemStatus.LOAD_ERROR);\n            fire(\"load-request-error\", error);\n        });\n        // user or another process aborted the file load (cannot retry)\n        loader.on(\"abort\", ()=>{\n            setStatus(ItemStatus.INIT);\n            fire(\"load-abort\");\n        });\n        // done loading\n        loader.on(\"load\", (file)=>{\n            // as we've now loaded the file the loader is no longer required\n            state.activeLoader = null;\n            // called when file has loaded succesfully\n            const success = (result)=>{\n                // set (possibly) transformed file\n                state.file = isFile(result) ? result : state.file;\n                // file received\n                if (origin === FileOrigin.LIMBO && state.serverFileReference) {\n                    setStatus(ItemStatus.PROCESSING_COMPLETE);\n                } else {\n                    setStatus(ItemStatus.IDLE);\n                }\n                fire(\"load\");\n            };\n            const error = (result)=>{\n                // set original file\n                state.file = file;\n                fire(\"load-meta\");\n                setStatus(ItemStatus.LOAD_ERROR);\n                fire(\"load-file-error\", result);\n            };\n            // if we already have a server file reference, we don't need to call the onload method\n            if (state.serverFileReference) {\n                success(file);\n                return;\n            }\n            // no server id, let's give this file the full treatment\n            onload(file, success, error);\n        });\n        // set loader source data\n        loader.setSource(source);\n        // set as active loader\n        state.activeLoader = loader;\n        // load the source data\n        loader.load();\n    };\n    const retryLoad = ()=>{\n        if (!state.activeLoader) {\n            return;\n        }\n        state.activeLoader.load();\n    };\n    const abortLoad = ()=>{\n        if (state.activeLoader) {\n            state.activeLoader.abort();\n            return;\n        }\n        setStatus(ItemStatus.INIT);\n        fire(\"load-abort\");\n    };\n    //\n    // logic to process a file\n    //\n    const process = (processor, onprocess)=>{\n        // processing was aborted\n        if (state.processingAborted) {\n            state.processingAborted = false;\n            return;\n        }\n        // now processing\n        setStatus(ItemStatus.PROCESSING);\n        // reset abort callback\n        abortProcessingRequestComplete = null;\n        // if no file loaded we'll wait for the load event\n        if (!(state.file instanceof Blob)) {\n            api.on(\"load\", ()=>{\n                process(processor, onprocess);\n            });\n            return;\n        }\n        // setup processor\n        processor.on(\"load\", (serverFileReference)=>{\n            // need this id to be able to revert the upload\n            state.transferId = null;\n            state.serverFileReference = serverFileReference;\n        });\n        // register transfer id\n        processor.on(\"transfer\", (transferId)=>{\n            // need this id to be able to revert the upload\n            state.transferId = transferId;\n        });\n        processor.on(\"load-perceived\", (serverFileReference)=>{\n            // no longer required\n            state.activeProcessor = null;\n            // need this id to be able to rever the upload\n            state.transferId = null;\n            state.serverFileReference = serverFileReference;\n            setStatus(ItemStatus.PROCESSING_COMPLETE);\n            fire(\"process-complete\", serverFileReference);\n        });\n        processor.on(\"start\", ()=>{\n            fire(\"process-start\");\n        });\n        processor.on(\"error\", (error)=>{\n            state.activeProcessor = null;\n            setStatus(ItemStatus.PROCESSING_ERROR);\n            fire(\"process-error\", error);\n        });\n        processor.on(\"abort\", (serverFileReference)=>{\n            state.activeProcessor = null;\n            // if file was uploaded but processing was cancelled during perceived processor time store file reference\n            state.serverFileReference = serverFileReference;\n            setStatus(ItemStatus.IDLE);\n            fire(\"process-abort\");\n            // has timeout so doesn't interfere with remove action\n            if (abortProcessingRequestComplete) {\n                abortProcessingRequestComplete();\n            }\n        });\n        processor.on(\"progress\", (progress)=>{\n            fire(\"process-progress\", progress);\n        });\n        // when successfully transformed\n        const success = (file)=>{\n            // if was archived in the mean time, don't process\n            if (state.archived) return;\n            // process file!\n            processor.process(file, {\n                ...metadata\n            });\n        };\n        // something went wrong during transform phase\n        const error = console.error;\n        // start processing the file\n        onprocess(state.file, success, error);\n        // set as active processor\n        state.activeProcessor = processor;\n    };\n    const requestProcessing = ()=>{\n        state.processingAborted = false;\n        setStatus(ItemStatus.PROCESSING_QUEUED);\n    };\n    const abortProcessing = ()=>new Promise((resolve)=>{\n            if (!state.activeProcessor) {\n                state.processingAborted = true;\n                setStatus(ItemStatus.IDLE);\n                fire(\"process-abort\");\n                resolve();\n                return;\n            }\n            abortProcessingRequestComplete = ()=>{\n                resolve();\n            };\n            state.activeProcessor.abort();\n        });\n    //\n    // logic to revert a processed file\n    //\n    const revert = (revertFileUpload, forceRevert)=>new Promise((resolve, reject)=>{\n            // a completed upload will have a serverFileReference, a failed chunked upload where\n            // getting a serverId succeeded but >=0 chunks have been uploaded will have transferId set\n            const serverTransferId = state.serverFileReference !== null ? state.serverFileReference : state.transferId;\n            // cannot revert without a server id for this process\n            if (serverTransferId === null) {\n                resolve();\n                return;\n            }\n            // revert the upload (fire and forget)\n            revertFileUpload(serverTransferId, ()=>{\n                // reset file server id and transfer id as now it's not available on the server\n                state.serverFileReference = null;\n                state.transferId = null;\n                resolve();\n            }, (error)=>{\n                // don't set error state when reverting is optional, it will always resolve\n                if (!forceRevert) {\n                    resolve();\n                    return;\n                }\n                // oh no errors\n                setStatus(ItemStatus.PROCESSING_REVERT_ERROR);\n                fire(\"process-revert-error\");\n                reject(error);\n            });\n            // fire event\n            setStatus(ItemStatus.IDLE);\n            fire(\"process-revert\");\n        });\n    // exposed methods\n    const setMetadata = (key, value, silent)=>{\n        const keys = key.split(\".\");\n        const root = keys[0];\n        const last = keys.pop();\n        let data = metadata;\n        keys.forEach((key)=>data = data[key]);\n        // compare old value against new value, if they're the same, we're not updating\n        if (JSON.stringify(data[last]) === JSON.stringify(value)) return;\n        // update value\n        data[last] = value;\n        // fire update\n        fire(\"metadata-update\", {\n            key: root,\n            value: metadata[root],\n            silent\n        });\n    };\n    const getMetadata = (key)=>deepCloneObject(key ? metadata[key] : metadata);\n    const api = {\n        id: {\n            get: ()=>id\n        },\n        origin: {\n            get: ()=>origin,\n            set: (value)=>origin = value\n        },\n        serverId: {\n            get: ()=>state.serverFileReference\n        },\n        transferId: {\n            get: ()=>state.transferId\n        },\n        status: {\n            get: ()=>state.status\n        },\n        filename: {\n            get: ()=>state.file.name\n        },\n        filenameWithoutExtension: {\n            get: ()=>getFilenameWithoutExtension(state.file.name)\n        },\n        fileExtension: {\n            get: getFileExtension\n        },\n        fileType: {\n            get: getFileType\n        },\n        fileSize: {\n            get: getFileSize\n        },\n        file: {\n            get: getFile\n        },\n        relativePath: {\n            get: ()=>state.file._relativePath\n        },\n        source: {\n            get: ()=>state.source\n        },\n        getMetadata,\n        setMetadata: (key, value, silent)=>{\n            if (isObject(key)) {\n                const data = key;\n                Object.keys(data).forEach((key)=>{\n                    setMetadata(key, data[key], value);\n                });\n                return key;\n            }\n            setMetadata(key, value, silent);\n            return value;\n        },\n        extend: (name, handler)=>itemAPI[name] = handler,\n        abortLoad,\n        retryLoad,\n        requestProcessing,\n        abortProcessing,\n        load,\n        process,\n        revert,\n        ...on(),\n        freeze: ()=>state.frozen = true,\n        release: ()=>state.released = true,\n        released: {\n            get: ()=>state.released\n        },\n        archive: ()=>state.archived = true,\n        archived: {\n            get: ()=>state.archived\n        },\n        // replace source and file object\n        setFile: (file)=>state.file = file\n    };\n    // create it here instead of returning it instantly so we can extend it later\n    const itemAPI = createObject(api);\n    return itemAPI;\n};\nconst getItemIndexByQuery = (items, query)=>{\n    // just return first index\n    if (isEmpty(query)) {\n        return 0;\n    }\n    // invalid queries\n    if (!isString(query)) {\n        return -1;\n    }\n    // return item by id (or -1 if not found)\n    return items.findIndex((item)=>item.id === query);\n};\nconst getItemById = (items, itemId)=>{\n    const index = getItemIndexByQuery(items, itemId);\n    if (index < 0) {\n        return;\n    }\n    return items[index] || null;\n};\nconst fetchBlob = (url, load, error, progress, abort, headers)=>{\n    const request = sendRequest(null, url, {\n        method: \"GET\",\n        responseType: \"blob\"\n    });\n    request.onload = (xhr)=>{\n        // get headers\n        const headers = xhr.getAllResponseHeaders();\n        // get filename\n        const filename = getFileInfoFromHeaders(headers).name || getFilenameFromURL(url);\n        // create response\n        load(createResponse(\"load\", xhr.status, getFileFromBlob(xhr.response, filename), headers));\n    };\n    request.onerror = (xhr)=>{\n        error(createResponse(\"error\", xhr.status, xhr.statusText, xhr.getAllResponseHeaders()));\n    };\n    request.onheaders = (xhr)=>{\n        headers(createResponse(\"headers\", xhr.status, null, xhr.getAllResponseHeaders()));\n    };\n    request.ontimeout = createTimeoutResponse(error);\n    request.onprogress = progress;\n    request.onabort = abort;\n    // should return request\n    return request;\n};\nconst getDomainFromURL = (url)=>{\n    if (url.indexOf(\"//\") === 0) {\n        url = location.protocol + url;\n    }\n    return url.toLowerCase().replace(\"blob:\", \"\").replace(/([a-z])?:\\/\\//, \"$1\").split(\"/\")[0];\n};\nconst isExternalURL = (url)=>(url.indexOf(\":\") > -1 || url.indexOf(\"//\") > -1) && getDomainFromURL(location.href) !== getDomainFromURL(url);\nconst dynamicLabel = (label)=>(...params)=>isFunction(label) ? label(...params) : label;\nconst isMockItem = (item)=>!isFile(item.file);\nconst listUpdated = (dispatch, state)=>{\n    clearTimeout(state.listUpdateTimeout);\n    state.listUpdateTimeout = setTimeout(()=>{\n        dispatch(\"DID_UPDATE_ITEMS\", {\n            items: getActiveItems(state.items)\n        });\n    }, 0);\n};\nconst optionalPromise = (fn, ...params)=>new Promise((resolve)=>{\n        if (!fn) {\n            return resolve(true);\n        }\n        const result = fn(...params);\n        if (result == null) {\n            return resolve(true);\n        }\n        if (typeof result === \"boolean\") {\n            return resolve(result);\n        }\n        if (typeof result.then === \"function\") {\n            result.then(resolve);\n        }\n    });\nconst sortItems = (state, compare)=>{\n    state.items.sort((a, b)=>compare(createItemAPI(a), createItemAPI(b)));\n};\n// returns item based on state\nconst getItemByQueryFromState = (state, itemHandler)=>({ query, success = ()=>{}, failure = ()=>{}, ...options } = {})=>{\n        const item = getItemByQuery(state.items, query);\n        if (!item) {\n            failure({\n                error: createResponse(\"error\", 0, \"Item not found\"),\n                file: null\n            });\n            return;\n        }\n        itemHandler(item, success, failure, options || {});\n    };\nconst actions = (dispatch, query, state)=>({\n        /**\n     * Aborts all ongoing processes\n     */ ABORT_ALL: ()=>{\n            getActiveItems(state.items).forEach((item)=>{\n                item.freeze();\n                item.abortLoad();\n                item.abortProcessing();\n            });\n        },\n        /**\n     * Sets initial files\n     */ DID_SET_FILES: ({ value = [] })=>{\n            // map values to file objects\n            const files = value.map((file)=>({\n                    source: file.source ? file.source : file,\n                    options: file.options\n                }));\n            // loop over files, if file is in list, leave it be, if not, remove\n            // test if items should be moved\n            let activeItems = getActiveItems(state.items);\n            activeItems.forEach((item)=>{\n                // if item not is in new value, remove\n                if (!files.find((file)=>file.source === item.source || file.source === item.file)) {\n                    dispatch(\"REMOVE_ITEM\", {\n                        query: item,\n                        remove: false\n                    });\n                }\n            });\n            // add new files\n            activeItems = getActiveItems(state.items);\n            files.forEach((file, index)=>{\n                // if file is already in list\n                if (activeItems.find((item)=>item.source === file.source || item.file === file.source)) return;\n                // not in list, add\n                dispatch(\"ADD_ITEM\", {\n                    ...file,\n                    interactionMethod: InteractionMethod.NONE,\n                    index\n                });\n            });\n        },\n        DID_UPDATE_ITEM_METADATA: ({ id, action, change })=>{\n            // don't do anything\n            if (change.silent) return;\n            // if is called multiple times in close succession we combined all calls together to save resources\n            clearTimeout(state.itemUpdateTimeout);\n            state.itemUpdateTimeout = setTimeout(()=>{\n                const item = getItemById(state.items, id);\n                // only revert and attempt to upload when we're uploading to a server\n                if (!query(\"IS_ASYNC\")) {\n                    // should we update the output data\n                    applyFilterChain(\"SHOULD_PREPARE_OUTPUT\", false, {\n                        item,\n                        query,\n                        action,\n                        change\n                    }).then((shouldPrepareOutput)=>{\n                        // plugins determined the output data should be prepared (or not), can be adjusted with beforePrepareOutput hook\n                        const beforePrepareFile = query(\"GET_BEFORE_PREPARE_FILE\");\n                        if (beforePrepareFile) shouldPrepareOutput = beforePrepareFile(item, shouldPrepareOutput);\n                        if (!shouldPrepareOutput) return;\n                        dispatch(\"REQUEST_PREPARE_OUTPUT\", {\n                            query: id,\n                            item,\n                            success: (file)=>{\n                                dispatch(\"DID_PREPARE_OUTPUT\", {\n                                    id,\n                                    file\n                                });\n                            }\n                        }, true);\n                    });\n                    return;\n                }\n                // if is local item we need to enable upload button so change can be propagated to server\n                if (item.origin === FileOrigin.LOCAL) {\n                    dispatch(\"DID_LOAD_ITEM\", {\n                        id: item.id,\n                        error: null,\n                        serverFileReference: item.source\n                    });\n                }\n                // for async scenarios\n                const upload = ()=>{\n                    // we push this forward a bit so the interface is updated correctly\n                    setTimeout(()=>{\n                        dispatch(\"REQUEST_ITEM_PROCESSING\", {\n                            query: id\n                        });\n                    }, 32);\n                };\n                const revert = (doUpload)=>{\n                    item.revert(createRevertFunction(state.options.server.url, state.options.server.revert), query(\"GET_FORCE_REVERT\")).then(doUpload ? upload : ()=>{}).catch(()=>{});\n                };\n                const abort = (doUpload)=>{\n                    item.abortProcessing().then(doUpload ? upload : ()=>{});\n                };\n                // if we should re-upload the file immediately\n                if (item.status === ItemStatus.PROCESSING_COMPLETE) {\n                    return revert(state.options.instantUpload);\n                }\n                // if currently uploading, cancel upload\n                if (item.status === ItemStatus.PROCESSING) {\n                    return abort(state.options.instantUpload);\n                }\n                if (state.options.instantUpload) {\n                    upload();\n                }\n            }, 0);\n        },\n        MOVE_ITEM: ({ query, index })=>{\n            const item = getItemByQuery(state.items, query);\n            if (!item) return;\n            const currentIndex = state.items.indexOf(item);\n            index = limit(index, 0, state.items.length - 1);\n            if (currentIndex === index) return;\n            state.items.splice(index, 0, state.items.splice(currentIndex, 1)[0]);\n        },\n        SORT: ({ compare })=>{\n            sortItems(state, compare);\n            dispatch(\"DID_SORT_ITEMS\", {\n                items: query(\"GET_ACTIVE_ITEMS\")\n            });\n        },\n        ADD_ITEMS: ({ items, index, interactionMethod, success = ()=>{}, failure = ()=>{} })=>{\n            let currentIndex = index;\n            if (index === -1 || typeof index === \"undefined\") {\n                const insertLocation = query(\"GET_ITEM_INSERT_LOCATION\");\n                const totalItems = query(\"GET_TOTAL_ITEMS\");\n                currentIndex = insertLocation === \"before\" ? 0 : totalItems;\n            }\n            const ignoredFiles = query(\"GET_IGNORED_FILES\");\n            const isValidFile = (source)=>isFile(source) ? !ignoredFiles.includes(source.name.toLowerCase()) : !isEmpty(source);\n            const validItems = items.filter(isValidFile);\n            const promises = validItems.map((source)=>new Promise((resolve, reject)=>{\n                    dispatch(\"ADD_ITEM\", {\n                        interactionMethod,\n                        source: source.source || source,\n                        success: resolve,\n                        failure: reject,\n                        index: currentIndex++,\n                        options: source.options || {}\n                    });\n                }));\n            Promise.all(promises).then(success).catch(failure);\n        },\n        /**\n     * @param source\n     * @param index\n     * @param interactionMethod\n     */ ADD_ITEM: ({ source, index = -1, interactionMethod, success = ()=>{}, failure = ()=>{}, options = {} })=>{\n            // if no source supplied\n            if (isEmpty(source)) {\n                failure({\n                    error: createResponse(\"error\", 0, \"No source\"),\n                    file: null\n                });\n                return;\n            }\n            // filter out invalid file items, used to filter dropped directory contents\n            if (isFile(source) && state.options.ignoredFiles.includes(source.name.toLowerCase())) {\n                // fail silently\n                return;\n            }\n            // test if there's still room in the list of files\n            if (!hasRoomForItem(state)) {\n                // if multiple allowed, we can't replace\n                // or if only a single item is allowed but we're not allowed to replace it we exit\n                if (state.options.allowMultiple || !state.options.allowMultiple && !state.options.allowReplace) {\n                    const error = createResponse(\"warning\", 0, \"Max files\");\n                    dispatch(\"DID_THROW_MAX_FILES\", {\n                        source,\n                        error\n                    });\n                    failure({\n                        error,\n                        file: null\n                    });\n                    return;\n                }\n                // let's replace the item\n                // id of first item we're about to remove\n                const item = getActiveItems(state.items)[0];\n                // if has been processed remove it from the server as well\n                if (item.status === ItemStatus.PROCESSING_COMPLETE || item.status === ItemStatus.PROCESSING_REVERT_ERROR) {\n                    const forceRevert = query(\"GET_FORCE_REVERT\");\n                    item.revert(createRevertFunction(state.options.server.url, state.options.server.revert), forceRevert).then(()=>{\n                        if (!forceRevert) return;\n                        // try to add now\n                        dispatch(\"ADD_ITEM\", {\n                            source,\n                            index,\n                            interactionMethod,\n                            success,\n                            failure,\n                            options\n                        });\n                    }).catch(()=>{}); // no need to handle this catch state for now\n                    if (forceRevert) return;\n                }\n                // remove first item as it will be replaced by this item\n                dispatch(\"REMOVE_ITEM\", {\n                    query: item.id\n                });\n            }\n            // where did the file originate\n            const origin = options.type === \"local\" ? FileOrigin.LOCAL : options.type === \"limbo\" ? FileOrigin.LIMBO : FileOrigin.INPUT;\n            // create a new blank item\n            const item = createItem(// where did this file come from\n            origin, // an input file never has a server file reference\n            origin === FileOrigin.INPUT ? null : source, // file mock data, if defined\n            options.file);\n            // set initial meta data\n            Object.keys(options.metadata || {}).forEach((key)=>{\n                item.setMetadata(key, options.metadata[key]);\n            });\n            // created the item, let plugins add methods\n            applyFilters(\"DID_CREATE_ITEM\", item, {\n                query,\n                dispatch\n            });\n            // where to insert new items\n            const itemInsertLocation = query(\"GET_ITEM_INSERT_LOCATION\");\n            // adjust index if is not allowed to pick location\n            if (!state.options.itemInsertLocationFreedom) {\n                index = itemInsertLocation === \"before\" ? -1 : state.items.length;\n            }\n            // add item to list\n            insertItem(state.items, item, index);\n            // sort items in list\n            if (isFunction(itemInsertLocation) && source) {\n                sortItems(state, itemInsertLocation);\n            }\n            // get a quick reference to the item id\n            const id = item.id;\n            // observe item events\n            item.on(\"init\", ()=>{\n                dispatch(\"DID_INIT_ITEM\", {\n                    id\n                });\n            });\n            item.on(\"load-init\", ()=>{\n                dispatch(\"DID_START_ITEM_LOAD\", {\n                    id\n                });\n            });\n            item.on(\"load-meta\", ()=>{\n                dispatch(\"DID_UPDATE_ITEM_META\", {\n                    id\n                });\n            });\n            item.on(\"load-progress\", (progress)=>{\n                dispatch(\"DID_UPDATE_ITEM_LOAD_PROGRESS\", {\n                    id,\n                    progress\n                });\n            });\n            item.on(\"load-request-error\", (error)=>{\n                const mainStatus = dynamicLabel(state.options.labelFileLoadError)(error);\n                // is client error, no way to recover\n                if (error.code >= 400 && error.code < 500) {\n                    dispatch(\"DID_THROW_ITEM_INVALID\", {\n                        id,\n                        error,\n                        status: {\n                            main: mainStatus,\n                            sub: `${error.code} (${error.body})`\n                        }\n                    });\n                    // reject the file so can be dealt with through API\n                    failure({\n                        error,\n                        file: createItemAPI(item)\n                    });\n                    return;\n                }\n                // is possible server error, so might be possible to retry\n                dispatch(\"DID_THROW_ITEM_LOAD_ERROR\", {\n                    id,\n                    error,\n                    status: {\n                        main: mainStatus,\n                        sub: state.options.labelTapToRetry\n                    }\n                });\n            });\n            item.on(\"load-file-error\", (error)=>{\n                dispatch(\"DID_THROW_ITEM_INVALID\", {\n                    id,\n                    error: error.status,\n                    status: error.status\n                });\n                failure({\n                    error: error.status,\n                    file: createItemAPI(item)\n                });\n            });\n            item.on(\"load-abort\", ()=>{\n                dispatch(\"REMOVE_ITEM\", {\n                    query: id\n                });\n            });\n            item.on(\"load-skip\", ()=>{\n                item.on(\"metadata-update\", (change)=>{\n                    if (!isFile(item.file)) return;\n                    dispatch(\"DID_UPDATE_ITEM_METADATA\", {\n                        id,\n                        change\n                    });\n                });\n                dispatch(\"COMPLETE_LOAD_ITEM\", {\n                    query: id,\n                    item,\n                    data: {\n                        source,\n                        success\n                    }\n                });\n            });\n            item.on(\"load\", ()=>{\n                const handleAdd = (shouldAdd)=>{\n                    // no should not add this file\n                    if (!shouldAdd) {\n                        dispatch(\"REMOVE_ITEM\", {\n                            query: id\n                        });\n                        return;\n                    }\n                    // now interested in metadata updates\n                    item.on(\"metadata-update\", (change)=>{\n                        dispatch(\"DID_UPDATE_ITEM_METADATA\", {\n                            id,\n                            change\n                        });\n                    });\n                    // let plugins decide if the output data should be prepared at this point\n                    // means we'll do this and wait for idle state\n                    applyFilterChain(\"SHOULD_PREPARE_OUTPUT\", false, {\n                        item,\n                        query\n                    }).then((shouldPrepareOutput)=>{\n                        // plugins determined the output data should be prepared (or not), can be adjusted with beforePrepareOutput hook\n                        const beforePrepareFile = query(\"GET_BEFORE_PREPARE_FILE\");\n                        if (beforePrepareFile) shouldPrepareOutput = beforePrepareFile(item, shouldPrepareOutput);\n                        const loadComplete = ()=>{\n                            dispatch(\"COMPLETE_LOAD_ITEM\", {\n                                query: id,\n                                item,\n                                data: {\n                                    source,\n                                    success\n                                }\n                            });\n                            listUpdated(dispatch, state);\n                        };\n                        // exit\n                        if (shouldPrepareOutput) {\n                            // wait for idle state and then run PREPARE_OUTPUT\n                            dispatch(\"REQUEST_PREPARE_OUTPUT\", {\n                                query: id,\n                                item,\n                                success: (file)=>{\n                                    dispatch(\"DID_PREPARE_OUTPUT\", {\n                                        id,\n                                        file\n                                    });\n                                    loadComplete();\n                                }\n                            }, true);\n                            return;\n                        }\n                        loadComplete();\n                    });\n                };\n                // item loaded, allow plugins to\n                // - read data (quickly)\n                // - add metadata\n                applyFilterChain(\"DID_LOAD_ITEM\", item, {\n                    query,\n                    dispatch\n                }).then(()=>{\n                    optionalPromise(query(\"GET_BEFORE_ADD_FILE\"), createItemAPI(item)).then(handleAdd);\n                }).catch((e)=>{\n                    if (!e || !e.error || !e.status) return handleAdd(false);\n                    dispatch(\"DID_THROW_ITEM_INVALID\", {\n                        id,\n                        error: e.error,\n                        status: e.status\n                    });\n                });\n            });\n            item.on(\"process-start\", ()=>{\n                dispatch(\"DID_START_ITEM_PROCESSING\", {\n                    id\n                });\n            });\n            item.on(\"process-progress\", (progress)=>{\n                dispatch(\"DID_UPDATE_ITEM_PROCESS_PROGRESS\", {\n                    id,\n                    progress\n                });\n            });\n            item.on(\"process-error\", (error)=>{\n                dispatch(\"DID_THROW_ITEM_PROCESSING_ERROR\", {\n                    id,\n                    error,\n                    status: {\n                        main: dynamicLabel(state.options.labelFileProcessingError)(error),\n                        sub: state.options.labelTapToRetry\n                    }\n                });\n            });\n            item.on(\"process-revert-error\", (error)=>{\n                dispatch(\"DID_THROW_ITEM_PROCESSING_REVERT_ERROR\", {\n                    id,\n                    error,\n                    status: {\n                        main: dynamicLabel(state.options.labelFileProcessingRevertError)(error),\n                        sub: state.options.labelTapToRetry\n                    }\n                });\n            });\n            item.on(\"process-complete\", (serverFileReference)=>{\n                dispatch(\"DID_COMPLETE_ITEM_PROCESSING\", {\n                    id,\n                    error: null,\n                    serverFileReference\n                });\n                dispatch(\"DID_DEFINE_VALUE\", {\n                    id,\n                    value: serverFileReference\n                });\n            });\n            item.on(\"process-abort\", ()=>{\n                dispatch(\"DID_ABORT_ITEM_PROCESSING\", {\n                    id\n                });\n            });\n            item.on(\"process-revert\", ()=>{\n                dispatch(\"DID_REVERT_ITEM_PROCESSING\", {\n                    id\n                });\n                dispatch(\"DID_DEFINE_VALUE\", {\n                    id,\n                    value: null\n                });\n            });\n            // let view know the item has been inserted\n            dispatch(\"DID_ADD_ITEM\", {\n                id,\n                index,\n                interactionMethod\n            });\n            listUpdated(dispatch, state);\n            // start loading the source\n            const { url, load, restore, fetch } = state.options.server || {};\n            item.load(source, // this creates a function that loads the file based on the type of file (string, base64, blob, file) and location of file (local, remote, limbo)\n            createFileLoader(origin === FileOrigin.INPUT ? isString(source) && isExternalURL(source) ? fetch ? createFetchFunction(url, fetch) : fetchBlob // remote url\n             : fetchBlob // try to fetch url\n             : origin === FileOrigin.LIMBO ? createFetchFunction(url, restore) // limbo\n             : createFetchFunction(url, load) // local\n            ), // called when the file is loaded so it can be piped through the filters\n            (file, success, error)=>{\n                // let's process the file\n                applyFilterChain(\"LOAD_FILE\", file, {\n                    query\n                }).then(success).catch(error);\n            });\n        },\n        REQUEST_PREPARE_OUTPUT: ({ item, success, failure = ()=>{} })=>{\n            // error response if item archived\n            const err = {\n                error: createResponse(\"error\", 0, \"Item not found\"),\n                file: null\n            };\n            // don't handle archived items, an item could have been archived (load aborted) while waiting to be prepared\n            if (item.archived) return failure(err);\n            // allow plugins to alter the file data\n            applyFilterChain(\"PREPARE_OUTPUT\", item.file, {\n                query,\n                item\n            }).then((result)=>{\n                applyFilterChain(\"COMPLETE_PREPARE_OUTPUT\", result, {\n                    query,\n                    item\n                }).then((result)=>{\n                    // don't handle archived items, an item could have been archived (load aborted) while being prepared\n                    if (item.archived) return failure(err);\n                    // we done!\n                    success(result);\n                });\n            });\n        },\n        COMPLETE_LOAD_ITEM: ({ item, data })=>{\n            const { success, source } = data;\n            // sort items in list\n            const itemInsertLocation = query(\"GET_ITEM_INSERT_LOCATION\");\n            if (isFunction(itemInsertLocation) && source) {\n                sortItems(state, itemInsertLocation);\n            }\n            // let interface know the item has loaded\n            dispatch(\"DID_LOAD_ITEM\", {\n                id: item.id,\n                error: null,\n                serverFileReference: item.origin === FileOrigin.INPUT ? null : source\n            });\n            // item has been successfully loaded and added to the\n            // list of items so can now be safely returned for use\n            success(createItemAPI(item));\n            // if this is a local server file we need to show a different state\n            if (item.origin === FileOrigin.LOCAL) {\n                dispatch(\"DID_LOAD_LOCAL_ITEM\", {\n                    id: item.id\n                });\n                return;\n            }\n            // if is a temp server file we prevent async upload call here (as the file is already on the server)\n            if (item.origin === FileOrigin.LIMBO) {\n                dispatch(\"DID_COMPLETE_ITEM_PROCESSING\", {\n                    id: item.id,\n                    error: null,\n                    serverFileReference: source\n                });\n                dispatch(\"DID_DEFINE_VALUE\", {\n                    id: item.id,\n                    value: item.serverId || source\n                });\n                return;\n            }\n            // id we are allowed to upload the file immediately, lets do it\n            if (query(\"IS_ASYNC\") && state.options.instantUpload) {\n                dispatch(\"REQUEST_ITEM_PROCESSING\", {\n                    query: item.id\n                });\n            }\n        },\n        RETRY_ITEM_LOAD: getItemByQueryFromState(state, (item)=>{\n            // try loading the source one more time\n            item.retryLoad();\n        }),\n        REQUEST_ITEM_PREPARE: getItemByQueryFromState(state, (item, success, failure)=>{\n            dispatch(\"REQUEST_PREPARE_OUTPUT\", {\n                query: item.id,\n                item,\n                success: (file)=>{\n                    dispatch(\"DID_PREPARE_OUTPUT\", {\n                        id: item.id,\n                        file\n                    });\n                    success({\n                        file: item,\n                        output: file\n                    });\n                },\n                failure\n            }, true);\n        }),\n        REQUEST_ITEM_PROCESSING: getItemByQueryFromState(state, (item, success, failure)=>{\n            // cannot be queued (or is already queued)\n            const itemCanBeQueuedForProcessing = // waiting for something\n            item.status === ItemStatus.IDLE || // processing went wrong earlier\n            item.status === ItemStatus.PROCESSING_ERROR;\n            // not ready to be processed\n            if (!itemCanBeQueuedForProcessing) {\n                const processNow = ()=>dispatch(\"REQUEST_ITEM_PROCESSING\", {\n                        query: item,\n                        success,\n                        failure\n                    });\n                const process = ()=>document.hidden ? processNow() : setTimeout(processNow, 32);\n                // if already done processing or tried to revert but didn't work, try again\n                if (item.status === ItemStatus.PROCESSING_COMPLETE || item.status === ItemStatus.PROCESSING_REVERT_ERROR) {\n                    item.revert(createRevertFunction(state.options.server.url, state.options.server.revert), query(\"GET_FORCE_REVERT\")).then(process).catch(()=>{}); // don't continue with processing if something went wrong\n                } else if (item.status === ItemStatus.PROCESSING) {\n                    item.abortProcessing().then(process);\n                }\n                return;\n            }\n            // already queued for processing\n            if (item.status === ItemStatus.PROCESSING_QUEUED) return;\n            item.requestProcessing();\n            dispatch(\"DID_REQUEST_ITEM_PROCESSING\", {\n                id: item.id\n            });\n            dispatch(\"PROCESS_ITEM\", {\n                query: item,\n                success,\n                failure\n            }, true);\n        }),\n        PROCESS_ITEM: getItemByQueryFromState(state, (item, success, failure)=>{\n            const maxParallelUploads = query(\"GET_MAX_PARALLEL_UPLOADS\");\n            const totalCurrentUploads = query(\"GET_ITEMS_BY_STATUS\", ItemStatus.PROCESSING).length;\n            // queue and wait till queue is freed up\n            if (totalCurrentUploads === maxParallelUploads) {\n                // queue for later processing\n                state.processingQueue.push({\n                    id: item.id,\n                    success,\n                    failure\n                });\n                // stop it!\n                return;\n            }\n            // if was not queued or is already processing exit here\n            if (item.status === ItemStatus.PROCESSING) return;\n            const processNext = ()=>{\n                // process queueud items\n                const queueEntry = state.processingQueue.shift();\n                // no items left\n                if (!queueEntry) return;\n                // get item reference\n                const { id, success, failure } = queueEntry;\n                const itemReference = getItemByQuery(state.items, id);\n                // if item was archived while in queue, jump to next\n                if (!itemReference || itemReference.archived) {\n                    processNext();\n                    return;\n                }\n                // process queued item\n                dispatch(\"PROCESS_ITEM\", {\n                    query: id,\n                    success,\n                    failure\n                }, true);\n            };\n            // we done function\n            item.onOnce(\"process-complete\", ()=>{\n                success(createItemAPI(item));\n                processNext();\n                // if origin is local, and we're instant uploading, trigger remove of original\n                // as revert will remove file from list\n                const server = state.options.server;\n                const instantUpload = state.options.instantUpload;\n                if (instantUpload && item.origin === FileOrigin.LOCAL && isFunction(server.remove)) {\n                    const noop = ()=>{};\n                    item.origin = FileOrigin.LIMBO;\n                    state.options.server.remove(item.source, noop, noop);\n                }\n                // All items processed? No errors?\n                const allItemsProcessed = query(\"GET_ITEMS_BY_STATUS\", ItemStatus.PROCESSING_COMPLETE).length === state.items.length;\n                if (allItemsProcessed) {\n                    dispatch(\"DID_COMPLETE_ITEM_PROCESSING_ALL\");\n                }\n            });\n            // we error function\n            item.onOnce(\"process-error\", (error)=>{\n                failure({\n                    error,\n                    file: createItemAPI(item)\n                });\n                processNext();\n            });\n            // start file processing\n            const options = state.options;\n            item.process(createFileProcessor(createProcessorFunction(options.server.url, options.server.process, options.name, {\n                chunkTransferId: item.transferId,\n                chunkServer: options.server.patch,\n                chunkUploads: options.chunkUploads,\n                chunkForce: options.chunkForce,\n                chunkSize: options.chunkSize,\n                chunkRetryDelays: options.chunkRetryDelays\n            }), {\n                allowMinimumUploadDuration: query(\"GET_ALLOW_MINIMUM_UPLOAD_DURATION\")\n            }), // called when the file is about to be processed so it can be piped through the transform filters\n            (file, success, error)=>{\n                // allow plugins to alter the file data\n                applyFilterChain(\"PREPARE_OUTPUT\", file, {\n                    query,\n                    item\n                }).then((file)=>{\n                    dispatch(\"DID_PREPARE_OUTPUT\", {\n                        id: item.id,\n                        file\n                    });\n                    success(file);\n                }).catch(error);\n            });\n        }),\n        RETRY_ITEM_PROCESSING: getItemByQueryFromState(state, (item)=>{\n            dispatch(\"REQUEST_ITEM_PROCESSING\", {\n                query: item\n            });\n        }),\n        REQUEST_REMOVE_ITEM: getItemByQueryFromState(state, (item)=>{\n            optionalPromise(query(\"GET_BEFORE_REMOVE_FILE\"), createItemAPI(item)).then((shouldRemove)=>{\n                if (!shouldRemove) {\n                    return;\n                }\n                dispatch(\"REMOVE_ITEM\", {\n                    query: item\n                });\n            });\n        }),\n        RELEASE_ITEM: getItemByQueryFromState(state, (item)=>{\n            item.release();\n        }),\n        REMOVE_ITEM: getItemByQueryFromState(state, (item, success, failure, options)=>{\n            const removeFromView = ()=>{\n                // get id reference\n                const id = item.id;\n                // archive the item, this does not remove it from the list\n                getItemById(state.items, id).archive();\n                // tell the view the item has been removed\n                dispatch(\"DID_REMOVE_ITEM\", {\n                    error: null,\n                    id,\n                    item\n                });\n                // now the list has been modified\n                listUpdated(dispatch, state);\n                // correctly removed\n                success(createItemAPI(item));\n            };\n            // if this is a local file and the `server.remove` function has been configured,\n            // send source there so dev can remove file from server\n            const server = state.options.server;\n            if (item.origin === FileOrigin.LOCAL && server && isFunction(server.remove) && options.remove !== false) {\n                dispatch(\"DID_START_ITEM_REMOVE\", {\n                    id: item.id\n                });\n                server.remove(item.source, ()=>removeFromView(), (status)=>{\n                    dispatch(\"DID_THROW_ITEM_REMOVE_ERROR\", {\n                        id: item.id,\n                        error: createResponse(\"error\", 0, status, null),\n                        status: {\n                            main: dynamicLabel(state.options.labelFileRemoveError)(status),\n                            sub: state.options.labelTapToRetry\n                        }\n                    });\n                });\n            } else {\n                // if is requesting revert and can revert need to call revert handler (not calling request_ because that would also trigger beforeRemoveHook)\n                if (options.revert && item.origin !== FileOrigin.LOCAL && item.serverId !== null || // if chunked uploads are enabled and we're uploading in chunks for this specific file\n                // or if the file isn't big enough for chunked uploads but chunkForce is set then call\n                // revert before removing from the view...\n                state.options.chunkUploads && item.file.size > state.options.chunkSize || state.options.chunkUploads && state.options.chunkForce) {\n                    item.revert(createRevertFunction(state.options.server.url, state.options.server.revert), query(\"GET_FORCE_REVERT\"));\n                }\n                // can now safely remove from view\n                removeFromView();\n            }\n        }),\n        ABORT_ITEM_LOAD: getItemByQueryFromState(state, (item)=>{\n            item.abortLoad();\n        }),\n        ABORT_ITEM_PROCESSING: getItemByQueryFromState(state, (item)=>{\n            // test if is already processed\n            if (item.serverId) {\n                dispatch(\"REVERT_ITEM_PROCESSING\", {\n                    id: item.id\n                });\n                return;\n            }\n            // abort\n            item.abortProcessing().then(()=>{\n                const shouldRemove = state.options.instantUpload;\n                if (shouldRemove) {\n                    dispatch(\"REMOVE_ITEM\", {\n                        query: item.id\n                    });\n                }\n            });\n        }),\n        REQUEST_REVERT_ITEM_PROCESSING: getItemByQueryFromState(state, (item)=>{\n            // not instant uploading, revert immediately\n            if (!state.options.instantUpload) {\n                dispatch(\"REVERT_ITEM_PROCESSING\", {\n                    query: item\n                });\n                return;\n            }\n            // if we're instant uploading the file will also be removed if we revert,\n            // so if a before remove file hook is defined we need to run it now\n            const handleRevert = (shouldRevert)=>{\n                if (!shouldRevert) return;\n                dispatch(\"REVERT_ITEM_PROCESSING\", {\n                    query: item\n                });\n            };\n            const fn = query(\"GET_BEFORE_REMOVE_FILE\");\n            if (!fn) {\n                return handleRevert(true);\n            }\n            const requestRemoveResult = fn(createItemAPI(item));\n            if (requestRemoveResult == null) {\n                // undefined or null\n                return handleRevert(true);\n            }\n            if (typeof requestRemoveResult === \"boolean\") {\n                return handleRevert(requestRemoveResult);\n            }\n            if (typeof requestRemoveResult.then === \"function\") {\n                requestRemoveResult.then(handleRevert);\n            }\n        }),\n        REVERT_ITEM_PROCESSING: getItemByQueryFromState(state, (item)=>{\n            item.revert(createRevertFunction(state.options.server.url, state.options.server.revert), query(\"GET_FORCE_REVERT\")).then(()=>{\n                const shouldRemove = state.options.instantUpload || isMockItem(item);\n                if (shouldRemove) {\n                    dispatch(\"REMOVE_ITEM\", {\n                        query: item.id\n                    });\n                }\n            }).catch(()=>{});\n        }),\n        SET_OPTIONS: ({ options })=>{\n            // get all keys passed\n            const optionKeys = Object.keys(options);\n            // get prioritized keyed to include (remove once not in options object)\n            const prioritizedOptionKeys = PrioritizedOptions.filter((key)=>optionKeys.includes(key));\n            // order the keys, prioritized first, then rest\n            const orderedOptionKeys = [\n                // add prioritized first if passed to options, else remove\n                ...prioritizedOptionKeys,\n                // prevent duplicate keys\n                ...Object.keys(options).filter((key)=>!prioritizedOptionKeys.includes(key))\n            ];\n            // dispatch set event for each option\n            orderedOptionKeys.forEach((key)=>{\n                dispatch(`SET_${fromCamels(key, \"_\").toUpperCase()}`, {\n                    value: options[key]\n                });\n            });\n        }\n    });\nconst PrioritizedOptions = [\n    \"server\"\n];\nconst formatFilename = (name)=>name;\nconst createElement$1 = (tagName)=>{\n    return document.createElement(tagName);\n};\nconst text = (node, value)=>{\n    let textNode = node.childNodes[0];\n    if (!textNode) {\n        textNode = document.createTextNode(value);\n        node.appendChild(textNode);\n    } else if (value !== textNode.nodeValue) {\n        textNode.nodeValue = value;\n    }\n};\nconst polarToCartesian = (centerX, centerY, radius, angleInDegrees)=>{\n    const angleInRadians = (angleInDegrees % 360 - 90) * Math.PI / 180.0;\n    return {\n        x: centerX + radius * Math.cos(angleInRadians),\n        y: centerY + radius * Math.sin(angleInRadians)\n    };\n};\nconst describeArc = (x, y, radius, startAngle, endAngle, arcSweep)=>{\n    const start = polarToCartesian(x, y, radius, endAngle);\n    const end = polarToCartesian(x, y, radius, startAngle);\n    return [\n        \"M\",\n        start.x,\n        start.y,\n        \"A\",\n        radius,\n        radius,\n        0,\n        arcSweep,\n        0,\n        end.x,\n        end.y\n    ].join(\" \");\n};\nconst percentageArc = (x, y, radius, from, to)=>{\n    let arcSweep = 1;\n    if (to > from && to - from <= 0.5) {\n        arcSweep = 0;\n    }\n    if (from > to && from - to >= 0.5) {\n        arcSweep = 0;\n    }\n    return describeArc(x, y, radius, Math.min(0.9999, from) * 360, Math.min(0.9999, to) * 360, arcSweep);\n};\nconst create = ({ root, props })=>{\n    // start at 0\n    props.spin = false;\n    props.progress = 0;\n    props.opacity = 0;\n    // svg\n    const svg = createElement(\"svg\");\n    root.ref.path = createElement(\"path\", {\n        \"stroke-width\": 2,\n        \"stroke-linecap\": \"round\"\n    });\n    svg.appendChild(root.ref.path);\n    root.ref.svg = svg;\n    root.appendChild(svg);\n};\nconst write = ({ root, props })=>{\n    if (props.opacity === 0) {\n        return;\n    }\n    if (props.align) {\n        root.element.dataset.align = props.align;\n    }\n    // get width of stroke\n    const ringStrokeWidth = parseInt(attr(root.ref.path, \"stroke-width\"), 10);\n    // calculate size of ring\n    const size = root.rect.element.width * 0.5;\n    // ring state\n    let ringFrom = 0;\n    let ringTo = 0;\n    // now in busy mode\n    if (props.spin) {\n        ringFrom = 0;\n        ringTo = 0.5;\n    } else {\n        ringFrom = 0;\n        ringTo = props.progress;\n    }\n    // get arc path\n    const coordinates = percentageArc(size, size, size - ringStrokeWidth, ringFrom, ringTo);\n    // update progress bar\n    attr(root.ref.path, \"d\", coordinates);\n    // hide while contains 0 value\n    attr(root.ref.path, \"stroke-opacity\", props.spin || props.progress > 0 ? 1 : 0);\n};\nconst progressIndicator = createView({\n    tag: \"div\",\n    name: \"progress-indicator\",\n    ignoreRectUpdate: true,\n    ignoreRect: true,\n    create,\n    write,\n    mixins: {\n        apis: [\n            \"progress\",\n            \"spin\",\n            \"align\"\n        ],\n        styles: [\n            \"opacity\"\n        ],\n        animations: {\n            opacity: {\n                type: \"tween\",\n                duration: 500\n            },\n            progress: {\n                type: \"spring\",\n                stiffness: 0.95,\n                damping: 0.65,\n                mass: 10\n            }\n        }\n    }\n});\nconst create$1 = ({ root, props })=>{\n    root.element.innerHTML = (props.icon || \"\") + `<span>${props.label}</span>`;\n    props.isDisabled = false;\n};\nconst write$1 = ({ root, props })=>{\n    const { isDisabled } = props;\n    const shouldDisable = root.query(\"GET_DISABLED\") || props.opacity === 0;\n    if (shouldDisable && !isDisabled) {\n        props.isDisabled = true;\n        attr(root.element, \"disabled\", \"disabled\");\n    } else if (!shouldDisable && isDisabled) {\n        props.isDisabled = false;\n        root.element.removeAttribute(\"disabled\");\n    }\n};\nconst fileActionButton = createView({\n    tag: \"button\",\n    attributes: {\n        type: \"button\"\n    },\n    ignoreRect: true,\n    ignoreRectUpdate: true,\n    name: \"file-action-button\",\n    mixins: {\n        apis: [\n            \"label\"\n        ],\n        styles: [\n            \"translateX\",\n            \"translateY\",\n            \"scaleX\",\n            \"scaleY\",\n            \"opacity\"\n        ],\n        animations: {\n            scaleX: \"spring\",\n            scaleY: \"spring\",\n            translateX: \"spring\",\n            translateY: \"spring\",\n            opacity: {\n                type: \"tween\",\n                duration: 250\n            }\n        },\n        listeners: true\n    },\n    create: create$1,\n    write: write$1\n});\nconst toNaturalFileSize = (bytes, decimalSeparator = \".\", base = 1000, options = {})=>{\n    const { labelBytes = \"bytes\", labelKilobytes = \"KB\", labelMegabytes = \"MB\", labelGigabytes = \"GB\" } = options;\n    // no negative byte sizes\n    bytes = Math.round(Math.abs(bytes));\n    const KB = base;\n    const MB = base * base;\n    const GB = base * base * base;\n    // just bytes\n    if (bytes < KB) {\n        return `${bytes} ${labelBytes}`;\n    }\n    // kilobytes\n    if (bytes < MB) {\n        return `${Math.floor(bytes / KB)} ${labelKilobytes}`;\n    }\n    // megabytes\n    if (bytes < GB) {\n        return `${removeDecimalsWhenZero(bytes / MB, 1, decimalSeparator)} ${labelMegabytes}`;\n    }\n    // gigabytes\n    return `${removeDecimalsWhenZero(bytes / GB, 2, decimalSeparator)} ${labelGigabytes}`;\n};\nconst removeDecimalsWhenZero = (value, decimalCount, separator)=>{\n    return value.toFixed(decimalCount).split(\".\").filter((part)=>part !== \"0\").join(separator);\n};\nconst create$2 = ({ root, props })=>{\n    // filename\n    const fileName = createElement$1(\"span\");\n    fileName.className = \"filepond--file-info-main\";\n    // hide for screenreaders\n    // the file is contained in a fieldset with legend that contains the filename\n    // no need to read it twice\n    attr(fileName, \"aria-hidden\", \"true\");\n    root.appendChild(fileName);\n    root.ref.fileName = fileName;\n    // filesize\n    const fileSize = createElement$1(\"span\");\n    fileSize.className = \"filepond--file-info-sub\";\n    root.appendChild(fileSize);\n    root.ref.fileSize = fileSize;\n    // set initial values\n    text(fileSize, root.query(\"GET_LABEL_FILE_WAITING_FOR_SIZE\"));\n    text(fileName, formatFilename(root.query(\"GET_ITEM_NAME\", props.id)));\n};\nconst updateFile = ({ root, props })=>{\n    text(root.ref.fileSize, toNaturalFileSize(root.query(\"GET_ITEM_SIZE\", props.id), \".\", root.query(\"GET_FILE_SIZE_BASE\"), root.query(\"GET_FILE_SIZE_LABELS\", root.query)));\n    text(root.ref.fileName, formatFilename(root.query(\"GET_ITEM_NAME\", props.id)));\n};\nconst updateFileSizeOnError = ({ root, props })=>{\n    // if size is available don't fallback to unknown size message\n    if (isInt(root.query(\"GET_ITEM_SIZE\", props.id))) {\n        updateFile({\n            root,\n            props\n        });\n        return;\n    }\n    text(root.ref.fileSize, root.query(\"GET_LABEL_FILE_SIZE_NOT_AVAILABLE\"));\n};\nconst fileInfo = createView({\n    name: \"file-info\",\n    ignoreRect: true,\n    ignoreRectUpdate: true,\n    write: createRoute({\n        DID_LOAD_ITEM: updateFile,\n        DID_UPDATE_ITEM_META: updateFile,\n        DID_THROW_ITEM_LOAD_ERROR: updateFileSizeOnError,\n        DID_THROW_ITEM_INVALID: updateFileSizeOnError\n    }),\n    didCreateView: (root)=>{\n        applyFilters(\"CREATE_VIEW\", {\n            ...root,\n            view: root\n        });\n    },\n    create: create$2,\n    mixins: {\n        styles: [\n            \"translateX\",\n            \"translateY\"\n        ],\n        animations: {\n            translateX: \"spring\",\n            translateY: \"spring\"\n        }\n    }\n});\nconst toPercentage = (value)=>Math.round(value * 100);\nconst create$3 = ({ root })=>{\n    // main status\n    const main = createElement$1(\"span\");\n    main.className = \"filepond--file-status-main\";\n    root.appendChild(main);\n    root.ref.main = main;\n    // sub status\n    const sub = createElement$1(\"span\");\n    sub.className = \"filepond--file-status-sub\";\n    root.appendChild(sub);\n    root.ref.sub = sub;\n    didSetItemLoadProgress({\n        root,\n        action: {\n            progress: null\n        }\n    });\n};\nconst didSetItemLoadProgress = ({ root, action })=>{\n    const title = action.progress === null ? root.query(\"GET_LABEL_FILE_LOADING\") : `${root.query(\"GET_LABEL_FILE_LOADING\")} ${toPercentage(action.progress)}%`;\n    text(root.ref.main, title);\n    text(root.ref.sub, root.query(\"GET_LABEL_TAP_TO_CANCEL\"));\n};\nconst didSetItemProcessProgress = ({ root, action })=>{\n    const title = action.progress === null ? root.query(\"GET_LABEL_FILE_PROCESSING\") : `${root.query(\"GET_LABEL_FILE_PROCESSING\")} ${toPercentage(action.progress)}%`;\n    text(root.ref.main, title);\n    text(root.ref.sub, root.query(\"GET_LABEL_TAP_TO_CANCEL\"));\n};\nconst didRequestItemProcessing = ({ root })=>{\n    text(root.ref.main, root.query(\"GET_LABEL_FILE_PROCESSING\"));\n    text(root.ref.sub, root.query(\"GET_LABEL_TAP_TO_CANCEL\"));\n};\nconst didAbortItemProcessing = ({ root })=>{\n    text(root.ref.main, root.query(\"GET_LABEL_FILE_PROCESSING_ABORTED\"));\n    text(root.ref.sub, root.query(\"GET_LABEL_TAP_TO_RETRY\"));\n};\nconst didCompleteItemProcessing = ({ root })=>{\n    text(root.ref.main, root.query(\"GET_LABEL_FILE_PROCESSING_COMPLETE\"));\n    text(root.ref.sub, root.query(\"GET_LABEL_TAP_TO_UNDO\"));\n};\nconst clear = ({ root })=>{\n    text(root.ref.main, \"\");\n    text(root.ref.sub, \"\");\n};\nconst error = ({ root, action })=>{\n    text(root.ref.main, action.status.main);\n    text(root.ref.sub, action.status.sub);\n};\nconst fileStatus = createView({\n    name: \"file-status\",\n    ignoreRect: true,\n    ignoreRectUpdate: true,\n    write: createRoute({\n        DID_LOAD_ITEM: clear,\n        DID_REVERT_ITEM_PROCESSING: clear,\n        DID_REQUEST_ITEM_PROCESSING: didRequestItemProcessing,\n        DID_ABORT_ITEM_PROCESSING: didAbortItemProcessing,\n        DID_COMPLETE_ITEM_PROCESSING: didCompleteItemProcessing,\n        DID_UPDATE_ITEM_PROCESS_PROGRESS: didSetItemProcessProgress,\n        DID_UPDATE_ITEM_LOAD_PROGRESS: didSetItemLoadProgress,\n        DID_THROW_ITEM_LOAD_ERROR: error,\n        DID_THROW_ITEM_INVALID: error,\n        DID_THROW_ITEM_PROCESSING_ERROR: error,\n        DID_THROW_ITEM_PROCESSING_REVERT_ERROR: error,\n        DID_THROW_ITEM_REMOVE_ERROR: error\n    }),\n    didCreateView: (root)=>{\n        applyFilters(\"CREATE_VIEW\", {\n            ...root,\n            view: root\n        });\n    },\n    create: create$3,\n    mixins: {\n        styles: [\n            \"translateX\",\n            \"translateY\",\n            \"opacity\"\n        ],\n        animations: {\n            opacity: {\n                type: \"tween\",\n                duration: 250\n            },\n            translateX: \"spring\",\n            translateY: \"spring\"\n        }\n    }\n});\n/**\n * Button definitions for the file view\n */ const Buttons = {\n    AbortItemLoad: {\n        label: \"GET_LABEL_BUTTON_ABORT_ITEM_LOAD\",\n        action: \"ABORT_ITEM_LOAD\",\n        className: \"filepond--action-abort-item-load\",\n        align: \"LOAD_INDICATOR_POSITION\"\n    },\n    RetryItemLoad: {\n        label: \"GET_LABEL_BUTTON_RETRY_ITEM_LOAD\",\n        action: \"RETRY_ITEM_LOAD\",\n        icon: \"GET_ICON_RETRY\",\n        className: \"filepond--action-retry-item-load\",\n        align: \"BUTTON_PROCESS_ITEM_POSITION\"\n    },\n    RemoveItem: {\n        label: \"GET_LABEL_BUTTON_REMOVE_ITEM\",\n        action: \"REQUEST_REMOVE_ITEM\",\n        icon: \"GET_ICON_REMOVE\",\n        className: \"filepond--action-remove-item\",\n        align: \"BUTTON_REMOVE_ITEM_POSITION\"\n    },\n    ProcessItem: {\n        label: \"GET_LABEL_BUTTON_PROCESS_ITEM\",\n        action: \"REQUEST_ITEM_PROCESSING\",\n        icon: \"GET_ICON_PROCESS\",\n        className: \"filepond--action-process-item\",\n        align: \"BUTTON_PROCESS_ITEM_POSITION\"\n    },\n    AbortItemProcessing: {\n        label: \"GET_LABEL_BUTTON_ABORT_ITEM_PROCESSING\",\n        action: \"ABORT_ITEM_PROCESSING\",\n        className: \"filepond--action-abort-item-processing\",\n        align: \"BUTTON_PROCESS_ITEM_POSITION\"\n    },\n    RetryItemProcessing: {\n        label: \"GET_LABEL_BUTTON_RETRY_ITEM_PROCESSING\",\n        action: \"RETRY_ITEM_PROCESSING\",\n        icon: \"GET_ICON_RETRY\",\n        className: \"filepond--action-retry-item-processing\",\n        align: \"BUTTON_PROCESS_ITEM_POSITION\"\n    },\n    RevertItemProcessing: {\n        label: \"GET_LABEL_BUTTON_UNDO_ITEM_PROCESSING\",\n        action: \"REQUEST_REVERT_ITEM_PROCESSING\",\n        icon: \"GET_ICON_UNDO\",\n        className: \"filepond--action-revert-item-processing\",\n        align: \"BUTTON_PROCESS_ITEM_POSITION\"\n    }\n};\n// make a list of buttons, we can then remove buttons from this list if they're disabled\nconst ButtonKeys = [];\nforin(Buttons, (key)=>{\n    ButtonKeys.push(key);\n});\nconst calculateFileInfoOffset = (root)=>{\n    if (getRemoveIndicatorAligment(root) === \"right\") return 0;\n    const buttonRect = root.ref.buttonRemoveItem.rect.element;\n    return buttonRect.hidden ? null : buttonRect.width + buttonRect.left;\n};\nconst calculateButtonWidth = (root)=>{\n    const buttonRect = root.ref.buttonAbortItemLoad.rect.element;\n    return buttonRect.width;\n};\n// Force on full pixels so text stays crips\nconst calculateFileVerticalCenterOffset = (root)=>Math.floor(root.ref.buttonRemoveItem.rect.element.height / 4);\nconst calculateFileHorizontalCenterOffset = (root)=>Math.floor(root.ref.buttonRemoveItem.rect.element.left / 2);\nconst getLoadIndicatorAlignment = (root)=>root.query(\"GET_STYLE_LOAD_INDICATOR_POSITION\");\nconst getProcessIndicatorAlignment = (root)=>root.query(\"GET_STYLE_PROGRESS_INDICATOR_POSITION\");\nconst getRemoveIndicatorAligment = (root)=>root.query(\"GET_STYLE_BUTTON_REMOVE_ITEM_POSITION\");\nconst DefaultStyle = {\n    buttonAbortItemLoad: {\n        opacity: 0\n    },\n    buttonRetryItemLoad: {\n        opacity: 0\n    },\n    buttonRemoveItem: {\n        opacity: 0\n    },\n    buttonProcessItem: {\n        opacity: 0\n    },\n    buttonAbortItemProcessing: {\n        opacity: 0\n    },\n    buttonRetryItemProcessing: {\n        opacity: 0\n    },\n    buttonRevertItemProcessing: {\n        opacity: 0\n    },\n    loadProgressIndicator: {\n        opacity: 0,\n        align: getLoadIndicatorAlignment\n    },\n    processProgressIndicator: {\n        opacity: 0,\n        align: getProcessIndicatorAlignment\n    },\n    processingCompleteIndicator: {\n        opacity: 0,\n        scaleX: 0.75,\n        scaleY: 0.75\n    },\n    info: {\n        translateX: 0,\n        translateY: 0,\n        opacity: 0\n    },\n    status: {\n        translateX: 0,\n        translateY: 0,\n        opacity: 0\n    }\n};\nconst IdleStyle = {\n    buttonRemoveItem: {\n        opacity: 1\n    },\n    buttonProcessItem: {\n        opacity: 1\n    },\n    info: {\n        translateX: calculateFileInfoOffset\n    },\n    status: {\n        translateX: calculateFileInfoOffset\n    }\n};\nconst ProcessingStyle = {\n    buttonAbortItemProcessing: {\n        opacity: 1\n    },\n    processProgressIndicator: {\n        opacity: 1\n    },\n    status: {\n        opacity: 1\n    }\n};\nconst StyleMap = {\n    DID_THROW_ITEM_INVALID: {\n        buttonRemoveItem: {\n            opacity: 1\n        },\n        info: {\n            translateX: calculateFileInfoOffset\n        },\n        status: {\n            translateX: calculateFileInfoOffset,\n            opacity: 1\n        }\n    },\n    DID_START_ITEM_LOAD: {\n        buttonAbortItemLoad: {\n            opacity: 1\n        },\n        loadProgressIndicator: {\n            opacity: 1\n        },\n        status: {\n            opacity: 1\n        }\n    },\n    DID_THROW_ITEM_LOAD_ERROR: {\n        buttonRetryItemLoad: {\n            opacity: 1\n        },\n        buttonRemoveItem: {\n            opacity: 1\n        },\n        info: {\n            translateX: calculateFileInfoOffset\n        },\n        status: {\n            opacity: 1\n        }\n    },\n    DID_START_ITEM_REMOVE: {\n        processProgressIndicator: {\n            opacity: 1,\n            align: getRemoveIndicatorAligment\n        },\n        info: {\n            translateX: calculateFileInfoOffset\n        },\n        status: {\n            opacity: 0\n        }\n    },\n    DID_THROW_ITEM_REMOVE_ERROR: {\n        processProgressIndicator: {\n            opacity: 0,\n            align: getRemoveIndicatorAligment\n        },\n        buttonRemoveItem: {\n            opacity: 1\n        },\n        info: {\n            translateX: calculateFileInfoOffset\n        },\n        status: {\n            opacity: 1,\n            translateX: calculateFileInfoOffset\n        }\n    },\n    DID_LOAD_ITEM: IdleStyle,\n    DID_LOAD_LOCAL_ITEM: {\n        buttonRemoveItem: {\n            opacity: 1\n        },\n        info: {\n            translateX: calculateFileInfoOffset\n        },\n        status: {\n            translateX: calculateFileInfoOffset\n        }\n    },\n    DID_START_ITEM_PROCESSING: ProcessingStyle,\n    DID_REQUEST_ITEM_PROCESSING: ProcessingStyle,\n    DID_UPDATE_ITEM_PROCESS_PROGRESS: ProcessingStyle,\n    DID_COMPLETE_ITEM_PROCESSING: {\n        buttonRevertItemProcessing: {\n            opacity: 1\n        },\n        info: {\n            opacity: 1\n        },\n        status: {\n            opacity: 1\n        }\n    },\n    DID_THROW_ITEM_PROCESSING_ERROR: {\n        buttonRemoveItem: {\n            opacity: 1\n        },\n        buttonRetryItemProcessing: {\n            opacity: 1\n        },\n        status: {\n            opacity: 1\n        },\n        info: {\n            translateX: calculateFileInfoOffset\n        }\n    },\n    DID_THROW_ITEM_PROCESSING_REVERT_ERROR: {\n        buttonRevertItemProcessing: {\n            opacity: 1\n        },\n        status: {\n            opacity: 1\n        },\n        info: {\n            opacity: 1\n        }\n    },\n    DID_ABORT_ITEM_PROCESSING: {\n        buttonRemoveItem: {\n            opacity: 1\n        },\n        buttonProcessItem: {\n            opacity: 1\n        },\n        info: {\n            translateX: calculateFileInfoOffset\n        },\n        status: {\n            opacity: 1\n        }\n    },\n    DID_REVERT_ITEM_PROCESSING: IdleStyle\n};\n// complete indicator view\nconst processingCompleteIndicatorView = createView({\n    create: ({ root })=>{\n        root.element.innerHTML = root.query(\"GET_ICON_DONE\");\n    },\n    name: \"processing-complete-indicator\",\n    ignoreRect: true,\n    mixins: {\n        styles: [\n            \"scaleX\",\n            \"scaleY\",\n            \"opacity\"\n        ],\n        animations: {\n            scaleX: \"spring\",\n            scaleY: \"spring\",\n            opacity: {\n                type: \"tween\",\n                duration: 250\n            }\n        }\n    }\n});\n/**\n * Creates the file view\n */ const create$4 = ({ root, props })=>{\n    // copy Buttons object\n    const LocalButtons = Object.keys(Buttons).reduce((prev, curr)=>{\n        prev[curr] = {\n            ...Buttons[curr]\n        };\n        return prev;\n    }, {});\n    const { id } = props;\n    // allow reverting upload\n    const allowRevert = root.query(\"GET_ALLOW_REVERT\");\n    // allow remove file\n    const allowRemove = root.query(\"GET_ALLOW_REMOVE\");\n    // allow processing upload\n    const allowProcess = root.query(\"GET_ALLOW_PROCESS\");\n    // is instant uploading, need this to determine the icon of the undo button\n    const instantUpload = root.query(\"GET_INSTANT_UPLOAD\");\n    // is async set up\n    const isAsync = root.query(\"IS_ASYNC\");\n    // should align remove item buttons\n    const alignRemoveItemButton = root.query(\"GET_STYLE_BUTTON_REMOVE_ITEM_ALIGN\");\n    // enabled buttons array\n    let buttonFilter;\n    if (isAsync) {\n        if (allowProcess && !allowRevert) {\n            // only remove revert button\n            buttonFilter = (key)=>!/RevertItemProcessing/.test(key);\n        } else if (!allowProcess && allowRevert) {\n            // only remove process button\n            buttonFilter = (key)=>!/ProcessItem|RetryItemProcessing|AbortItemProcessing/.test(key);\n        } else if (!allowProcess && !allowRevert) {\n            // remove all process buttons\n            buttonFilter = (key)=>!/Process/.test(key);\n        }\n    } else {\n        // no process controls available\n        buttonFilter = (key)=>!/Process/.test(key);\n    }\n    const enabledButtons = buttonFilter ? ButtonKeys.filter(buttonFilter) : ButtonKeys.concat();\n    // update icon and label for revert button when instant uploading\n    if (instantUpload && allowRevert) {\n        LocalButtons[\"RevertItemProcessing\"].label = \"GET_LABEL_BUTTON_REMOVE_ITEM\";\n        LocalButtons[\"RevertItemProcessing\"].icon = \"GET_ICON_REMOVE\";\n    }\n    // remove last button (revert) if not allowed\n    if (isAsync && !allowRevert) {\n        const map = StyleMap[\"DID_COMPLETE_ITEM_PROCESSING\"];\n        map.info.translateX = calculateFileHorizontalCenterOffset;\n        map.info.translateY = calculateFileVerticalCenterOffset;\n        map.status.translateY = calculateFileVerticalCenterOffset;\n        map.processingCompleteIndicator = {\n            opacity: 1,\n            scaleX: 1,\n            scaleY: 1\n        };\n    }\n    // should align center\n    if (isAsync && !allowProcess) {\n        [\n            \"DID_START_ITEM_PROCESSING\",\n            \"DID_REQUEST_ITEM_PROCESSING\",\n            \"DID_UPDATE_ITEM_PROCESS_PROGRESS\",\n            \"DID_THROW_ITEM_PROCESSING_ERROR\"\n        ].forEach((key)=>{\n            StyleMap[key].status.translateY = calculateFileVerticalCenterOffset;\n        });\n        StyleMap[\"DID_THROW_ITEM_PROCESSING_ERROR\"].status.translateX = calculateButtonWidth;\n    }\n    // move remove button to right\n    if (alignRemoveItemButton && allowRevert) {\n        LocalButtons[\"RevertItemProcessing\"].align = \"BUTTON_REMOVE_ITEM_POSITION\";\n        const map = StyleMap[\"DID_COMPLETE_ITEM_PROCESSING\"];\n        map.info.translateX = calculateFileInfoOffset;\n        map.status.translateY = calculateFileVerticalCenterOffset;\n        map.processingCompleteIndicator = {\n            opacity: 1,\n            scaleX: 1,\n            scaleY: 1\n        };\n    }\n    // show/hide RemoveItem button\n    if (!allowRemove) {\n        LocalButtons[\"RemoveItem\"].disabled = true;\n    }\n    // create the button views\n    forin(LocalButtons, (key, definition)=>{\n        // create button\n        const buttonView = root.createChildView(fileActionButton, {\n            label: root.query(definition.label),\n            icon: root.query(definition.icon),\n            opacity: 0\n        });\n        // should be appended?\n        if (enabledButtons.includes(key)) {\n            root.appendChildView(buttonView);\n        }\n        // toggle\n        if (definition.disabled) {\n            buttonView.element.setAttribute(\"disabled\", \"disabled\");\n            buttonView.element.setAttribute(\"hidden\", \"hidden\");\n        }\n        // add position attribute\n        buttonView.element.dataset.align = root.query(`GET_STYLE_${definition.align}`);\n        // add class\n        buttonView.element.classList.add(definition.className);\n        // handle interactions\n        buttonView.on(\"click\", (e)=>{\n            e.stopPropagation();\n            if (definition.disabled) return;\n            root.dispatch(definition.action, {\n                query: id\n            });\n        });\n        // set reference\n        root.ref[`button${key}`] = buttonView;\n    });\n    // checkmark\n    root.ref.processingCompleteIndicator = root.appendChildView(root.createChildView(processingCompleteIndicatorView));\n    root.ref.processingCompleteIndicator.element.dataset.align = root.query(`GET_STYLE_BUTTON_PROCESS_ITEM_POSITION`);\n    // create file info view\n    root.ref.info = root.appendChildView(root.createChildView(fileInfo, {\n        id\n    }));\n    // create file status view\n    root.ref.status = root.appendChildView(root.createChildView(fileStatus, {\n        id\n    }));\n    // add progress indicators\n    const loadIndicatorView = root.appendChildView(root.createChildView(progressIndicator, {\n        opacity: 0,\n        align: root.query(`GET_STYLE_LOAD_INDICATOR_POSITION`)\n    }));\n    loadIndicatorView.element.classList.add(\"filepond--load-indicator\");\n    root.ref.loadProgressIndicator = loadIndicatorView;\n    const progressIndicatorView = root.appendChildView(root.createChildView(progressIndicator, {\n        opacity: 0,\n        align: root.query(`GET_STYLE_PROGRESS_INDICATOR_POSITION`)\n    }));\n    progressIndicatorView.element.classList.add(\"filepond--process-indicator\");\n    root.ref.processProgressIndicator = progressIndicatorView;\n    // current active styles\n    root.ref.activeStyles = [];\n};\nconst write$2 = ({ root, actions, props })=>{\n    // route actions\n    route({\n        root,\n        actions,\n        props\n    });\n    // select last state change action\n    let action = actions.concat().filter((action)=>/^DID_/.test(action.type)).reverse().find((action)=>StyleMap[action.type]);\n    // a new action happened, let's get the matching styles\n    if (action) {\n        // define new active styles\n        root.ref.activeStyles = [];\n        const stylesToApply = StyleMap[action.type];\n        forin(DefaultStyle, (name, defaultStyles)=>{\n            // get reference to control\n            const control = root.ref[name];\n            // loop over all styles for this control\n            forin(defaultStyles, (key, defaultValue)=>{\n                const value = stylesToApply[name] && typeof stylesToApply[name][key] !== \"undefined\" ? stylesToApply[name][key] : defaultValue;\n                root.ref.activeStyles.push({\n                    control,\n                    key,\n                    value\n                });\n            });\n        });\n    }\n    // apply active styles to element\n    root.ref.activeStyles.forEach(({ control, key, value })=>{\n        control[key] = typeof value === \"function\" ? value(root) : value;\n    });\n};\nconst route = createRoute({\n    DID_SET_LABEL_BUTTON_ABORT_ITEM_PROCESSING: ({ root, action })=>{\n        root.ref.buttonAbortItemProcessing.label = action.value;\n    },\n    DID_SET_LABEL_BUTTON_ABORT_ITEM_LOAD: ({ root, action })=>{\n        root.ref.buttonAbortItemLoad.label = action.value;\n    },\n    DID_SET_LABEL_BUTTON_ABORT_ITEM_REMOVAL: ({ root, action })=>{\n        root.ref.buttonAbortItemRemoval.label = action.value;\n    },\n    DID_REQUEST_ITEM_PROCESSING: ({ root })=>{\n        root.ref.processProgressIndicator.spin = true;\n        root.ref.processProgressIndicator.progress = 0;\n    },\n    DID_START_ITEM_LOAD: ({ root })=>{\n        root.ref.loadProgressIndicator.spin = true;\n        root.ref.loadProgressIndicator.progress = 0;\n    },\n    DID_START_ITEM_REMOVE: ({ root })=>{\n        root.ref.processProgressIndicator.spin = true;\n        root.ref.processProgressIndicator.progress = 0;\n    },\n    DID_UPDATE_ITEM_LOAD_PROGRESS: ({ root, action })=>{\n        root.ref.loadProgressIndicator.spin = false;\n        root.ref.loadProgressIndicator.progress = action.progress;\n    },\n    DID_UPDATE_ITEM_PROCESS_PROGRESS: ({ root, action })=>{\n        root.ref.processProgressIndicator.spin = false;\n        root.ref.processProgressIndicator.progress = action.progress;\n    }\n});\nconst file = createView({\n    create: create$4,\n    write: write$2,\n    didCreateView: (root)=>{\n        applyFilters(\"CREATE_VIEW\", {\n            ...root,\n            view: root\n        });\n    },\n    name: \"file\"\n});\n/**\n * Creates the file view\n */ const create$5 = ({ root, props })=>{\n    // filename\n    root.ref.fileName = createElement$1(\"legend\");\n    root.appendChild(root.ref.fileName);\n    // file appended\n    root.ref.file = root.appendChildView(root.createChildView(file, {\n        id: props.id\n    }));\n    // data has moved to data.js\n    root.ref.data = false;\n};\n/**\n * Data storage\n */ const didLoadItem = ({ root, props })=>{\n    // updates the legend of the fieldset so screenreaders can better group buttons\n    text(root.ref.fileName, formatFilename(root.query(\"GET_ITEM_NAME\", props.id)));\n};\nconst fileWrapper = createView({\n    create: create$5,\n    ignoreRect: true,\n    write: createRoute({\n        DID_LOAD_ITEM: didLoadItem\n    }),\n    didCreateView: (root)=>{\n        applyFilters(\"CREATE_VIEW\", {\n            ...root,\n            view: root\n        });\n    },\n    tag: \"fieldset\",\n    name: \"file-wrapper\"\n});\nconst PANEL_SPRING_PROPS = {\n    type: \"spring\",\n    damping: 0.6,\n    mass: 7\n};\nconst create$6 = ({ root, props })=>{\n    [\n        {\n            name: \"top\"\n        },\n        {\n            name: \"center\",\n            props: {\n                translateY: null,\n                scaleY: null\n            },\n            mixins: {\n                animations: {\n                    scaleY: PANEL_SPRING_PROPS\n                },\n                styles: [\n                    \"translateY\",\n                    \"scaleY\"\n                ]\n            }\n        },\n        {\n            name: \"bottom\",\n            props: {\n                translateY: null\n            },\n            mixins: {\n                animations: {\n                    translateY: PANEL_SPRING_PROPS\n                },\n                styles: [\n                    \"translateY\"\n                ]\n            }\n        }\n    ].forEach((section)=>{\n        createSection(root, section, props.name);\n    });\n    root.element.classList.add(`filepond--${props.name}`);\n    root.ref.scalable = null;\n};\nconst createSection = (root, section, className)=>{\n    const viewConstructor = createView({\n        name: `panel-${section.name} filepond--${className}`,\n        mixins: section.mixins,\n        ignoreRectUpdate: true\n    });\n    const view = root.createChildView(viewConstructor, section.props);\n    root.ref[section.name] = root.appendChildView(view);\n};\nconst write$3 = ({ root, props })=>{\n    // update scalable state\n    if (root.ref.scalable === null || props.scalable !== root.ref.scalable) {\n        root.ref.scalable = isBoolean(props.scalable) ? props.scalable : true;\n        root.element.dataset.scalable = root.ref.scalable;\n    }\n    // no height, can't set\n    if (!props.height) return;\n    // get child rects\n    const topRect = root.ref.top.rect.element;\n    const bottomRect = root.ref.bottom.rect.element;\n    // make sure height never is smaller than bottom and top seciton heights combined (will probably never happen, but who knows)\n    const height = Math.max(topRect.height + bottomRect.height, props.height);\n    // offset center part\n    root.ref.center.translateY = topRect.height;\n    // scale center part\n    // use math ceil to prevent transparent lines because of rounding errors\n    root.ref.center.scaleY = (height - topRect.height - bottomRect.height) / 100;\n    // offset bottom part\n    root.ref.bottom.translateY = height - bottomRect.height;\n};\nconst panel = createView({\n    name: \"panel\",\n    read: ({ root, props })=>props.heightCurrent = root.ref.bottom.translateY,\n    write: write$3,\n    create: create$6,\n    ignoreRect: true,\n    mixins: {\n        apis: [\n            \"height\",\n            \"heightCurrent\",\n            \"scalable\"\n        ]\n    }\n});\nconst createDragHelper = (items)=>{\n    const itemIds = items.map((item)=>item.id);\n    let prevIndex = undefined;\n    return {\n        setIndex: (index)=>{\n            prevIndex = index;\n        },\n        getIndex: ()=>prevIndex,\n        getItemIndex: (item)=>itemIds.indexOf(item.id)\n    };\n};\nconst ITEM_TRANSLATE_SPRING = {\n    type: \"spring\",\n    stiffness: 0.75,\n    damping: 0.45,\n    mass: 10\n};\nconst ITEM_SCALE_SPRING = \"spring\";\nconst StateMap = {\n    DID_START_ITEM_LOAD: \"busy\",\n    DID_UPDATE_ITEM_LOAD_PROGRESS: \"loading\",\n    DID_THROW_ITEM_INVALID: \"load-invalid\",\n    DID_THROW_ITEM_LOAD_ERROR: \"load-error\",\n    DID_LOAD_ITEM: \"idle\",\n    DID_THROW_ITEM_REMOVE_ERROR: \"remove-error\",\n    DID_START_ITEM_REMOVE: \"busy\",\n    DID_START_ITEM_PROCESSING: \"busy processing\",\n    DID_REQUEST_ITEM_PROCESSING: \"busy processing\",\n    DID_UPDATE_ITEM_PROCESS_PROGRESS: \"processing\",\n    DID_COMPLETE_ITEM_PROCESSING: \"processing-complete\",\n    DID_THROW_ITEM_PROCESSING_ERROR: \"processing-error\",\n    DID_THROW_ITEM_PROCESSING_REVERT_ERROR: \"processing-revert-error\",\n    DID_ABORT_ITEM_PROCESSING: \"cancelled\",\n    DID_REVERT_ITEM_PROCESSING: \"idle\"\n};\n/**\n * Creates the file view\n */ const create$7 = ({ root, props })=>{\n    // select\n    root.ref.handleClick = (e)=>root.dispatch(\"DID_ACTIVATE_ITEM\", {\n            id: props.id\n        });\n    // set id\n    root.element.id = `filepond--item-${props.id}`;\n    root.element.addEventListener(\"click\", root.ref.handleClick);\n    // file view\n    root.ref.container = root.appendChildView(root.createChildView(fileWrapper, {\n        id: props.id\n    }));\n    // file panel\n    root.ref.panel = root.appendChildView(root.createChildView(panel, {\n        name: \"item-panel\"\n    }));\n    // default start height\n    root.ref.panel.height = null;\n    // by default not marked for removal\n    props.markedForRemoval = false;\n    // if not allowed to reorder file items, exit here\n    if (!root.query(\"GET_ALLOW_REORDER\")) return;\n    // set to idle so shows grab cursor\n    root.element.dataset.dragState = \"idle\";\n    const grab = (e)=>{\n        if (!e.isPrimary) return;\n        let removedActivateListener = false;\n        const origin = {\n            x: e.pageX,\n            y: e.pageY\n        };\n        props.dragOrigin = {\n            x: root.translateX,\n            y: root.translateY\n        };\n        props.dragCenter = {\n            x: e.offsetX,\n            y: e.offsetY\n        };\n        const dragState = createDragHelper(root.query(\"GET_ACTIVE_ITEMS\"));\n        root.dispatch(\"DID_GRAB_ITEM\", {\n            id: props.id,\n            dragState\n        });\n        const drag = (e)=>{\n            if (!e.isPrimary) return;\n            e.stopPropagation();\n            e.preventDefault();\n            props.dragOffset = {\n                x: e.pageX - origin.x,\n                y: e.pageY - origin.y\n            };\n            // if dragged stop listening to clicks, will re-add when done dragging\n            const dist = props.dragOffset.x * props.dragOffset.x + props.dragOffset.y * props.dragOffset.y;\n            if (dist > 16 && !removedActivateListener) {\n                removedActivateListener = true;\n                root.element.removeEventListener(\"click\", root.ref.handleClick);\n            }\n            root.dispatch(\"DID_DRAG_ITEM\", {\n                id: props.id,\n                dragState\n            });\n        };\n        const drop = (e)=>{\n            if (!e.isPrimary) return;\n            props.dragOffset = {\n                x: e.pageX - origin.x,\n                y: e.pageY - origin.y\n            };\n            reset();\n        };\n        const cancel = ()=>{\n            reset();\n        };\n        const reset = ()=>{\n            document.removeEventListener(\"pointercancel\", cancel);\n            document.removeEventListener(\"pointermove\", drag);\n            document.removeEventListener(\"pointerup\", drop);\n            root.dispatch(\"DID_DROP_ITEM\", {\n                id: props.id,\n                dragState\n            });\n            // start listening to clicks again\n            if (removedActivateListener) {\n                setTimeout(()=>root.element.addEventListener(\"click\", root.ref.handleClick), 0);\n            }\n        };\n        document.addEventListener(\"pointercancel\", cancel);\n        document.addEventListener(\"pointermove\", drag);\n        document.addEventListener(\"pointerup\", drop);\n    };\n    root.element.addEventListener(\"pointerdown\", grab);\n};\nconst route$1 = createRoute({\n    DID_UPDATE_PANEL_HEIGHT: ({ root, action })=>{\n        root.height = action.height;\n    }\n});\nconst write$4 = createRoute({\n    DID_GRAB_ITEM: ({ root, props })=>{\n        props.dragOrigin = {\n            x: root.translateX,\n            y: root.translateY\n        };\n    },\n    DID_DRAG_ITEM: ({ root })=>{\n        root.element.dataset.dragState = \"drag\";\n    },\n    DID_DROP_ITEM: ({ root, props })=>{\n        props.dragOffset = null;\n        props.dragOrigin = null;\n        root.element.dataset.dragState = \"drop\";\n    }\n}, ({ root, actions, props, shouldOptimize })=>{\n    if (root.element.dataset.dragState === \"drop\") {\n        if (root.scaleX <= 1) {\n            root.element.dataset.dragState = \"idle\";\n        }\n    }\n    // select last state change action\n    let action = actions.concat().filter((action)=>/^DID_/.test(action.type)).reverse().find((action)=>StateMap[action.type]);\n    // no need to set same state twice\n    if (action && action.type !== props.currentState) {\n        // set current state\n        props.currentState = action.type;\n        // set state\n        root.element.dataset.filepondItemState = StateMap[props.currentState] || \"\";\n    }\n    // route actions\n    const aspectRatio = root.query(\"GET_ITEM_PANEL_ASPECT_RATIO\") || root.query(\"GET_PANEL_ASPECT_RATIO\");\n    if (!aspectRatio) {\n        route$1({\n            root,\n            actions,\n            props\n        });\n        if (!root.height && root.ref.container.rect.element.height > 0) {\n            root.height = root.ref.container.rect.element.height;\n        }\n    } else if (!shouldOptimize) {\n        root.height = root.rect.element.width * aspectRatio;\n    }\n    // sync panel height with item height\n    if (shouldOptimize) {\n        root.ref.panel.height = null;\n    }\n    root.ref.panel.height = root.height;\n});\nconst item = createView({\n    create: create$7,\n    write: write$4,\n    destroy: ({ root, props })=>{\n        root.element.removeEventListener(\"click\", root.ref.handleClick);\n        root.dispatch(\"RELEASE_ITEM\", {\n            query: props.id\n        });\n    },\n    tag: \"li\",\n    name: \"item\",\n    mixins: {\n        apis: [\n            \"id\",\n            \"interactionMethod\",\n            \"markedForRemoval\",\n            \"spawnDate\",\n            \"dragCenter\",\n            \"dragOrigin\",\n            \"dragOffset\"\n        ],\n        styles: [\n            \"translateX\",\n            \"translateY\",\n            \"scaleX\",\n            \"scaleY\",\n            \"opacity\",\n            \"height\"\n        ],\n        animations: {\n            scaleX: ITEM_SCALE_SPRING,\n            scaleY: ITEM_SCALE_SPRING,\n            translateX: ITEM_TRANSLATE_SPRING,\n            translateY: ITEM_TRANSLATE_SPRING,\n            opacity: {\n                type: \"tween\",\n                duration: 150\n            }\n        }\n    }\n});\nvar getItemsPerRow = (horizontalSpace, itemWidth)=>{\n    // add one pixel leeway, when using percentages for item width total items can be 1.99 per row\n    return Math.max(1, Math.floor((horizontalSpace + 1) / itemWidth));\n};\nconst getItemIndexByPosition = (view, children, positionInView)=>{\n    if (!positionInView) return;\n    const horizontalSpace = view.rect.element.width;\n    // const children = view.childViews;\n    const l = children.length;\n    let last = null;\n    // -1, don't move items to accomodate (either add to top or bottom)\n    if (l === 0 || positionInView.top < children[0].rect.element.top) return -1;\n    // let's get the item width\n    const item = children[0];\n    const itemRect = item.rect.element;\n    const itemHorizontalMargin = itemRect.marginLeft + itemRect.marginRight;\n    const itemWidth = itemRect.width + itemHorizontalMargin;\n    const itemsPerRow = getItemsPerRow(horizontalSpace, itemWidth);\n    // stack\n    if (itemsPerRow === 1) {\n        for(let index = 0; index < l; index++){\n            const child = children[index];\n            const childMid = child.rect.outer.top + child.rect.element.height * 0.5;\n            if (positionInView.top < childMid) {\n                return index;\n            }\n        }\n        return l;\n    }\n    // grid\n    const itemVerticalMargin = itemRect.marginTop + itemRect.marginBottom;\n    const itemHeight = itemRect.height + itemVerticalMargin;\n    for(let index = 0; index < l; index++){\n        const indexX = index % itemsPerRow;\n        const indexY = Math.floor(index / itemsPerRow);\n        const offsetX = indexX * itemWidth;\n        const offsetY = indexY * itemHeight;\n        const itemTop = offsetY - itemRect.marginTop;\n        const itemRight = offsetX + itemWidth;\n        const itemBottom = offsetY + itemHeight + itemRect.marginBottom;\n        if (positionInView.top < itemBottom && positionInView.top > itemTop) {\n            if (positionInView.left < itemRight) {\n                return index;\n            } else if (index !== l - 1) {\n                last = index;\n            } else {\n                last = null;\n            }\n        }\n    }\n    if (last !== null) {\n        return last;\n    }\n    return l;\n};\nconst dropAreaDimensions = {\n    height: 0,\n    width: 0,\n    get getHeight () {\n        return this.height;\n    },\n    set setHeight (val){\n        if (this.height === 0 || val === 0) this.height = val;\n    },\n    get getWidth () {\n        return this.width;\n    },\n    set setWidth (val){\n        if (this.width === 0 || val === 0) this.width = val;\n    },\n    setDimensions: function(height, width) {\n        if (this.height === 0 || height === 0) this.height = height;\n        if (this.width === 0 || width === 0) this.width = width;\n    }\n};\nconst create$8 = ({ root })=>{\n    // need to set role to list as otherwise it won't be read as a list by VoiceOver\n    attr(root.element, \"role\", \"list\");\n    root.ref.lastItemSpanwDate = Date.now();\n};\n/**\n * Inserts a new item\n * @param root\n * @param action\n */ const addItemView = ({ root, action })=>{\n    const { id, index, interactionMethod } = action;\n    root.ref.addIndex = index;\n    const now = Date.now();\n    let spawnDate = now;\n    let opacity = 1;\n    if (interactionMethod !== InteractionMethod.NONE) {\n        opacity = 0;\n        const cooldown = root.query(\"GET_ITEM_INSERT_INTERVAL\");\n        const dist = now - root.ref.lastItemSpanwDate;\n        spawnDate = dist < cooldown ? now + (cooldown - dist) : now;\n    }\n    root.ref.lastItemSpanwDate = spawnDate;\n    root.appendChildView(root.createChildView(// view type\n    item, // props\n    {\n        spawnDate,\n        id,\n        opacity,\n        interactionMethod\n    }), index);\n};\nconst moveItem = (item, x, y, vx = 0, vy = 1)=>{\n    // set to null to remove animation while dragging\n    if (item.dragOffset) {\n        item.translateX = null;\n        item.translateY = null;\n        item.translateX = item.dragOrigin.x + item.dragOffset.x;\n        item.translateY = item.dragOrigin.y + item.dragOffset.y;\n        item.scaleX = 1.025;\n        item.scaleY = 1.025;\n    } else {\n        item.translateX = x;\n        item.translateY = y;\n        if (Date.now() > item.spawnDate) {\n            // reveal element\n            if (item.opacity === 0) {\n                introItemView(item, x, y, vx, vy);\n            }\n            // make sure is default scale every frame\n            item.scaleX = 1;\n            item.scaleY = 1;\n            item.opacity = 1;\n        }\n    }\n};\nconst introItemView = (item, x, y, vx, vy)=>{\n    if (item.interactionMethod === InteractionMethod.NONE) {\n        item.translateX = null;\n        item.translateX = x;\n        item.translateY = null;\n        item.translateY = y;\n    } else if (item.interactionMethod === InteractionMethod.DROP) {\n        item.translateX = null;\n        item.translateX = x - vx * 20;\n        item.translateY = null;\n        item.translateY = y - vy * 10;\n        item.scaleX = 0.8;\n        item.scaleY = 0.8;\n    } else if (item.interactionMethod === InteractionMethod.BROWSE) {\n        item.translateY = null;\n        item.translateY = y - 30;\n    } else if (item.interactionMethod === InteractionMethod.API) {\n        item.translateX = null;\n        item.translateX = x - 30;\n        item.translateY = null;\n    }\n};\n/**\n * Removes an existing item\n * @param root\n * @param action\n */ const removeItemView = ({ root, action })=>{\n    const { id } = action;\n    // get the view matching the given id\n    const view = root.childViews.find((child)=>child.id === id);\n    // if no view found, exit\n    if (!view) {\n        return;\n    }\n    // animate view out of view\n    view.scaleX = 0.9;\n    view.scaleY = 0.9;\n    view.opacity = 0;\n    // mark for removal\n    view.markedForRemoval = true;\n};\nconst getItemHeight = (child)=>child.rect.element.height + child.rect.element.marginBottom * 0.5 + child.rect.element.marginTop * 0.5;\nconst getItemWidth = (child)=>child.rect.element.width + child.rect.element.marginLeft * 0.5 + child.rect.element.marginRight * 0.5;\nconst dragItem = ({ root, action })=>{\n    const { id, dragState } = action;\n    // reference to item\n    const item = root.query(\"GET_ITEM\", {\n        id\n    });\n    // get the view matching the given id\n    const view = root.childViews.find((child)=>child.id === id);\n    const numItems = root.childViews.length;\n    const oldIndex = dragState.getItemIndex(item);\n    // if no view found, exit\n    if (!view) return;\n    const dragPosition = {\n        x: view.dragOrigin.x + view.dragOffset.x + view.dragCenter.x,\n        y: view.dragOrigin.y + view.dragOffset.y + view.dragCenter.y\n    };\n    // get drag area dimensions\n    const dragHeight = getItemHeight(view);\n    const dragWidth = getItemWidth(view);\n    // get rows and columns (There will always be at least one row and one column if a file is present)\n    let cols = Math.floor(root.rect.outer.width / dragWidth);\n    if (cols > numItems) cols = numItems;\n    // rows are used to find when we have left the preview area bounding box\n    const rows = Math.floor(numItems / cols + 1);\n    dropAreaDimensions.setHeight = dragHeight * rows;\n    dropAreaDimensions.setWidth = dragWidth * cols;\n    // get new index of dragged item\n    var location1 = {\n        y: Math.floor(dragPosition.y / dragHeight),\n        x: Math.floor(dragPosition.x / dragWidth),\n        getGridIndex: function getGridIndex() {\n            if (dragPosition.y > dropAreaDimensions.getHeight || dragPosition.y < 0 || dragPosition.x > dropAreaDimensions.getWidth || dragPosition.x < 0) return oldIndex;\n            return this.y * cols + this.x;\n        },\n        getColIndex: function getColIndex() {\n            const items = root.query(\"GET_ACTIVE_ITEMS\");\n            const visibleChildren = root.childViews.filter((child)=>child.rect.element.height);\n            const children = items.map((item)=>visibleChildren.find((childView)=>childView.id === item.id));\n            const currentIndex = children.findIndex((child)=>child === view);\n            const dragHeight = getItemHeight(view);\n            const l = children.length;\n            let idx = l;\n            let childHeight = 0;\n            let childBottom = 0;\n            let childTop = 0;\n            for(let i = 0; i < l; i++){\n                childHeight = getItemHeight(children[i]);\n                childTop = childBottom;\n                childBottom = childTop + childHeight;\n                if (dragPosition.y < childBottom) {\n                    if (currentIndex > i) {\n                        if (dragPosition.y < childTop + dragHeight) {\n                            idx = i;\n                            break;\n                        }\n                        continue;\n                    }\n                    idx = i;\n                    break;\n                }\n            }\n            return idx;\n        }\n    };\n    // get new index\n    const index = cols > 1 ? location1.getGridIndex() : location1.getColIndex();\n    root.dispatch(\"MOVE_ITEM\", {\n        query: view,\n        index\n    });\n    // if the index of the item changed, dispatch reorder action\n    const currentIndex = dragState.getIndex();\n    if (currentIndex === undefined || currentIndex !== index) {\n        dragState.setIndex(index);\n        if (currentIndex === undefined) return;\n        root.dispatch(\"DID_REORDER_ITEMS\", {\n            items: root.query(\"GET_ACTIVE_ITEMS\"),\n            origin: oldIndex,\n            target: index\n        });\n    }\n};\n/**\n * Setup action routes\n */ const route$2 = createRoute({\n    DID_ADD_ITEM: addItemView,\n    DID_REMOVE_ITEM: removeItemView,\n    DID_DRAG_ITEM: dragItem\n});\n/**\n * Write to view\n * @param root\n * @param actions\n * @param props\n */ const write$5 = ({ root, props, actions, shouldOptimize })=>{\n    // route actions\n    route$2({\n        root,\n        props,\n        actions\n    });\n    const { dragCoordinates } = props;\n    // available space on horizontal axis\n    const horizontalSpace = root.rect.element.width;\n    // only draw children that have dimensions\n    const visibleChildren = root.childViews.filter((child)=>child.rect.element.height);\n    // sort based on current active items\n    const children = root.query(\"GET_ACTIVE_ITEMS\").map((item)=>visibleChildren.find((child)=>child.id === item.id)).filter((item)=>item);\n    // get index\n    const dragIndex = dragCoordinates ? getItemIndexByPosition(root, children, dragCoordinates) : null;\n    // add index is used to reserve the dropped/added item index till the actual item is rendered\n    const addIndex = root.ref.addIndex || null;\n    // add index no longer needed till possibly next draw\n    root.ref.addIndex = null;\n    let dragIndexOffset = 0;\n    let removeIndexOffset = 0;\n    let addIndexOffset = 0;\n    if (children.length === 0) return;\n    const childRect = children[0].rect.element;\n    const itemVerticalMargin = childRect.marginTop + childRect.marginBottom;\n    const itemHorizontalMargin = childRect.marginLeft + childRect.marginRight;\n    const itemWidth = childRect.width + itemHorizontalMargin;\n    const itemHeight = childRect.height + itemVerticalMargin;\n    const itemsPerRow = getItemsPerRow(horizontalSpace, itemWidth);\n    // stack\n    if (itemsPerRow === 1) {\n        let offsetY = 0;\n        let dragOffset = 0;\n        children.forEach((child, index)=>{\n            if (dragIndex) {\n                let dist = index - dragIndex;\n                if (dist === -2) {\n                    dragOffset = -itemVerticalMargin * 0.25;\n                } else if (dist === -1) {\n                    dragOffset = -itemVerticalMargin * 0.75;\n                } else if (dist === 0) {\n                    dragOffset = itemVerticalMargin * 0.75;\n                } else if (dist === 1) {\n                    dragOffset = itemVerticalMargin * 0.25;\n                } else {\n                    dragOffset = 0;\n                }\n            }\n            if (shouldOptimize) {\n                child.translateX = null;\n                child.translateY = null;\n            }\n            if (!child.markedForRemoval) {\n                moveItem(child, 0, offsetY + dragOffset);\n            }\n            let itemHeight = child.rect.element.height + itemVerticalMargin;\n            let visualHeight = itemHeight * (child.markedForRemoval ? child.opacity : 1);\n            offsetY += visualHeight;\n        });\n    } else {\n        let prevX = 0;\n        let prevY = 0;\n        children.forEach((child, index)=>{\n            if (index === dragIndex) {\n                dragIndexOffset = 1;\n            }\n            if (index === addIndex) {\n                addIndexOffset += 1;\n            }\n            if (child.markedForRemoval && child.opacity < 0.5) {\n                removeIndexOffset -= 1;\n            }\n            const visualIndex = index + addIndexOffset + dragIndexOffset + removeIndexOffset;\n            const indexX = visualIndex % itemsPerRow;\n            const indexY = Math.floor(visualIndex / itemsPerRow);\n            const offsetX = indexX * itemWidth;\n            const offsetY = indexY * itemHeight;\n            const vectorX = Math.sign(offsetX - prevX);\n            const vectorY = Math.sign(offsetY - prevY);\n            prevX = offsetX;\n            prevY = offsetY;\n            if (child.markedForRemoval) return;\n            if (shouldOptimize) {\n                child.translateX = null;\n                child.translateY = null;\n            }\n            moveItem(child, offsetX, offsetY, vectorX, vectorY);\n        });\n    }\n};\n/**\n * Filters actions that are meant specifically for a certain child of the list\n * @param child\n * @param actions\n */ const filterSetItemActions = (child, actions)=>actions.filter((action)=>{\n        // if action has an id, filter out actions that don't have this child id\n        if (action.data && action.data.id) {\n            return child.id === action.data.id;\n        }\n        // allow all other actions\n        return true;\n    });\nconst list = createView({\n    create: create$8,\n    write: write$5,\n    tag: \"ul\",\n    name: \"list\",\n    didWriteView: ({ root })=>{\n        root.childViews.filter((view)=>view.markedForRemoval && view.opacity === 0 && view.resting).forEach((view)=>{\n            view._destroy();\n            root.removeChildView(view);\n        });\n    },\n    filterFrameActionsForChild: filterSetItemActions,\n    mixins: {\n        apis: [\n            \"dragCoordinates\"\n        ]\n    }\n});\nconst create$9 = ({ root, props })=>{\n    root.ref.list = root.appendChildView(root.createChildView(list));\n    props.dragCoordinates = null;\n    props.overflowing = false;\n};\nconst storeDragCoordinates = ({ root, props, action })=>{\n    if (!root.query(\"GET_ITEM_INSERT_LOCATION_FREEDOM\")) return;\n    props.dragCoordinates = {\n        left: action.position.scopeLeft - root.ref.list.rect.element.left,\n        top: action.position.scopeTop - (root.rect.outer.top + root.rect.element.marginTop + root.rect.element.scrollTop)\n    };\n};\nconst clearDragCoordinates = ({ props })=>{\n    props.dragCoordinates = null;\n};\nconst route$3 = createRoute({\n    DID_DRAG: storeDragCoordinates,\n    DID_END_DRAG: clearDragCoordinates\n});\nconst write$6 = ({ root, props, actions })=>{\n    // route actions\n    route$3({\n        root,\n        props,\n        actions\n    });\n    // current drag position\n    root.ref.list.dragCoordinates = props.dragCoordinates;\n    // if currently overflowing but no longer received overflow\n    if (props.overflowing && !props.overflow) {\n        props.overflowing = false;\n        // reset overflow state\n        root.element.dataset.state = \"\";\n        root.height = null;\n    }\n    // if is not overflowing currently but does receive overflow value\n    if (props.overflow) {\n        const newHeight = Math.round(props.overflow);\n        if (newHeight !== root.height) {\n            props.overflowing = true;\n            root.element.dataset.state = \"overflow\";\n            root.height = newHeight;\n        }\n    }\n};\nconst listScroller = createView({\n    create: create$9,\n    write: write$6,\n    name: \"list-scroller\",\n    mixins: {\n        apis: [\n            \"overflow\",\n            \"dragCoordinates\"\n        ],\n        styles: [\n            \"height\",\n            \"translateY\"\n        ],\n        animations: {\n            translateY: \"spring\"\n        }\n    }\n});\nconst attrToggle = (element, name, state, enabledValue = \"\")=>{\n    if (state) {\n        attr(element, name, enabledValue);\n    } else {\n        element.removeAttribute(name);\n    }\n};\nconst resetFileInput = (input)=>{\n    // no value, no need to reset\n    if (!input || input.value === \"\") {\n        return;\n    }\n    try {\n        // for modern browsers\n        input.value = \"\";\n    } catch (err) {}\n    // for IE10\n    if (input.value) {\n        // quickly append input to temp form and reset form\n        const form = createElement$1(\"form\");\n        const parentNode = input.parentNode;\n        const ref = input.nextSibling;\n        form.appendChild(input);\n        form.reset();\n        // re-inject input where it originally was\n        if (ref) {\n            parentNode.insertBefore(input, ref);\n        } else {\n            parentNode.appendChild(input);\n        }\n    }\n};\nconst create$a = ({ root, props })=>{\n    // set id so can be referenced from outside labels\n    root.element.id = `filepond--browser-${props.id}`;\n    // set name of element (is removed when a value is set)\n    attr(root.element, \"name\", root.query(\"GET_NAME\"));\n    // we have to link this element to the status element\n    attr(root.element, \"aria-controls\", `filepond--assistant-${props.id}`);\n    // set label, we use labelled by as otherwise the screenreader does not read the \"browse\" text in the label (as it has tabindex: 0)\n    attr(root.element, \"aria-labelledby\", `filepond--drop-label-${props.id}`);\n    // set configurable props\n    setAcceptedFileTypes({\n        root,\n        action: {\n            value: root.query(\"GET_ACCEPTED_FILE_TYPES\")\n        }\n    });\n    toggleAllowMultiple({\n        root,\n        action: {\n            value: root.query(\"GET_ALLOW_MULTIPLE\")\n        }\n    });\n    toggleDirectoryFilter({\n        root,\n        action: {\n            value: root.query(\"GET_ALLOW_DIRECTORIES_ONLY\")\n        }\n    });\n    toggleDisabled({\n        root\n    });\n    toggleRequired({\n        root,\n        action: {\n            value: root.query(\"GET_REQUIRED\")\n        }\n    });\n    setCaptureMethod({\n        root,\n        action: {\n            value: root.query(\"GET_CAPTURE_METHOD\")\n        }\n    });\n    // handle changes to the input field\n    root.ref.handleChange = (e)=>{\n        if (!root.element.value) {\n            return;\n        }\n        // extract files and move value of webkitRelativePath path to _relativePath\n        const files = Array.from(root.element.files).map((file)=>{\n            file._relativePath = file.webkitRelativePath;\n            return file;\n        });\n        // we add a little delay so the OS file select window can move out of the way before we add our file\n        setTimeout(()=>{\n            // load files\n            props.onload(files);\n            // reset input, it's just for exposing a method to drop files, should not retain any state\n            resetFileInput(root.element);\n        }, 250);\n    };\n    root.element.addEventListener(\"change\", root.ref.handleChange);\n};\nconst setAcceptedFileTypes = ({ root, action })=>{\n    if (!root.query(\"GET_ALLOW_SYNC_ACCEPT_ATTRIBUTE\")) return;\n    attrToggle(root.element, \"accept\", !!action.value, action.value ? action.value.join(\",\") : \"\");\n};\nconst toggleAllowMultiple = ({ root, action })=>{\n    attrToggle(root.element, \"multiple\", action.value);\n};\nconst toggleDirectoryFilter = ({ root, action })=>{\n    attrToggle(root.element, \"webkitdirectory\", action.value);\n};\nconst toggleDisabled = ({ root })=>{\n    const isDisabled = root.query(\"GET_DISABLED\");\n    const doesAllowBrowse = root.query(\"GET_ALLOW_BROWSE\");\n    const disableField = isDisabled || !doesAllowBrowse;\n    attrToggle(root.element, \"disabled\", disableField);\n};\nconst toggleRequired = ({ root, action })=>{\n    // want to remove required, always possible\n    if (!action.value) {\n        attrToggle(root.element, \"required\", false);\n    } else if (root.query(\"GET_TOTAL_ITEMS\") === 0) {\n        attrToggle(root.element, \"required\", true);\n    }\n};\nconst setCaptureMethod = ({ root, action })=>{\n    attrToggle(root.element, \"capture\", !!action.value, action.value === true ? \"\" : action.value);\n};\nconst updateRequiredStatus = ({ root })=>{\n    const { element } = root;\n    // always remove the required attribute when more than zero items\n    if (root.query(\"GET_TOTAL_ITEMS\") > 0) {\n        attrToggle(element, \"required\", false);\n        attrToggle(element, \"name\", false);\n        // still has items\n        const activeItems = root.query(\"GET_ACTIVE_ITEMS\");\n        let hasInvalidField = false;\n        for(let i = 0; i < activeItems.length; i++){\n            if (activeItems[i].status === ItemStatus.LOAD_ERROR) {\n                hasInvalidField = true;\n            }\n        }\n        // set validity status\n        root.element.setCustomValidity(hasInvalidField ? root.query(\"GET_LABEL_INVALID_FIELD\") : \"\");\n    } else {\n        // add name attribute\n        attrToggle(element, \"name\", true, root.query(\"GET_NAME\"));\n        // remove any validation messages\n        const shouldCheckValidity = root.query(\"GET_CHECK_VALIDITY\");\n        if (shouldCheckValidity) {\n            element.setCustomValidity(\"\");\n        }\n        // we only add required if the field has been deemed required\n        if (root.query(\"GET_REQUIRED\")) {\n            attrToggle(element, \"required\", true);\n        }\n    }\n};\nconst updateFieldValidityStatus = ({ root })=>{\n    const shouldCheckValidity = root.query(\"GET_CHECK_VALIDITY\");\n    if (!shouldCheckValidity) return;\n    root.element.setCustomValidity(root.query(\"GET_LABEL_INVALID_FIELD\"));\n};\nconst browser = createView({\n    tag: \"input\",\n    name: \"browser\",\n    ignoreRect: true,\n    ignoreRectUpdate: true,\n    attributes: {\n        type: \"file\"\n    },\n    create: create$a,\n    destroy: ({ root })=>{\n        root.element.removeEventListener(\"change\", root.ref.handleChange);\n    },\n    write: createRoute({\n        DID_LOAD_ITEM: updateRequiredStatus,\n        DID_REMOVE_ITEM: updateRequiredStatus,\n        DID_THROW_ITEM_INVALID: updateFieldValidityStatus,\n        DID_SET_DISABLED: toggleDisabled,\n        DID_SET_ALLOW_BROWSE: toggleDisabled,\n        DID_SET_ALLOW_DIRECTORIES_ONLY: toggleDirectoryFilter,\n        DID_SET_ALLOW_MULTIPLE: toggleAllowMultiple,\n        DID_SET_ACCEPTED_FILE_TYPES: setAcceptedFileTypes,\n        DID_SET_CAPTURE_METHOD: setCaptureMethod,\n        DID_SET_REQUIRED: toggleRequired\n    })\n});\nconst Key = {\n    ENTER: 13,\n    SPACE: 32\n};\nconst create$b = ({ root, props })=>{\n    // create the label and link it to the file browser\n    const label = createElement$1(\"label\");\n    attr(label, \"for\", `filepond--browser-${props.id}`);\n    // use for labeling file input (aria-labelledby on file input)\n    attr(label, \"id\", `filepond--drop-label-${props.id}`);\n    // handle keys\n    root.ref.handleKeyDown = (e)=>{\n        const isActivationKey = e.keyCode === Key.ENTER || e.keyCode === Key.SPACE;\n        if (!isActivationKey) return;\n        // stops from triggering the element a second time\n        e.preventDefault();\n        // click link (will then in turn activate file input)\n        root.ref.label.click();\n    };\n    root.ref.handleClick = (e)=>{\n        const isLabelClick = e.target === label || label.contains(e.target);\n        // don't want to click twice\n        if (isLabelClick) return;\n        // click link (will then in turn activate file input)\n        root.ref.label.click();\n    };\n    // attach events\n    label.addEventListener(\"keydown\", root.ref.handleKeyDown);\n    root.element.addEventListener(\"click\", root.ref.handleClick);\n    // update\n    updateLabelValue(label, props.caption);\n    // add!\n    root.appendChild(label);\n    root.ref.label = label;\n};\nconst updateLabelValue = (label, value)=>{\n    label.innerHTML = value;\n    const clickable = label.querySelector(\".filepond--label-action\");\n    if (clickable) {\n        attr(clickable, \"tabindex\", \"0\");\n    }\n    return value;\n};\nconst dropLabel = createView({\n    name: \"drop-label\",\n    ignoreRect: true,\n    create: create$b,\n    destroy: ({ root })=>{\n        root.ref.label.addEventListener(\"keydown\", root.ref.handleKeyDown);\n        root.element.removeEventListener(\"click\", root.ref.handleClick);\n    },\n    write: createRoute({\n        DID_SET_LABEL_IDLE: ({ root, action })=>{\n            updateLabelValue(root.ref.label, action.value);\n        }\n    }),\n    mixins: {\n        styles: [\n            \"opacity\",\n            \"translateX\",\n            \"translateY\"\n        ],\n        animations: {\n            opacity: {\n                type: \"tween\",\n                duration: 150\n            },\n            translateX: \"spring\",\n            translateY: \"spring\"\n        }\n    }\n});\nconst blob = createView({\n    name: \"drip-blob\",\n    ignoreRect: true,\n    mixins: {\n        styles: [\n            \"translateX\",\n            \"translateY\",\n            \"scaleX\",\n            \"scaleY\",\n            \"opacity\"\n        ],\n        animations: {\n            scaleX: \"spring\",\n            scaleY: \"spring\",\n            translateX: \"spring\",\n            translateY: \"spring\",\n            opacity: {\n                type: \"tween\",\n                duration: 250\n            }\n        }\n    }\n});\nconst addBlob = ({ root })=>{\n    const centerX = root.rect.element.width * 0.5;\n    const centerY = root.rect.element.height * 0.5;\n    root.ref.blob = root.appendChildView(root.createChildView(blob, {\n        opacity: 0,\n        scaleX: 2.5,\n        scaleY: 2.5,\n        translateX: centerX,\n        translateY: centerY\n    }));\n};\nconst moveBlob = ({ root, action })=>{\n    if (!root.ref.blob) {\n        addBlob({\n            root\n        });\n        return;\n    }\n    root.ref.blob.translateX = action.position.scopeLeft;\n    root.ref.blob.translateY = action.position.scopeTop;\n    root.ref.blob.scaleX = 1;\n    root.ref.blob.scaleY = 1;\n    root.ref.blob.opacity = 1;\n};\nconst hideBlob = ({ root })=>{\n    if (!root.ref.blob) {\n        return;\n    }\n    root.ref.blob.opacity = 0;\n};\nconst explodeBlob = ({ root })=>{\n    if (!root.ref.blob) {\n        return;\n    }\n    root.ref.blob.scaleX = 2.5;\n    root.ref.blob.scaleY = 2.5;\n    root.ref.blob.opacity = 0;\n};\nconst write$7 = ({ root, props, actions })=>{\n    route$4({\n        root,\n        props,\n        actions\n    });\n    const { blob } = root.ref;\n    if (actions.length === 0 && blob && blob.opacity === 0) {\n        root.removeChildView(blob);\n        root.ref.blob = null;\n    }\n};\nconst route$4 = createRoute({\n    DID_DRAG: moveBlob,\n    DID_DROP: explodeBlob,\n    DID_END_DRAG: hideBlob\n});\nconst drip = createView({\n    ignoreRect: true,\n    ignoreRectUpdate: true,\n    name: \"drip\",\n    write: write$7\n});\nconst setInputFiles = (element, files)=>{\n    try {\n        // Create a DataTransfer instance and add a newly created file\n        const dataTransfer = new DataTransfer();\n        files.forEach((file)=>{\n            if (file instanceof File) {\n                dataTransfer.items.add(file);\n            } else {\n                dataTransfer.items.add(new File([\n                    file\n                ], file.name, {\n                    type: file.type\n                }));\n            }\n        });\n        // Assign the DataTransfer files list to the file input\n        element.files = dataTransfer.files;\n    } catch (err) {\n        return false;\n    }\n    return true;\n};\nconst create$c = ({ root })=>{\n    root.ref.fields = {};\n    const legend = document.createElement(\"legend\");\n    legend.textContent = \"Files\";\n    root.element.appendChild(legend);\n};\nconst getField = (root, id)=>root.ref.fields[id];\nconst syncFieldPositionsWithItems = (root)=>{\n    root.query(\"GET_ACTIVE_ITEMS\").forEach((item)=>{\n        if (!root.ref.fields[item.id]) return;\n        root.element.appendChild(root.ref.fields[item.id]);\n    });\n};\nconst didReorderItems = ({ root })=>syncFieldPositionsWithItems(root);\nconst didAddItem = ({ root, action })=>{\n    const fileItem = root.query(\"GET_ITEM\", action.id);\n    const isLocalFile = fileItem.origin === FileOrigin.LOCAL;\n    const shouldUseFileInput = !isLocalFile && root.query(\"SHOULD_UPDATE_FILE_INPUT\");\n    const dataContainer = createElement$1(\"input\");\n    dataContainer.type = shouldUseFileInput ? \"file\" : \"hidden\";\n    dataContainer.name = root.query(\"GET_NAME\");\n    root.ref.fields[action.id] = dataContainer;\n    syncFieldPositionsWithItems(root);\n};\nconst didLoadItem$1 = ({ root, action })=>{\n    const field = getField(root, action.id);\n    if (!field) return;\n    // store server ref in hidden input\n    if (action.serverFileReference !== null) field.value = action.serverFileReference;\n    // store file item in file input\n    if (!root.query(\"SHOULD_UPDATE_FILE_INPUT\")) return;\n    const fileItem = root.query(\"GET_ITEM\", action.id);\n    setInputFiles(field, [\n        fileItem.file\n    ]);\n};\nconst didPrepareOutput = ({ root, action })=>{\n    // this timeout pushes the handler after 'load'\n    if (!root.query(\"SHOULD_UPDATE_FILE_INPUT\")) return;\n    setTimeout(()=>{\n        const field = getField(root, action.id);\n        if (!field) return;\n        setInputFiles(field, [\n            action.file\n        ]);\n    }, 0);\n};\nconst didSetDisabled = ({ root })=>{\n    root.element.disabled = root.query(\"GET_DISABLED\");\n};\nconst didRemoveItem = ({ root, action })=>{\n    const field = getField(root, action.id);\n    if (!field) return;\n    if (field.parentNode) field.parentNode.removeChild(field);\n    delete root.ref.fields[action.id];\n};\n// only runs for server files. will refuse to update the value if the field\n// is a file field\nconst didDefineValue = ({ root, action })=>{\n    const field = getField(root, action.id);\n    if (!field) return;\n    if (action.value === null) {\n        // clear field value\n        field.removeAttribute(\"value\");\n    } else {\n        // set field value\n        if (field.type != \"file\") {\n            field.value = action.value;\n        }\n    }\n    syncFieldPositionsWithItems(root);\n};\nconst write$8 = createRoute({\n    DID_SET_DISABLED: didSetDisabled,\n    DID_ADD_ITEM: didAddItem,\n    DID_LOAD_ITEM: didLoadItem$1,\n    DID_REMOVE_ITEM: didRemoveItem,\n    DID_DEFINE_VALUE: didDefineValue,\n    DID_PREPARE_OUTPUT: didPrepareOutput,\n    DID_REORDER_ITEMS: didReorderItems,\n    DID_SORT_ITEMS: didReorderItems\n});\nconst data = createView({\n    tag: \"fieldset\",\n    name: \"data\",\n    create: create$c,\n    write: write$8,\n    ignoreRect: true\n});\nconst getRootNode = (element)=>\"getRootNode\" in element ? element.getRootNode() : document;\nconst images = [\n    \"jpg\",\n    \"jpeg\",\n    \"png\",\n    \"gif\",\n    \"bmp\",\n    \"webp\",\n    \"svg\",\n    \"tiff\"\n];\nconst text$1 = [\n    \"css\",\n    \"csv\",\n    \"html\",\n    \"txt\"\n];\nconst map = {\n    zip: \"zip|compressed\",\n    epub: \"application/epub+zip\"\n};\nconst guesstimateMimeType = (extension = \"\")=>{\n    extension = extension.toLowerCase();\n    if (images.includes(extension)) {\n        return \"image/\" + (extension === \"jpg\" ? \"jpeg\" : extension === \"svg\" ? \"svg+xml\" : extension);\n    }\n    if (text$1.includes(extension)) {\n        return \"text/\" + extension;\n    }\n    return map[extension] || \"\";\n};\nconst requestDataTransferItems = (dataTransfer)=>new Promise((resolve, reject)=>{\n        // try to get links from transfer, if found we'll exit immediately (unless a file is in the dataTransfer as well, this is because Firefox could represent the file as a URL and a file object at the same time)\n        const links = getLinks(dataTransfer);\n        if (links.length && !hasFiles(dataTransfer)) {\n            return resolve(links);\n        }\n        // try to get files from the transfer\n        getFiles(dataTransfer).then(resolve);\n    });\n/**\n * Test if datatransfer has files\n */ const hasFiles = (dataTransfer)=>{\n    if (dataTransfer.files) return dataTransfer.files.length > 0;\n    return false;\n};\n/**\n * Extracts files from a DataTransfer object\n */ const getFiles = (dataTransfer)=>new Promise((resolve, reject)=>{\n        // get the transfer items as promises\n        const promisedFiles = (dataTransfer.items ? Array.from(dataTransfer.items) : [])// only keep file system items (files and directories)\n        .filter((item)=>isFileSystemItem(item))// map each item to promise\n        .map((item)=>getFilesFromItem(item));\n        // if is empty, see if we can extract some info from the files property as a fallback\n        if (!promisedFiles.length) {\n            // TODO: test for directories (should not be allowed)\n            // Use FileReader, problem is that the files property gets lost in the process\n            resolve(dataTransfer.files ? Array.from(dataTransfer.files) : []);\n            return;\n        }\n        // done!\n        Promise.all(promisedFiles).then((returnedFileGroups)=>{\n            // flatten groups\n            const files = [];\n            returnedFileGroups.forEach((group)=>{\n                files.push.apply(files, group);\n            });\n            // done (filter out empty files)!\n            resolve(files.filter((file)=>file).map((file)=>{\n                if (!file._relativePath) file._relativePath = file.webkitRelativePath;\n                return file;\n            }));\n        }).catch(console.error);\n    });\nconst isFileSystemItem = (item)=>{\n    if (isEntry(item)) {\n        const entry = getAsEntry(item);\n        if (entry) {\n            return entry.isFile || entry.isDirectory;\n        }\n    }\n    return item.kind === \"file\";\n};\nconst getFilesFromItem = (item)=>new Promise((resolve, reject)=>{\n        if (isDirectoryEntry(item)) {\n            getFilesInDirectory(getAsEntry(item)).then(resolve).catch(reject);\n            return;\n        }\n        resolve([\n            item.getAsFile()\n        ]);\n    });\nconst getFilesInDirectory = (entry)=>new Promise((resolve, reject)=>{\n        const files = [];\n        // the total entries to read\n        let dirCounter = 0;\n        let fileCounter = 0;\n        const resolveIfDone = ()=>{\n            if (fileCounter === 0 && dirCounter === 0) {\n                resolve(files);\n            }\n        };\n        // the recursive function\n        const readEntries = (dirEntry)=>{\n            dirCounter++;\n            const directoryReader = dirEntry.createReader();\n            // directories are returned in batches, we need to process all batches before we're done\n            const readBatch = ()=>{\n                directoryReader.readEntries((entries)=>{\n                    if (entries.length === 0) {\n                        dirCounter--;\n                        resolveIfDone();\n                        return;\n                    }\n                    entries.forEach((entry)=>{\n                        // recursively read more directories\n                        if (entry.isDirectory) {\n                            readEntries(entry);\n                        } else {\n                            // read as file\n                            fileCounter++;\n                            entry.file((file)=>{\n                                const correctedFile = correctMissingFileType(file);\n                                if (entry.fullPath) correctedFile._relativePath = entry.fullPath;\n                                files.push(correctedFile);\n                                fileCounter--;\n                                resolveIfDone();\n                            });\n                        }\n                    });\n                    // try to get next batch of files\n                    readBatch();\n                }, reject);\n            };\n            // read first batch of files\n            readBatch();\n        };\n        // go!\n        readEntries(entry);\n    });\nconst correctMissingFileType = (file)=>{\n    if (file.type.length) return file;\n    const date = file.lastModifiedDate;\n    const name = file.name;\n    const type = guesstimateMimeType(getExtensionFromFilename(file.name));\n    if (!type.length) return file;\n    file = file.slice(0, file.size, type);\n    file.name = name;\n    file.lastModifiedDate = date;\n    return file;\n};\nconst isDirectoryEntry = (item)=>isEntry(item) && (getAsEntry(item) || {}).isDirectory;\nconst isEntry = (item)=>\"webkitGetAsEntry\" in item;\nconst getAsEntry = (item)=>item.webkitGetAsEntry();\n/**\n * Extracts links from a DataTransfer object\n */ const getLinks = (dataTransfer)=>{\n    let links = [];\n    try {\n        // look in meta data property\n        links = getLinksFromTransferMetaData(dataTransfer);\n        if (links.length) {\n            return links;\n        }\n        links = getLinksFromTransferURLData(dataTransfer);\n    } catch (e) {\n    // nope nope nope (probably IE trouble)\n    }\n    return links;\n};\nconst getLinksFromTransferURLData = (dataTransfer)=>{\n    let data = dataTransfer.getData(\"url\");\n    if (typeof data === \"string\" && data.length) {\n        return [\n            data\n        ];\n    }\n    return [];\n};\nconst getLinksFromTransferMetaData = (dataTransfer)=>{\n    let data = dataTransfer.getData(\"text/html\");\n    if (typeof data === \"string\" && data.length) {\n        const matches = data.match(/src\\s*=\\s*\"(.+?)\"/);\n        if (matches) {\n            return [\n                matches[1]\n            ];\n        }\n    }\n    return [];\n};\nconst dragNDropObservers = [];\nconst eventPosition = (e)=>({\n        pageLeft: e.pageX,\n        pageTop: e.pageY,\n        scopeLeft: e.offsetX || e.layerX,\n        scopeTop: e.offsetY || e.layerY\n    });\nconst createDragNDropClient = (element, scopeToObserve, filterElement)=>{\n    const observer = getDragNDropObserver(scopeToObserve);\n    const client = {\n        element,\n        filterElement,\n        state: null,\n        ondrop: ()=>{},\n        onenter: ()=>{},\n        ondrag: ()=>{},\n        onexit: ()=>{},\n        onload: ()=>{},\n        allowdrop: ()=>{}\n    };\n    client.destroy = observer.addListener(client);\n    return client;\n};\nconst getDragNDropObserver = (element)=>{\n    // see if already exists, if so, return\n    const observer = dragNDropObservers.find((item)=>item.element === element);\n    if (observer) {\n        return observer;\n    }\n    // create new observer, does not yet exist for this element\n    const newObserver = createDragNDropObserver(element);\n    dragNDropObservers.push(newObserver);\n    return newObserver;\n};\nconst createDragNDropObserver = (element)=>{\n    const clients = [];\n    const routes = {\n        dragenter,\n        dragover,\n        dragleave,\n        drop\n    };\n    const handlers = {};\n    forin(routes, (event, createHandler)=>{\n        handlers[event] = createHandler(element, clients);\n        element.addEventListener(event, handlers[event], false);\n    });\n    const observer = {\n        element,\n        addListener: (client)=>{\n            // add as client\n            clients.push(client);\n            // return removeListener function\n            return ()=>{\n                // remove client\n                clients.splice(clients.indexOf(client), 1);\n                // if no more clients, clean up observer\n                if (clients.length === 0) {\n                    dragNDropObservers.splice(dragNDropObservers.indexOf(observer), 1);\n                    forin(routes, (event)=>{\n                        element.removeEventListener(event, handlers[event], false);\n                    });\n                }\n            };\n        }\n    };\n    return observer;\n};\nconst elementFromPoint = (root, point)=>{\n    if (!(\"elementFromPoint\" in root)) {\n        root = document;\n    }\n    return root.elementFromPoint(point.x, point.y);\n};\nconst isEventTarget = (e, target)=>{\n    // get root\n    const root = getRootNode(target);\n    // get element at position\n    // if root is not actual shadow DOM and does not have elementFromPoint method, use the one on document\n    const elementAtPosition = elementFromPoint(root, {\n        x: e.pageX - window.pageXOffset,\n        y: e.pageY - window.pageYOffset\n    });\n    // test if target is the element or if one of its children is\n    return elementAtPosition === target || target.contains(elementAtPosition);\n};\nlet initialTarget = null;\nconst setDropEffect = (dataTransfer, effect)=>{\n    // is in try catch as IE11 will throw error if not\n    try {\n        dataTransfer.dropEffect = effect;\n    } catch (e) {}\n};\nconst dragenter = (root, clients)=>(e)=>{\n        e.preventDefault();\n        initialTarget = e.target;\n        clients.forEach((client)=>{\n            const { element, onenter } = client;\n            if (isEventTarget(e, element)) {\n                client.state = \"enter\";\n                // fire enter event\n                onenter(eventPosition(e));\n            }\n        });\n    };\nconst dragover = (root, clients)=>(e)=>{\n        e.preventDefault();\n        const dataTransfer = e.dataTransfer;\n        requestDataTransferItems(dataTransfer).then((items)=>{\n            let overDropTarget = false;\n            clients.some((client)=>{\n                const { filterElement, element, onenter, onexit, ondrag, allowdrop } = client;\n                // by default we can drop\n                setDropEffect(dataTransfer, \"copy\");\n                // allow transfer of these items\n                const allowsTransfer = allowdrop(items);\n                // only used when can be dropped on page\n                if (!allowsTransfer) {\n                    setDropEffect(dataTransfer, \"none\");\n                    return;\n                }\n                // targetting this client\n                if (isEventTarget(e, element)) {\n                    overDropTarget = true;\n                    // had no previous state, means we are entering this client\n                    if (client.state === null) {\n                        client.state = \"enter\";\n                        onenter(eventPosition(e));\n                        return;\n                    }\n                    // now over element (no matter if it allows the drop or not)\n                    client.state = \"over\";\n                    // needs to allow transfer\n                    if (filterElement && !allowsTransfer) {\n                        setDropEffect(dataTransfer, \"none\");\n                        return;\n                    }\n                    // dragging\n                    ondrag(eventPosition(e));\n                } else {\n                    // should be over an element to drop\n                    if (filterElement && !overDropTarget) {\n                        setDropEffect(dataTransfer, \"none\");\n                    }\n                    // might have just left this client?\n                    if (client.state) {\n                        client.state = null;\n                        onexit(eventPosition(e));\n                    }\n                }\n            });\n        });\n    };\nconst drop = (root, clients)=>(e)=>{\n        e.preventDefault();\n        const dataTransfer = e.dataTransfer;\n        requestDataTransferItems(dataTransfer).then((items)=>{\n            clients.forEach((client)=>{\n                const { filterElement, element, ondrop, onexit, allowdrop } = client;\n                client.state = null;\n                // if we're filtering on element we need to be over the element to drop\n                if (filterElement && !isEventTarget(e, element)) return;\n                // no transfer for this client\n                if (!allowdrop(items)) return onexit(eventPosition(e));\n                // we can drop these items on this client\n                ondrop(eventPosition(e), items);\n            });\n        });\n    };\nconst dragleave = (root, clients)=>(e)=>{\n        if (initialTarget !== e.target) {\n            return;\n        }\n        clients.forEach((client)=>{\n            const { onexit } = client;\n            client.state = null;\n            onexit(eventPosition(e));\n        });\n    };\nconst createHopper = (scope, validateItems, options)=>{\n    // is now hopper scope\n    scope.classList.add(\"filepond--hopper\");\n    // shortcuts\n    const { catchesDropsOnPage, requiresDropOnElement, filterItems = (items)=>items } = options;\n    // create a dnd client\n    const client = createDragNDropClient(scope, catchesDropsOnPage ? document.documentElement : scope, requiresDropOnElement);\n    // current client state\n    let lastState = \"\";\n    let currentState = \"\";\n    // determines if a file may be dropped\n    client.allowdrop = (items)=>{\n        // TODO: if we can, throw error to indicate the items cannot by dropped\n        return validateItems(filterItems(items));\n    };\n    client.ondrop = (position, items)=>{\n        const filteredItems = filterItems(items);\n        if (!validateItems(filteredItems)) {\n            api.ondragend(position);\n            return;\n        }\n        currentState = \"drag-drop\";\n        api.onload(filteredItems, position);\n    };\n    client.ondrag = (position)=>{\n        api.ondrag(position);\n    };\n    client.onenter = (position)=>{\n        currentState = \"drag-over\";\n        api.ondragstart(position);\n    };\n    client.onexit = (position)=>{\n        currentState = \"drag-exit\";\n        api.ondragend(position);\n    };\n    const api = {\n        updateHopperState: ()=>{\n            if (lastState !== currentState) {\n                scope.dataset.hopperState = currentState;\n                lastState = currentState;\n            }\n        },\n        onload: ()=>{},\n        ondragstart: ()=>{},\n        ondrag: ()=>{},\n        ondragend: ()=>{},\n        destroy: ()=>{\n            // destroy client\n            client.destroy();\n        }\n    };\n    return api;\n};\nlet listening = false;\nconst listeners$1 = [];\nconst handlePaste = (e)=>{\n    // if is pasting in input or textarea and the target is outside of a filepond scope, ignore\n    const activeEl = document.activeElement;\n    const isActiveElementEditable = activeEl && (/textarea|input/i.test(activeEl.nodeName) || activeEl.getAttribute(\"contenteditable\") === \"true\");\n    if (isActiveElementEditable) {\n        // test textarea or input is contained in filepond root\n        let inScope = false;\n        let element = activeEl;\n        while(element !== document.body){\n            if (element.classList.contains(\"filepond--root\")) {\n                inScope = true;\n                break;\n            }\n            element = element.parentNode;\n        }\n        if (!inScope) return;\n    }\n    requestDataTransferItems(e.clipboardData).then((files)=>{\n        // no files received\n        if (!files.length) {\n            return;\n        }\n        // notify listeners of received files\n        listeners$1.forEach((listener)=>listener(files));\n    });\n};\nconst listen = (cb)=>{\n    // can't add twice\n    if (listeners$1.includes(cb)) {\n        return;\n    }\n    // add initial listener\n    listeners$1.push(cb);\n    // setup paste listener for entire page\n    if (listening) {\n        return;\n    }\n    listening = true;\n    document.addEventListener(\"paste\", handlePaste);\n};\nconst unlisten = (listener)=>{\n    arrayRemove(listeners$1, listeners$1.indexOf(listener));\n    // clean up\n    if (listeners$1.length === 0) {\n        document.removeEventListener(\"paste\", handlePaste);\n        listening = false;\n    }\n};\nconst createPaster = ()=>{\n    const cb = (files)=>{\n        api.onload(files);\n    };\n    const api = {\n        destroy: ()=>{\n            unlisten(cb);\n        },\n        onload: ()=>{}\n    };\n    listen(cb);\n    return api;\n};\n/**\n * Creates the file view\n */ const create$d = ({ root, props })=>{\n    root.element.id = `filepond--assistant-${props.id}`;\n    attr(root.element, \"role\", \"alert\");\n    attr(root.element, \"aria-live\", \"polite\");\n    attr(root.element, \"aria-relevant\", \"additions\");\n};\nlet addFilesNotificationTimeout = null;\nlet notificationClearTimeout = null;\nconst filenames = [];\nconst assist = (root, message)=>{\n    root.element.textContent = message;\n};\nconst clear$1 = (root)=>{\n    root.element.textContent = \"\";\n};\nconst listModified = (root, filename, label)=>{\n    const total = root.query(\"GET_TOTAL_ITEMS\");\n    assist(root, `${label} ${filename}, ${total} ${total === 1 ? root.query(\"GET_LABEL_FILE_COUNT_SINGULAR\") : root.query(\"GET_LABEL_FILE_COUNT_PLURAL\")}`);\n    // clear group after set amount of time so the status is not read twice\n    clearTimeout(notificationClearTimeout);\n    notificationClearTimeout = setTimeout(()=>{\n        clear$1(root);\n    }, 1500);\n};\nconst isUsingFilePond = (root)=>root.element.parentNode.contains(document.activeElement);\nconst itemAdded = ({ root, action })=>{\n    if (!isUsingFilePond(root)) {\n        return;\n    }\n    root.element.textContent = \"\";\n    const item = root.query(\"GET_ITEM\", action.id);\n    filenames.push(item.filename);\n    clearTimeout(addFilesNotificationTimeout);\n    addFilesNotificationTimeout = setTimeout(()=>{\n        listModified(root, filenames.join(\", \"), root.query(\"GET_LABEL_FILE_ADDED\"));\n        filenames.length = 0;\n    }, 750);\n};\nconst itemRemoved = ({ root, action })=>{\n    if (!isUsingFilePond(root)) {\n        return;\n    }\n    const item = action.item;\n    listModified(root, item.filename, root.query(\"GET_LABEL_FILE_REMOVED\"));\n};\nconst itemProcessed = ({ root, action })=>{\n    // will also notify the user when FilePond is not being used, as the user might be occupied with other activities while uploading a file\n    const item = root.query(\"GET_ITEM\", action.id);\n    const filename = item.filename;\n    const label = root.query(\"GET_LABEL_FILE_PROCESSING_COMPLETE\");\n    assist(root, `${filename} ${label}`);\n};\nconst itemProcessedUndo = ({ root, action })=>{\n    const item = root.query(\"GET_ITEM\", action.id);\n    const filename = item.filename;\n    const label = root.query(\"GET_LABEL_FILE_PROCESSING_ABORTED\");\n    assist(root, `${filename} ${label}`);\n};\nconst itemError = ({ root, action })=>{\n    const item = root.query(\"GET_ITEM\", action.id);\n    const filename = item.filename;\n    // will also notify the user when FilePond is not being used, as the user might be occupied with other activities while uploading a file\n    assist(root, `${action.status.main} ${filename} ${action.status.sub}`);\n};\nconst assistant = createView({\n    create: create$d,\n    ignoreRect: true,\n    ignoreRectUpdate: true,\n    write: createRoute({\n        DID_LOAD_ITEM: itemAdded,\n        DID_REMOVE_ITEM: itemRemoved,\n        DID_COMPLETE_ITEM_PROCESSING: itemProcessed,\n        DID_ABORT_ITEM_PROCESSING: itemProcessedUndo,\n        DID_REVERT_ITEM_PROCESSING: itemProcessedUndo,\n        DID_THROW_ITEM_REMOVE_ERROR: itemError,\n        DID_THROW_ITEM_LOAD_ERROR: itemError,\n        DID_THROW_ITEM_INVALID: itemError,\n        DID_THROW_ITEM_PROCESSING_ERROR: itemError\n    }),\n    tag: \"span\",\n    name: \"assistant\"\n});\nconst toCamels = (string, separator = \"-\")=>string.replace(new RegExp(`${separator}.`, \"g\"), (sub)=>sub.charAt(1).toUpperCase());\nconst debounce = (func, interval = 16, immidiateOnly = true)=>{\n    let last = Date.now();\n    let timeout = null;\n    return (...args)=>{\n        clearTimeout(timeout);\n        const dist = Date.now() - last;\n        const fn = ()=>{\n            last = Date.now();\n            func(...args);\n        };\n        if (dist < interval) {\n            // we need to delay by the difference between interval and dist\n            // for example: if distance is 10 ms and interval is 16 ms,\n            // we need to wait an additional 6ms before calling the function)\n            if (!immidiateOnly) {\n                timeout = setTimeout(fn, interval - dist);\n            }\n        } else {\n            // go!\n            fn();\n        }\n    };\n};\nconst MAX_FILES_LIMIT = 1000000;\nconst prevent = (e)=>e.preventDefault();\nconst create$e = ({ root, props })=>{\n    // Add id\n    const id = root.query(\"GET_ID\");\n    if (id) {\n        root.element.id = id;\n    }\n    // Add className\n    const className = root.query(\"GET_CLASS_NAME\");\n    if (className) {\n        className.split(\" \").filter((name)=>name.length).forEach((name)=>{\n            root.element.classList.add(name);\n        });\n    }\n    // Field label\n    root.ref.label = root.appendChildView(root.createChildView(dropLabel, {\n        ...props,\n        translateY: null,\n        caption: root.query(\"GET_LABEL_IDLE\")\n    }));\n    // List of items\n    root.ref.list = root.appendChildView(root.createChildView(listScroller, {\n        translateY: null\n    }));\n    // Background panel\n    root.ref.panel = root.appendChildView(root.createChildView(panel, {\n        name: \"panel-root\"\n    }));\n    // Assistant notifies assistive tech when content changes\n    root.ref.assistant = root.appendChildView(root.createChildView(assistant, {\n        ...props\n    }));\n    // Data\n    root.ref.data = root.appendChildView(root.createChildView(data, {\n        ...props\n    }));\n    // Measure (tests if fixed height was set)\n    // DOCTYPE needs to be set for this to work\n    root.ref.measure = createElement$1(\"div\");\n    root.ref.measure.style.height = \"100%\";\n    root.element.appendChild(root.ref.measure);\n    // information on the root height or fixed height status\n    root.ref.bounds = null;\n    // apply initial style properties\n    root.query(\"GET_STYLES\").filter((style)=>!isEmpty(style.value)).map(({ name, value })=>{\n        root.element.dataset[name] = value;\n    });\n    // determine if width changed\n    root.ref.widthPrevious = null;\n    root.ref.widthUpdated = debounce(()=>{\n        root.ref.updateHistory = [];\n        root.dispatch(\"DID_RESIZE_ROOT\");\n    }, 250);\n    // history of updates\n    root.ref.previousAspectRatio = null;\n    root.ref.updateHistory = [];\n    // prevent scrolling and zooming on iOS (only if supports pointer events, for then we can enable reorder)\n    const canHover = window.matchMedia(\"(pointer: fine) and (hover: hover)\").matches;\n    const hasPointerEvents = \"PointerEvent\" in window;\n    if (root.query(\"GET_ALLOW_REORDER\") && hasPointerEvents && !canHover) {\n        root.element.addEventListener(\"touchmove\", prevent, {\n            passive: false\n        });\n        root.element.addEventListener(\"gesturestart\", prevent);\n    }\n    // add credits\n    const credits = root.query(\"GET_CREDITS\");\n    const hasCredits = credits.length === 2;\n    if (hasCredits) {\n        const frag = document.createElement(\"a\");\n        frag.className = \"filepond--credits\";\n        frag.href = credits[0];\n        frag.tabIndex = -1;\n        frag.target = \"_blank\";\n        frag.rel = \"noopener noreferrer nofollow\";\n        frag.textContent = credits[1];\n        root.element.appendChild(frag);\n        root.ref.credits = frag;\n    }\n};\nconst write$9 = ({ root, props, actions })=>{\n    // route actions\n    route$5({\n        root,\n        props,\n        actions\n    });\n    // apply style properties\n    actions.filter((action)=>/^DID_SET_STYLE_/.test(action.type)).filter((action)=>!isEmpty(action.data.value)).map(({ type, data })=>{\n        const name = toCamels(type.substring(8).toLowerCase(), \"_\");\n        root.element.dataset[name] = data.value;\n        root.invalidateLayout();\n    });\n    if (root.rect.element.hidden) return;\n    if (root.rect.element.width !== root.ref.widthPrevious) {\n        root.ref.widthPrevious = root.rect.element.width;\n        root.ref.widthUpdated();\n    }\n    // get box bounds, we do this only once\n    let bounds = root.ref.bounds;\n    if (!bounds) {\n        bounds = root.ref.bounds = calculateRootBoundingBoxHeight(root);\n        // destroy measure element\n        root.element.removeChild(root.ref.measure);\n        root.ref.measure = null;\n    }\n    // get quick references to various high level parts of the upload tool\n    const { hopper, label, list, panel } = root.ref;\n    // sets correct state to hopper scope\n    if (hopper) {\n        hopper.updateHopperState();\n    }\n    // bool to indicate if we're full or not\n    const aspectRatio = root.query(\"GET_PANEL_ASPECT_RATIO\");\n    const isMultiItem = root.query(\"GET_ALLOW_MULTIPLE\");\n    const totalItems = root.query(\"GET_TOTAL_ITEMS\");\n    const maxItems = isMultiItem ? root.query(\"GET_MAX_FILES\") || MAX_FILES_LIMIT : 1;\n    const atMaxCapacity = totalItems === maxItems;\n    // action used to add item\n    const addAction = actions.find((action)=>action.type === \"DID_ADD_ITEM\");\n    // if reached max capacity and we've just reached it\n    if (atMaxCapacity && addAction) {\n        // get interaction type\n        const interactionMethod = addAction.data.interactionMethod;\n        // hide label\n        label.opacity = 0;\n        if (isMultiItem) {\n            label.translateY = -40;\n        } else {\n            if (interactionMethod === InteractionMethod.API) {\n                label.translateX = 40;\n            } else if (interactionMethod === InteractionMethod.BROWSE) {\n                label.translateY = 40;\n            } else {\n                label.translateY = 30;\n            }\n        }\n    } else if (!atMaxCapacity) {\n        label.opacity = 1;\n        label.translateX = 0;\n        label.translateY = 0;\n    }\n    const listItemMargin = calculateListItemMargin(root);\n    const listHeight = calculateListHeight(root);\n    const labelHeight = label.rect.element.height;\n    const currentLabelHeight = !isMultiItem || atMaxCapacity ? 0 : labelHeight;\n    const listMarginTop = atMaxCapacity ? list.rect.element.marginTop : 0;\n    const listMarginBottom = totalItems === 0 ? 0 : list.rect.element.marginBottom;\n    const visualHeight = currentLabelHeight + listMarginTop + listHeight.visual + listMarginBottom;\n    const boundsHeight = currentLabelHeight + listMarginTop + listHeight.bounds + listMarginBottom;\n    // link list to label bottom position\n    list.translateY = Math.max(0, currentLabelHeight - list.rect.element.marginTop) - listItemMargin.top;\n    if (aspectRatio) {\n        // fixed aspect ratio\n        // calculate height based on width\n        const width = root.rect.element.width;\n        const height = width * aspectRatio;\n        // clear history if aspect ratio has changed\n        if (aspectRatio !== root.ref.previousAspectRatio) {\n            root.ref.previousAspectRatio = aspectRatio;\n            root.ref.updateHistory = [];\n        }\n        // remember this width\n        const history = root.ref.updateHistory;\n        history.push(width);\n        const MAX_BOUNCES = 2;\n        if (history.length > MAX_BOUNCES * 2) {\n            const l = history.length;\n            const bottom = l - 10;\n            let bounces = 0;\n            for(let i = l; i >= bottom; i--){\n                if (history[i] === history[i - 2]) {\n                    bounces++;\n                }\n                if (bounces >= MAX_BOUNCES) {\n                    // dont adjust height\n                    return;\n                }\n            }\n        }\n        // fix height of panel so it adheres to aspect ratio\n        panel.scalable = false;\n        panel.height = height;\n        // available height for list\n        const listAvailableHeight = // the height of the panel minus the label height\n        height - currentLabelHeight - // the room we leave open between the end of the list and the panel bottom\n        (listMarginBottom - listItemMargin.bottom) - // if we're full we need to leave some room between the top of the panel and the list\n        (atMaxCapacity ? listMarginTop : 0);\n        if (listHeight.visual > listAvailableHeight) {\n            list.overflow = listAvailableHeight;\n        } else {\n            list.overflow = null;\n        }\n        // set container bounds (so pushes siblings downwards)\n        root.height = height;\n    } else if (bounds.fixedHeight) {\n        // fixed height\n        // fix height of panel\n        panel.scalable = false;\n        // available height for list\n        const listAvailableHeight = // the height of the panel minus the label height\n        bounds.fixedHeight - currentLabelHeight - // the room we leave open between the end of the list and the panel bottom\n        (listMarginBottom - listItemMargin.bottom) - // if we're full we need to leave some room between the top of the panel and the list\n        (atMaxCapacity ? listMarginTop : 0);\n        // set list height\n        if (listHeight.visual > listAvailableHeight) {\n            list.overflow = listAvailableHeight;\n        } else {\n            list.overflow = null;\n        }\n    // no need to set container bounds as these are handles by CSS fixed height\n    } else if (bounds.cappedHeight) {\n        // max-height\n        // not a fixed height panel\n        const isCappedHeight = visualHeight >= bounds.cappedHeight;\n        const panelHeight = Math.min(bounds.cappedHeight, visualHeight);\n        panel.scalable = true;\n        panel.height = isCappedHeight ? panelHeight : panelHeight - listItemMargin.top - listItemMargin.bottom;\n        // available height for list\n        const listAvailableHeight = // the height of the panel minus the label height\n        panelHeight - currentLabelHeight - // the room we leave open between the end of the list and the panel bottom\n        (listMarginBottom - listItemMargin.bottom) - // if we're full we need to leave some room between the top of the panel and the list\n        (atMaxCapacity ? listMarginTop : 0);\n        // set list height (if is overflowing)\n        if (visualHeight > bounds.cappedHeight && listHeight.visual > listAvailableHeight) {\n            list.overflow = listAvailableHeight;\n        } else {\n            list.overflow = null;\n        }\n        // set container bounds (so pushes siblings downwards)\n        root.height = Math.min(bounds.cappedHeight, boundsHeight - listItemMargin.top - listItemMargin.bottom);\n    } else {\n        // flexible height\n        // not a fixed height panel\n        const itemMargin = totalItems > 0 ? listItemMargin.top + listItemMargin.bottom : 0;\n        panel.scalable = true;\n        panel.height = Math.max(labelHeight, visualHeight - itemMargin);\n        // set container bounds (so pushes siblings downwards)\n        root.height = Math.max(labelHeight, boundsHeight - itemMargin);\n    }\n    // move credits to bottom\n    if (root.ref.credits && panel.heightCurrent) root.ref.credits.style.transform = `translateY(${panel.heightCurrent}px)`;\n};\nconst calculateListItemMargin = (root)=>{\n    const item = root.ref.list.childViews[0].childViews[0];\n    return item ? {\n        top: item.rect.element.marginTop,\n        bottom: item.rect.element.marginBottom\n    } : {\n        top: 0,\n        bottom: 0\n    };\n};\nconst calculateListHeight = (root)=>{\n    let visual = 0;\n    let bounds = 0;\n    // get file list reference\n    const scrollList = root.ref.list;\n    const itemList = scrollList.childViews[0];\n    const visibleChildren = itemList.childViews.filter((child)=>child.rect.element.height);\n    const children = root.query(\"GET_ACTIVE_ITEMS\").map((item)=>visibleChildren.find((child)=>child.id === item.id)).filter((item)=>item);\n    // no children, done!\n    if (children.length === 0) return {\n        visual,\n        bounds\n    };\n    const horizontalSpace = itemList.rect.element.width;\n    const dragIndex = getItemIndexByPosition(itemList, children, scrollList.dragCoordinates);\n    const childRect = children[0].rect.element;\n    const itemVerticalMargin = childRect.marginTop + childRect.marginBottom;\n    const itemHorizontalMargin = childRect.marginLeft + childRect.marginRight;\n    const itemWidth = childRect.width + itemHorizontalMargin;\n    const itemHeight = childRect.height + itemVerticalMargin;\n    const newItem = typeof dragIndex !== \"undefined\" && dragIndex >= 0 ? 1 : 0;\n    const removedItem = children.find((child)=>child.markedForRemoval && child.opacity < 0.45) ? -1 : 0;\n    const verticalItemCount = children.length + newItem + removedItem;\n    const itemsPerRow = getItemsPerRow(horizontalSpace, itemWidth);\n    // stack\n    if (itemsPerRow === 1) {\n        children.forEach((item)=>{\n            const height = item.rect.element.height + itemVerticalMargin;\n            bounds += height;\n            visual += height * item.opacity;\n        });\n    } else {\n        bounds = Math.ceil(verticalItemCount / itemsPerRow) * itemHeight;\n        visual = bounds;\n    }\n    return {\n        visual,\n        bounds\n    };\n};\nconst calculateRootBoundingBoxHeight = (root)=>{\n    const height = root.ref.measureHeight || null;\n    const cappedHeight = parseInt(root.style.maxHeight, 10) || null;\n    const fixedHeight = height === 0 ? null : height;\n    return {\n        cappedHeight,\n        fixedHeight\n    };\n};\nconst exceedsMaxFiles = (root, items)=>{\n    const allowReplace = root.query(\"GET_ALLOW_REPLACE\");\n    const allowMultiple = root.query(\"GET_ALLOW_MULTIPLE\");\n    const totalItems = root.query(\"GET_TOTAL_ITEMS\");\n    let maxItems = root.query(\"GET_MAX_FILES\");\n    // total amount of items being dragged\n    const totalBrowseItems = items.length;\n    // if does not allow multiple items and dragging more than one item\n    if (!allowMultiple && totalBrowseItems > 1) {\n        root.dispatch(\"DID_THROW_MAX_FILES\", {\n            source: items,\n            error: createResponse(\"warning\", 0, \"Max files\")\n        });\n        return true;\n    }\n    // limit max items to one if not allowed to drop multiple items\n    maxItems = allowMultiple ? maxItems : 1;\n    if (!allowMultiple && allowReplace) {\n        // There is only one item, so there is room to replace or add an item\n        return false;\n    }\n    // no more room?\n    const hasMaxItems = isInt(maxItems);\n    if (hasMaxItems && totalItems + totalBrowseItems > maxItems) {\n        root.dispatch(\"DID_THROW_MAX_FILES\", {\n            source: items,\n            error: createResponse(\"warning\", 0, \"Max files\")\n        });\n        return true;\n    }\n    return false;\n};\nconst getDragIndex = (list, children, position)=>{\n    const itemList = list.childViews[0];\n    return getItemIndexByPosition(itemList, children, {\n        left: position.scopeLeft - itemList.rect.element.left,\n        top: position.scopeTop - (list.rect.outer.top + list.rect.element.marginTop + list.rect.element.scrollTop)\n    });\n};\n/**\n * Enable or disable file drop functionality\n */ const toggleDrop = (root)=>{\n    const isAllowed = root.query(\"GET_ALLOW_DROP\");\n    const isDisabled = root.query(\"GET_DISABLED\");\n    const enabled = isAllowed && !isDisabled;\n    if (enabled && !root.ref.hopper) {\n        const hopper = createHopper(root.element, (items)=>{\n            // allow quick validation of dropped items\n            const beforeDropFile = root.query(\"GET_BEFORE_DROP_FILE\") || (()=>true);\n            // all items should be validated by all filters as valid\n            const dropValidation = root.query(\"GET_DROP_VALIDATION\");\n            return dropValidation ? items.every((item)=>applyFilters(\"ALLOW_HOPPER_ITEM\", item, {\n                    query: root.query\n                }).every((result)=>result === true) && beforeDropFile(item)) : true;\n        }, {\n            filterItems: (items)=>{\n                const ignoredFiles = root.query(\"GET_IGNORED_FILES\");\n                return items.filter((item)=>{\n                    if (isFile(item)) {\n                        return !ignoredFiles.includes(item.name.toLowerCase());\n                    }\n                    return true;\n                });\n            },\n            catchesDropsOnPage: root.query(\"GET_DROP_ON_PAGE\"),\n            requiresDropOnElement: root.query(\"GET_DROP_ON_ELEMENT\")\n        });\n        hopper.onload = (items, position)=>{\n            // get item children elements and sort based on list sort\n            const list = root.ref.list.childViews[0];\n            const visibleChildren = list.childViews.filter((child)=>child.rect.element.height);\n            const children = root.query(\"GET_ACTIVE_ITEMS\").map((item)=>visibleChildren.find((child)=>child.id === item.id)).filter((item)=>item);\n            applyFilterChain(\"ADD_ITEMS\", items, {\n                dispatch: root.dispatch\n            }).then((queue)=>{\n                // these files don't fit so stop here\n                if (exceedsMaxFiles(root, queue)) return false;\n                // go\n                root.dispatch(\"ADD_ITEMS\", {\n                    items: queue,\n                    index: getDragIndex(root.ref.list, children, position),\n                    interactionMethod: InteractionMethod.DROP\n                });\n            });\n            root.dispatch(\"DID_DROP\", {\n                position\n            });\n            root.dispatch(\"DID_END_DRAG\", {\n                position\n            });\n        };\n        hopper.ondragstart = (position)=>{\n            root.dispatch(\"DID_START_DRAG\", {\n                position\n            });\n        };\n        hopper.ondrag = debounce((position)=>{\n            root.dispatch(\"DID_DRAG\", {\n                position\n            });\n        });\n        hopper.ondragend = (position)=>{\n            root.dispatch(\"DID_END_DRAG\", {\n                position\n            });\n        };\n        root.ref.hopper = hopper;\n        root.ref.drip = root.appendChildView(root.createChildView(drip));\n    } else if (!enabled && root.ref.hopper) {\n        root.ref.hopper.destroy();\n        root.ref.hopper = null;\n        root.removeChildView(root.ref.drip);\n    }\n};\n/**\n * Enable or disable browse functionality\n */ const toggleBrowse = (root, props)=>{\n    const isAllowed = root.query(\"GET_ALLOW_BROWSE\");\n    const isDisabled = root.query(\"GET_DISABLED\");\n    const enabled = isAllowed && !isDisabled;\n    if (enabled && !root.ref.browser) {\n        root.ref.browser = root.appendChildView(root.createChildView(browser, {\n            ...props,\n            onload: (items)=>{\n                applyFilterChain(\"ADD_ITEMS\", items, {\n                    dispatch: root.dispatch\n                }).then((queue)=>{\n                    // these files don't fit so stop here\n                    if (exceedsMaxFiles(root, queue)) return false;\n                    // add items!\n                    root.dispatch(\"ADD_ITEMS\", {\n                        items: queue,\n                        index: -1,\n                        interactionMethod: InteractionMethod.BROWSE\n                    });\n                });\n            }\n        }), 0);\n    } else if (!enabled && root.ref.browser) {\n        root.removeChildView(root.ref.browser);\n        root.ref.browser = null;\n    }\n};\n/**\n * Enable or disable paste functionality\n */ const togglePaste = (root)=>{\n    const isAllowed = root.query(\"GET_ALLOW_PASTE\");\n    const isDisabled = root.query(\"GET_DISABLED\");\n    const enabled = isAllowed && !isDisabled;\n    if (enabled && !root.ref.paster) {\n        root.ref.paster = createPaster();\n        root.ref.paster.onload = (items)=>{\n            applyFilterChain(\"ADD_ITEMS\", items, {\n                dispatch: root.dispatch\n            }).then((queue)=>{\n                // these files don't fit so stop here\n                if (exceedsMaxFiles(root, queue)) return false;\n                // add items!\n                root.dispatch(\"ADD_ITEMS\", {\n                    items: queue,\n                    index: -1,\n                    interactionMethod: InteractionMethod.PASTE\n                });\n            });\n        };\n    } else if (!enabled && root.ref.paster) {\n        root.ref.paster.destroy();\n        root.ref.paster = null;\n    }\n};\n/**\n * Route actions\n */ const route$5 = createRoute({\n    DID_SET_ALLOW_BROWSE: ({ root, props })=>{\n        toggleBrowse(root, props);\n    },\n    DID_SET_ALLOW_DROP: ({ root })=>{\n        toggleDrop(root);\n    },\n    DID_SET_ALLOW_PASTE: ({ root })=>{\n        togglePaste(root);\n    },\n    DID_SET_DISABLED: ({ root, props })=>{\n        toggleDrop(root);\n        togglePaste(root);\n        toggleBrowse(root, props);\n        const isDisabled = root.query(\"GET_DISABLED\");\n        if (isDisabled) {\n            root.element.dataset.disabled = \"disabled\";\n        } else {\n            // delete root.element.dataset.disabled; <= this does not work on iOS 10\n            root.element.removeAttribute(\"data-disabled\");\n        }\n    }\n});\nconst root = createView({\n    name: \"root\",\n    read: ({ root })=>{\n        if (root.ref.measure) {\n            root.ref.measureHeight = root.ref.measure.offsetHeight;\n        }\n    },\n    create: create$e,\n    write: write$9,\n    destroy: ({ root })=>{\n        if (root.ref.paster) {\n            root.ref.paster.destroy();\n        }\n        if (root.ref.hopper) {\n            root.ref.hopper.destroy();\n        }\n        root.element.removeEventListener(\"touchmove\", prevent);\n        root.element.removeEventListener(\"gesturestart\", prevent);\n    },\n    mixins: {\n        styles: [\n            \"height\"\n        ]\n    }\n});\n// creates the app\nconst createApp = (initialOptions = {})=>{\n    // let element\n    let originalElement = null;\n    // get default options\n    const defaultOptions = getOptions();\n    // create the data store, this will contain all our app info\n    const store = createStore(// initial state (should be serializable)\n    createInitialState(defaultOptions), // queries\n    [\n        queries,\n        createOptionQueries(defaultOptions)\n    ], // action handlers\n    [\n        actions,\n        createOptionActions(defaultOptions)\n    ]);\n    // set initial options\n    store.dispatch(\"SET_OPTIONS\", {\n        options: initialOptions\n    });\n    // kick thread if visibility changes\n    const visibilityHandler = ()=>{\n        if (document.hidden) return;\n        store.dispatch(\"KICK\");\n    };\n    document.addEventListener(\"visibilitychange\", visibilityHandler);\n    // re-render on window resize start and finish\n    let resizeDoneTimer = null;\n    let isResizing = false;\n    let isResizingHorizontally = false;\n    let initialWindowWidth = null;\n    let currentWindowWidth = null;\n    const resizeHandler = ()=>{\n        if (!isResizing) {\n            isResizing = true;\n        }\n        clearTimeout(resizeDoneTimer);\n        resizeDoneTimer = setTimeout(()=>{\n            isResizing = false;\n            initialWindowWidth = null;\n            currentWindowWidth = null;\n            if (isResizingHorizontally) {\n                isResizingHorizontally = false;\n                store.dispatch(\"DID_STOP_RESIZE\");\n            }\n        }, 500);\n    };\n    window.addEventListener(\"resize\", resizeHandler);\n    // render initial view\n    const view = root(store, {\n        id: getUniqueId()\n    });\n    //\n    // PRIVATE API -------------------------------------------------------------------------------------\n    //\n    let isResting = false;\n    let isHidden = false;\n    const readWriteApi = {\n        // necessary for update loop\n        /**\n         * Reads from dom (never call manually)\n         * @private\n         */ _read: ()=>{\n            // test if we're resizing horizontally\n            // TODO: see if we can optimize this by measuring root rect\n            if (isResizing) {\n                currentWindowWidth = window.innerWidth;\n                if (!initialWindowWidth) {\n                    initialWindowWidth = currentWindowWidth;\n                }\n                if (!isResizingHorizontally && currentWindowWidth !== initialWindowWidth) {\n                    store.dispatch(\"DID_START_RESIZE\");\n                    isResizingHorizontally = true;\n                }\n            }\n            if (isHidden && isResting) {\n                // test if is no longer hidden\n                isResting = view.element.offsetParent === null;\n            }\n            // if resting, no need to read as numbers will still all be correct\n            if (isResting) return;\n            // read view data\n            view._read();\n            // if is hidden we need to know so we exit rest mode when revealed\n            isHidden = view.rect.element.hidden;\n        },\n        /**\n         * Writes to dom (never call manually)\n         * @private\n         */ _write: (ts)=>{\n            // get all actions from store\n            const actions = store.processActionQueue()// filter out set actions (these will automatically trigger DID_SET)\n            .filter((action)=>!/^SET_/.test(action.type));\n            // if was idling and no actions stop here\n            if (isResting && !actions.length) return;\n            // some actions might trigger events\n            routeActionsToEvents(actions);\n            // update the view\n            isResting = view._write(ts, actions, isResizingHorizontally);\n            // will clean up all archived items\n            removeReleasedItems(store.query(\"GET_ITEMS\"));\n            // now idling\n            if (isResting) {\n                store.processDispatchQueue();\n            }\n        }\n    };\n    //\n    // EXPOSE EVENTS -------------------------------------------------------------------------------------\n    //\n    const createEvent = (name)=>(data)=>{\n            // create default event\n            const event = {\n                type: name\n            };\n            // no data to add\n            if (!data) {\n                return event;\n            }\n            // copy relevant props\n            if (data.hasOwnProperty(\"error\")) {\n                event.error = data.error ? {\n                    ...data.error\n                } : null;\n            }\n            if (data.status) {\n                event.status = {\n                    ...data.status\n                };\n            }\n            if (data.file) {\n                event.output = data.file;\n            }\n            // only source is available, else add item if possible\n            if (data.source) {\n                event.file = data.source;\n            } else if (data.item || data.id) {\n                const item = data.item ? data.item : store.query(\"GET_ITEM\", data.id);\n                event.file = item ? createItemAPI(item) : null;\n            }\n            // map all items in a possible items array\n            if (data.items) {\n                event.items = data.items.map(createItemAPI);\n            }\n            // if this is a progress event add the progress amount\n            if (/progress/.test(name)) {\n                event.progress = data.progress;\n            }\n            // copy relevant props\n            if (data.hasOwnProperty(\"origin\") && data.hasOwnProperty(\"target\")) {\n                event.origin = data.origin;\n                event.target = data.target;\n            }\n            return event;\n        };\n    const eventRoutes = {\n        DID_DESTROY: createEvent(\"destroy\"),\n        DID_INIT: createEvent(\"init\"),\n        DID_THROW_MAX_FILES: createEvent(\"warning\"),\n        DID_INIT_ITEM: createEvent(\"initfile\"),\n        DID_START_ITEM_LOAD: createEvent(\"addfilestart\"),\n        DID_UPDATE_ITEM_LOAD_PROGRESS: createEvent(\"addfileprogress\"),\n        DID_LOAD_ITEM: createEvent(\"addfile\"),\n        DID_THROW_ITEM_INVALID: [\n            createEvent(\"error\"),\n            createEvent(\"addfile\")\n        ],\n        DID_THROW_ITEM_LOAD_ERROR: [\n            createEvent(\"error\"),\n            createEvent(\"addfile\")\n        ],\n        DID_THROW_ITEM_REMOVE_ERROR: [\n            createEvent(\"error\"),\n            createEvent(\"removefile\")\n        ],\n        DID_PREPARE_OUTPUT: createEvent(\"preparefile\"),\n        DID_START_ITEM_PROCESSING: createEvent(\"processfilestart\"),\n        DID_UPDATE_ITEM_PROCESS_PROGRESS: createEvent(\"processfileprogress\"),\n        DID_ABORT_ITEM_PROCESSING: createEvent(\"processfileabort\"),\n        DID_COMPLETE_ITEM_PROCESSING: createEvent(\"processfile\"),\n        DID_COMPLETE_ITEM_PROCESSING_ALL: createEvent(\"processfiles\"),\n        DID_REVERT_ITEM_PROCESSING: createEvent(\"processfilerevert\"),\n        DID_THROW_ITEM_PROCESSING_ERROR: [\n            createEvent(\"error\"),\n            createEvent(\"processfile\")\n        ],\n        DID_REMOVE_ITEM: createEvent(\"removefile\"),\n        DID_UPDATE_ITEMS: createEvent(\"updatefiles\"),\n        DID_ACTIVATE_ITEM: createEvent(\"activatefile\"),\n        DID_REORDER_ITEMS: createEvent(\"reorderfiles\")\n    };\n    const exposeEvent = (event)=>{\n        // create event object to be dispatched\n        const detail = {\n            pond: exports,\n            ...event\n        };\n        delete detail.type;\n        view.element.dispatchEvent(new CustomEvent(`FilePond:${event.type}`, {\n            // event info\n            detail,\n            // event behaviour\n            bubbles: true,\n            cancelable: true,\n            composed: true\n        }));\n        // event object to params used for `on()` event handlers and callbacks `oninit()`\n        const params = [];\n        // if is possible error event, make it the first param\n        if (event.hasOwnProperty(\"error\")) {\n            params.push(event.error);\n        }\n        // file is always section\n        if (event.hasOwnProperty(\"file\")) {\n            params.push(event.file);\n        }\n        // append other props\n        const filtered = [\n            \"type\",\n            \"error\",\n            \"file\"\n        ];\n        Object.keys(event).filter((key)=>!filtered.includes(key)).forEach((key)=>params.push(event[key]));\n        // on(type, () => { })\n        exports.fire(event.type, ...params);\n        // oninit = () => {}\n        const handler = store.query(`GET_ON${event.type.toUpperCase()}`);\n        if (handler) {\n            handler(...params);\n        }\n    };\n    const routeActionsToEvents = (actions)=>{\n        if (!actions.length) return;\n        actions.filter((action)=>eventRoutes[action.type]).forEach((action)=>{\n            const routes = eventRoutes[action.type];\n            (Array.isArray(routes) ? routes : [\n                routes\n            ]).forEach((route)=>{\n                // this isn't fantastic, but because of the stacking of settimeouts plugins can handle the did_load before the did_init\n                if (action.type === \"DID_INIT_ITEM\") {\n                    exposeEvent(route(action.data));\n                } else {\n                    setTimeout(()=>{\n                        exposeEvent(route(action.data));\n                    }, 0);\n                }\n            });\n        });\n    };\n    //\n    // PUBLIC API -------------------------------------------------------------------------------------\n    //\n    const setOptions = (options)=>store.dispatch(\"SET_OPTIONS\", {\n            options\n        });\n    const getFile = (query)=>store.query(\"GET_ACTIVE_ITEM\", query);\n    const prepareFile = (query)=>new Promise((resolve, reject)=>{\n            store.dispatch(\"REQUEST_ITEM_PREPARE\", {\n                query,\n                success: (item)=>{\n                    resolve(item);\n                },\n                failure: (error)=>{\n                    reject(error);\n                }\n            });\n        });\n    const addFile = (source, options = {})=>new Promise((resolve, reject)=>{\n            addFiles([\n                {\n                    source,\n                    options\n                }\n            ], {\n                index: options.index\n            }).then((items)=>resolve(items && items[0])).catch(reject);\n        });\n    const isFilePondFile = (obj)=>obj.file && obj.id;\n    const removeFile = (query, options)=>{\n        // if only passed options\n        if (typeof query === \"object\" && !isFilePondFile(query) && !options) {\n            options = query;\n            query = undefined;\n        }\n        // request item removal\n        store.dispatch(\"REMOVE_ITEM\", {\n            ...options,\n            query\n        });\n        // see if item has been removed\n        return store.query(\"GET_ACTIVE_ITEM\", query) === null;\n    };\n    const addFiles = (...args)=>new Promise((resolve, reject)=>{\n            const sources = [];\n            const options = {};\n            // user passed a sources array\n            if (isArray(args[0])) {\n                sources.push.apply(sources, args[0]);\n                Object.assign(options, args[1] || {});\n            } else {\n                // user passed sources as arguments, last one might be options object\n                const lastArgument = args[args.length - 1];\n                if (typeof lastArgument === \"object\" && !(lastArgument instanceof Blob)) {\n                    Object.assign(options, args.pop());\n                }\n                // add rest to sources\n                sources.push(...args);\n            }\n            store.dispatch(\"ADD_ITEMS\", {\n                items: sources,\n                index: options.index,\n                interactionMethod: InteractionMethod.API,\n                success: resolve,\n                failure: reject\n            });\n        });\n    const getFiles = ()=>store.query(\"GET_ACTIVE_ITEMS\");\n    const processFile = (query)=>new Promise((resolve, reject)=>{\n            store.dispatch(\"REQUEST_ITEM_PROCESSING\", {\n                query,\n                success: (item)=>{\n                    resolve(item);\n                },\n                failure: (error)=>{\n                    reject(error);\n                }\n            });\n        });\n    const prepareFiles = (...args)=>{\n        const queries = Array.isArray(args[0]) ? args[0] : args;\n        const items = queries.length ? queries : getFiles();\n        return Promise.all(items.map(prepareFile));\n    };\n    const processFiles = (...args)=>{\n        const queries = Array.isArray(args[0]) ? args[0] : args;\n        if (!queries.length) {\n            const files = getFiles().filter((item)=>!(item.status === ItemStatus.IDLE && item.origin === FileOrigin.LOCAL) && item.status !== ItemStatus.PROCESSING && item.status !== ItemStatus.PROCESSING_COMPLETE && item.status !== ItemStatus.PROCESSING_REVERT_ERROR);\n            return Promise.all(files.map(processFile));\n        }\n        return Promise.all(queries.map(processFile));\n    };\n    const removeFiles = (...args)=>{\n        const queries = Array.isArray(args[0]) ? args[0] : args;\n        let options;\n        if (typeof queries[queries.length - 1] === \"object\") {\n            options = queries.pop();\n        } else if (Array.isArray(args[0])) {\n            options = args[1];\n        }\n        const files = getFiles();\n        if (!queries.length) return Promise.all(files.map((file)=>removeFile(file, options)));\n        // when removing by index the indexes shift after each file removal so we need to convert indexes to ids\n        const mappedQueries = queries.map((query)=>isNumber(query) ? files[query] ? files[query].id : null : query).filter((query)=>query);\n        return mappedQueries.map((q)=>removeFile(q, options));\n    };\n    const exports = {\n        // supports events\n        ...on(),\n        // inject private api methods\n        ...readWriteApi,\n        // inject all getters and setters\n        ...createOptionAPI(store, defaultOptions),\n        /**\n         * Override options defined in options object\n         * @param options\n         */ setOptions,\n        /**\n         * Load the given file\n         * @param source - the source of the file (either a File, base64 data uri or url)\n         * @param options - object, { index: 0 }\n         */ addFile,\n        /**\n         * Load the given files\n         * @param sources - the sources of the files to load\n         * @param options - object, { index: 0 }\n         */ addFiles,\n        /**\n         * Returns the file objects matching the given query\n         * @param query { string, number, null }\n         */ getFile,\n        /**\n         * Upload file with given name\n         * @param query { string, number, null  }\n         */ processFile,\n        /**\n         * Request prepare output for file with given name\n         * @param query { string, number, null  }\n         */ prepareFile,\n        /**\n         * Removes a file by its name\n         * @param query { string, number, null  }\n         */ removeFile,\n        /**\n         * Moves a file to a new location in the files list\n         */ moveFile: (query, index)=>store.dispatch(\"MOVE_ITEM\", {\n                query,\n                index\n            }),\n        /**\n         * Returns all files (wrapped in public api)\n         */ getFiles,\n        /**\n         * Starts uploading all files\n         */ processFiles,\n        /**\n         * Clears all files from the files list\n         */ removeFiles,\n        /**\n         * Starts preparing output of all files\n         */ prepareFiles,\n        /**\n         * Sort list of files\n         */ sort: (compare)=>store.dispatch(\"SORT\", {\n                compare\n            }),\n        /**\n         * Browse the file system for a file\n         */ browse: ()=>{\n            // needs to be trigger directly as user action needs to be traceable (is not traceable in requestAnimationFrame)\n            var input = view.element.querySelector(\"input[type=file]\");\n            if (input) {\n                input.click();\n            }\n        },\n        /**\n         * Destroys the app\n         */ destroy: ()=>{\n            // request destruction\n            exports.fire(\"destroy\", view.element);\n            // stop active processes (file uploads, fetches, stuff like that)\n            // loop over items and depending on states call abort for ongoing processes\n            store.dispatch(\"ABORT_ALL\");\n            // destroy view\n            view._destroy();\n            // stop listening to resize\n            window.removeEventListener(\"resize\", resizeHandler);\n            // stop listening to the visiblitychange event\n            document.removeEventListener(\"visibilitychange\", visibilityHandler);\n            // dispatch destroy\n            store.dispatch(\"DID_DESTROY\");\n        },\n        /**\n         * Inserts the plugin before the target element\n         */ insertBefore: (element)=>insertBefore(view.element, element),\n        /**\n         * Inserts the plugin after the target element\n         */ insertAfter: (element)=>insertAfter(view.element, element),\n        /**\n         * Appends the plugin to the target element\n         */ appendTo: (element)=>element.appendChild(view.element),\n        /**\n         * Replaces an element with the app\n         */ replaceElement: (element)=>{\n            // insert the app before the element\n            insertBefore(view.element, element);\n            // remove the original element\n            element.parentNode.removeChild(element);\n            // remember original element\n            originalElement = element;\n        },\n        /**\n         * Restores the original element\n         */ restoreElement: ()=>{\n            if (!originalElement) {\n                return; // no element to restore\n            }\n            // restore original element\n            insertAfter(originalElement, view.element);\n            // remove our element\n            view.element.parentNode.removeChild(view.element);\n            // remove reference\n            originalElement = null;\n        },\n        /**\n         * Returns true if the app root is attached to given element\n         * @param element\n         */ isAttachedTo: (element)=>view.element === element || originalElement === element,\n        /**\n         * Returns the root element\n         */ element: {\n            get: ()=>view.element\n        },\n        /**\n         * Returns the current pond status\n         */ status: {\n            get: ()=>store.query(\"GET_STATUS\")\n        }\n    };\n    // Done!\n    store.dispatch(\"DID_INIT\");\n    // create actual api object\n    return createObject(exports);\n};\nconst createAppObject = (customOptions = {})=>{\n    // default options\n    const defaultOptions = {};\n    forin(getOptions(), (key, value)=>{\n        defaultOptions[key] = value[0];\n    });\n    // set app options\n    const app = createApp({\n        // default options\n        ...defaultOptions,\n        // custom options\n        ...customOptions\n    });\n    // return the plugin instance\n    return app;\n};\nconst lowerCaseFirstLetter = (string)=>string.charAt(0).toLowerCase() + string.slice(1);\nconst attributeNameToPropertyName = (attributeName)=>toCamels(attributeName.replace(/^data-/, \"\"));\nconst mapObject = (object, propertyMap)=>{\n    // remove unwanted\n    forin(propertyMap, (selector, mapping)=>{\n        forin(object, (property, value)=>{\n            // create regexp shortcut\n            const selectorRegExp = new RegExp(selector);\n            // tests if\n            const matches = selectorRegExp.test(property);\n            // no match, skip\n            if (!matches) {\n                return;\n            }\n            // if there's a mapping, the original property is always removed\n            delete object[property];\n            // should only remove, we done!\n            if (mapping === false) {\n                return;\n            }\n            // move value to new property\n            if (isString(mapping)) {\n                object[mapping] = value;\n                return;\n            }\n            // move to group\n            const group = mapping.group;\n            if (isObject(mapping) && !object[group]) {\n                object[group] = {};\n            }\n            object[group][lowerCaseFirstLetter(property.replace(selectorRegExp, \"\"))] = value;\n        });\n        // do submapping\n        if (mapping.mapping) {\n            mapObject(object[mapping.group], mapping.mapping);\n        }\n    });\n};\nconst getAttributesAsObject = (node, attributeMapping = {})=>{\n    // turn attributes into object\n    const attributes = [];\n    forin(node.attributes, (index)=>{\n        attributes.push(node.attributes[index]);\n    });\n    const output = attributes.filter((attribute)=>attribute.name).reduce((obj, attribute)=>{\n        const value = attr(node, attribute.name);\n        obj[attributeNameToPropertyName(attribute.name)] = value === attribute.name ? true : value;\n        return obj;\n    }, {});\n    // do mapping of object properties\n    mapObject(output, attributeMapping);\n    return output;\n};\nconst createAppAtElement = (element, options = {})=>{\n    // how attributes of the input element are mapped to the options for the plugin\n    const attributeMapping = {\n        // translate to other name\n        \"^class$\": \"className\",\n        \"^multiple$\": \"allowMultiple\",\n        \"^capture$\": \"captureMethod\",\n        \"^webkitdirectory$\": \"allowDirectoriesOnly\",\n        // group under single property\n        \"^server\": {\n            group: \"server\",\n            mapping: {\n                \"^process\": {\n                    group: \"process\"\n                },\n                \"^revert\": {\n                    group: \"revert\"\n                },\n                \"^fetch\": {\n                    group: \"fetch\"\n                },\n                \"^restore\": {\n                    group: \"restore\"\n                },\n                \"^load\": {\n                    group: \"load\"\n                }\n            }\n        },\n        // don't include in object\n        \"^type$\": false,\n        \"^files$\": false\n    };\n    // add additional option translators\n    applyFilters(\"SET_ATTRIBUTE_TO_OPTION_MAP\", attributeMapping);\n    // create final options object by setting options object and then overriding options supplied on element\n    const mergedOptions = {\n        ...options\n    };\n    const attributeOptions = getAttributesAsObject(element.nodeName === \"FIELDSET\" ? element.querySelector(\"input[type=file]\") : element, attributeMapping);\n    // merge with options object\n    Object.keys(attributeOptions).forEach((key)=>{\n        if (isObject(attributeOptions[key])) {\n            if (!isObject(mergedOptions[key])) {\n                mergedOptions[key] = {};\n            }\n            Object.assign(mergedOptions[key], attributeOptions[key]);\n        } else {\n            mergedOptions[key] = attributeOptions[key];\n        }\n    });\n    // if parent is a fieldset, get files from parent by selecting all input fields that are not file upload fields\n    // these will then be automatically set to the initial files\n    mergedOptions.files = (options.files || []).concat(Array.from(element.querySelectorAll(\"input:not([type=file])\")).map((input)=>({\n            source: input.value,\n            options: {\n                type: input.dataset.type\n            }\n        })));\n    // build plugin\n    const app = createAppObject(mergedOptions);\n    // add already selected files\n    if (element.files) {\n        Array.from(element.files).forEach((file)=>{\n            app.addFile(file);\n        });\n    }\n    // replace the target element\n    app.replaceElement(element);\n    // expose\n    return app;\n};\n// if an element is passed, we create the instance at that element, if not, we just create an up object\nconst createApp$1 = (...args)=>isNode(args[0]) ? createAppAtElement(...args) : createAppObject(...args);\nconst PRIVATE_METHODS = [\n    \"fire\",\n    \"_read\",\n    \"_write\"\n];\nconst createAppAPI = (app)=>{\n    const api = {};\n    copyObjectPropertiesToObject(app, api, PRIVATE_METHODS);\n    return api;\n};\n/**\n * Replaces placeholders in given string with replacements\n * @param string - \"Foo {bar}\"\"\n * @param replacements - { \"bar\": 10 }\n */ const replaceInString = (string, replacements)=>string.replace(/(?:{([a-zA-Z]+)})/g, (match, group)=>replacements[group]);\nconst createWorker = (fn)=>{\n    const workerBlob = new Blob([\n        \"(\",\n        fn.toString(),\n        \")()\"\n    ], {\n        type: \"application/javascript\"\n    });\n    const workerURL = URL.createObjectURL(workerBlob);\n    const worker = new Worker(workerURL);\n    return {\n        transfer: (message, cb)=>{},\n        post: (message, cb, transferList)=>{\n            const id = getUniqueId();\n            worker.onmessage = (e)=>{\n                if (e.data.id === id) {\n                    cb(e.data.message);\n                }\n            };\n            worker.postMessage({\n                id,\n                message\n            }, transferList);\n        },\n        terminate: ()=>{\n            worker.terminate();\n            URL.revokeObjectURL(workerURL);\n        }\n    };\n};\nconst loadImage = (url)=>new Promise((resolve, reject)=>{\n        const img = new Image();\n        img.onload = ()=>{\n            resolve(img);\n        };\n        img.onerror = (e)=>{\n            reject(e);\n        };\n        img.src = url;\n    });\nconst renameFile = (file, name)=>{\n    const renamedFile = file.slice(0, file.size, file.type);\n    renamedFile.lastModifiedDate = file.lastModifiedDate;\n    renamedFile.name = name;\n    return renamedFile;\n};\nconst copyFile = (file)=>renameFile(file, file.name);\n// already registered plugins (can't register twice)\nconst registeredPlugins = [];\n// pass utils to plugin\nconst createAppPlugin = (plugin)=>{\n    // already registered\n    if (registeredPlugins.includes(plugin)) {\n        return;\n    }\n    // remember this plugin\n    registeredPlugins.push(plugin);\n    // setup!\n    const pluginOutline = plugin({\n        addFilter,\n        utils: {\n            Type,\n            forin,\n            isString,\n            isFile,\n            toNaturalFileSize,\n            replaceInString,\n            getExtensionFromFilename,\n            getFilenameWithoutExtension,\n            guesstimateMimeType,\n            getFileFromBlob,\n            getFilenameFromURL,\n            createRoute,\n            createWorker,\n            createView,\n            createItemAPI,\n            loadImage,\n            copyFile,\n            renameFile,\n            createBlob,\n            applyFilterChain,\n            text,\n            getNumericAspectRatioFromString\n        },\n        views: {\n            fileActionButton\n        }\n    });\n    // add plugin options to default options\n    extendDefaultOptions(pluginOutline.options);\n};\n// feature detection used by supported() method\nconst isOperaMini = ()=>Object.prototype.toString.call(window.operamini) === \"[object OperaMini]\";\nconst hasPromises = ()=>\"Promise\" in window;\nconst hasBlobSlice = ()=>\"slice\" in Blob.prototype;\nconst hasCreateObjectURL = ()=>\"URL\" in window && \"createObjectURL\" in window.URL;\nconst hasVisibility = ()=>\"visibilityState\" in document;\nconst hasTiming = ()=>\"performance\" in window; // iOS 8.x\nconst hasCSSSupports = ()=>\"supports\" in (window.CSS || {}); // use to detect Safari 9+\nconst isIE11 = ()=>/MSIE|Trident/.test(window.navigator.userAgent);\nconst supported = (()=>{\n    // Runs immediately and then remembers result for subsequent calls\n    const isSupported = // Has to be a browser\n    isBrowser() && // Can't run on Opera Mini due to lack of everything\n    !isOperaMini() && // Require these APIs to feature detect a modern browser\n    hasVisibility() && hasPromises() && hasBlobSlice() && hasCreateObjectURL() && hasTiming() && // doesn't need CSSSupports but is a good way to detect Safari 9+ (we do want to support IE11 though)\n    (hasCSSSupports() || isIE11());\n    return ()=>isSupported;\n})();\n/**\n * Plugin internal state (over all instances)\n */ const state = {\n    // active app instances, used to redraw the apps and to find the later\n    apps: []\n};\n// plugin name\nconst name = \"filepond\";\n/**\n * Public Plugin methods\n */ const fn = ()=>{};\nlet Status$1 = {};\nlet FileStatus = {};\nlet FileOrigin$1 = {};\nlet OptionTypes = {};\nlet create$f = fn;\nlet destroy = fn;\nlet parse = fn;\nlet find = fn;\nlet registerPlugin = fn;\nlet getOptions$1 = fn;\nlet setOptions$1 = fn;\n// if not supported, no API\nif (supported()) {\n    // start painter and fire load event\n    createPainter(()=>{\n        state.apps.forEach((app)=>app._read());\n    }, (ts)=>{\n        state.apps.forEach((app)=>app._write(ts));\n    });\n    // fire loaded event so we know when FilePond is available\n    const dispatch = ()=>{\n        // let others know we have area ready\n        document.dispatchEvent(new CustomEvent(\"FilePond:loaded\", {\n            detail: {\n                supported,\n                create: create$f,\n                destroy,\n                parse,\n                find,\n                registerPlugin,\n                setOptions: setOptions$1\n            }\n        }));\n        // clean up event\n        document.removeEventListener(\"DOMContentLoaded\", dispatch);\n    };\n    if (document.readyState !== \"loading\") {\n        // move to back of execution queue, FilePond should have been exported by then\n        setTimeout(()=>dispatch(), 0);\n    } else {\n        document.addEventListener(\"DOMContentLoaded\", dispatch);\n    }\n    // updates the OptionTypes object based on the current options\n    const updateOptionTypes = ()=>forin(getOptions(), (key, value)=>{\n            OptionTypes[key] = value[1];\n        });\n    Status$1 = {\n        ...Status\n    };\n    FileOrigin$1 = {\n        ...FileOrigin\n    };\n    FileStatus = {\n        ...ItemStatus\n    };\n    OptionTypes = {};\n    updateOptionTypes();\n    // create method, creates apps and adds them to the app array\n    create$f = (...args)=>{\n        const app = createApp$1(...args);\n        app.on(\"destroy\", destroy);\n        state.apps.push(app);\n        return createAppAPI(app);\n    };\n    // destroys apps and removes them from the app array\n    destroy = (hook)=>{\n        // returns true if the app was destroyed successfully\n        const indexToRemove = state.apps.findIndex((app)=>app.isAttachedTo(hook));\n        if (indexToRemove >= 0) {\n            // remove from apps\n            const app = state.apps.splice(indexToRemove, 1)[0];\n            // restore original dom element\n            app.restoreElement();\n            return true;\n        }\n        return false;\n    };\n    // parses the given context for plugins (does not include the context element itself)\n    parse = (context)=>{\n        // get all possible hooks\n        const matchedHooks = Array.from(context.querySelectorAll(`.${name}`));\n        // filter out already active hooks\n        const newHooks = matchedHooks.filter((newHook)=>!state.apps.find((app)=>app.isAttachedTo(newHook)));\n        // create new instance for each hook\n        return newHooks.map((hook)=>create$f(hook));\n    };\n    // returns an app based on the given element hook\n    find = (hook)=>{\n        const app = state.apps.find((app)=>app.isAttachedTo(hook));\n        if (!app) {\n            return null;\n        }\n        return createAppAPI(app);\n    };\n    // adds a plugin extension\n    registerPlugin = (...plugins)=>{\n        // register plugins\n        plugins.forEach(createAppPlugin);\n        // update OptionTypes, each plugin might have extended the default options\n        updateOptionTypes();\n    };\n    getOptions$1 = ()=>{\n        const opts = {};\n        forin(getOptions(), (key, value)=>{\n            opts[key] = value[0];\n        });\n        return opts;\n    };\n    setOptions$1 = (opts)=>{\n        if (isObject(opts)) {\n            // update existing plugins\n            state.apps.forEach((app)=>{\n                app.setOptions(opts);\n            });\n            // override defaults\n            setOptions(opts);\n        }\n        // return new options\n        return getOptions$1();\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/filepond/dist/filepond.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/filepond/dist/filepond.min.css":
/*!*****************************************************!*\
  !*** ./node_modules/filepond/dist/filepond.min.css ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"02888899690d\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZmlsZXBvbmQvZGlzdC9maWxlcG9uZC5taW4uY3NzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSxjQUFjO0FBQzdCLElBQUksS0FBVSxFQUFFLEVBQXVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdmluLWV4dHJhY3Rvci8uL25vZGVfbW9kdWxlcy9maWxlcG9uZC9kaXN0L2ZpbGVwb25kLm1pbi5jc3M/Y2U1ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIjAyODg4ODk5NjkwZFwiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/filepond/dist/filepond.min.css\n");

/***/ })

};
;