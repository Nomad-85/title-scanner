"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/filepond-plugin-file-validate-type";
exports.ids = ["vendor-chunks/filepond-plugin-file-validate-type"];
exports.modules = {

/***/ "(ssr)/./node_modules/filepond-plugin-file-validate-type/dist/filepond-plugin-file-validate-type.esm.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/filepond-plugin-file-validate-type/dist/filepond-plugin-file-validate-type.esm.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/*!\n * FilePondPluginFileValidateType 1.2.9\n * Licensed under MIT, https://opensource.org/licenses/MIT/\n * Please visit https://pqina.nl/filepond/ for details.\n */ /* eslint-disable */ const plugin = ({ addFilter, utils })=>{\n    // get quick reference to Type utils\n    const { Type, isString, replaceInString, guesstimateMimeType, getExtensionFromFilename, getFilenameFromURL } = utils;\n    const mimeTypeMatchesWildCard = (mimeType, wildcard)=>{\n        const mimeTypeGroup = (/^[^/]+/.exec(mimeType) || []).pop(); // image/png -> image\n        const wildcardGroup = wildcard.slice(0, -2); // image/* -> image\n        return mimeTypeGroup === wildcardGroup;\n    };\n    const isValidMimeType = (acceptedTypes, userInputType)=>acceptedTypes.some((acceptedType)=>{\n            // accepted is wildcard mime type\n            if (/\\*$/.test(acceptedType)) {\n                return mimeTypeMatchesWildCard(userInputType, acceptedType);\n            }\n            // is normal mime type\n            return acceptedType === userInputType;\n        });\n    const getItemType = (item)=>{\n        // if the item is a url we guess the mime type by the extension\n        let type = \"\";\n        if (isString(item)) {\n            const filename = getFilenameFromURL(item);\n            const extension = getExtensionFromFilename(filename);\n            if (extension) {\n                type = guesstimateMimeType(extension);\n            }\n        } else {\n            type = item.type;\n        }\n        return type;\n    };\n    const validateFile = (item, acceptedFileTypes, typeDetector)=>{\n        // no types defined, everything is allowed \\o/\n        if (acceptedFileTypes.length === 0) {\n            return true;\n        }\n        // gets the item type\n        const type = getItemType(item);\n        // no type detector, test now\n        if (!typeDetector) {\n            return isValidMimeType(acceptedFileTypes, type);\n        }\n        // use type detector\n        return new Promise((resolve, reject)=>{\n            typeDetector(item, type).then((detectedType)=>{\n                if (isValidMimeType(acceptedFileTypes, detectedType)) {\n                    resolve();\n                } else {\n                    reject();\n                }\n            }).catch(reject);\n        });\n    };\n    const applyMimeTypeMap = (map)=>(acceptedFileType)=>map[acceptedFileType] === null ? false : map[acceptedFileType] || acceptedFileType;\n    // setup attribute mapping for accept\n    addFilter(\"SET_ATTRIBUTE_TO_OPTION_MAP\", (map)=>Object.assign(map, {\n            accept: \"acceptedFileTypes\"\n        }));\n    // filtering if an item is allowed in hopper\n    addFilter(\"ALLOW_HOPPER_ITEM\", (file, { query })=>{\n        // if we are not doing file type validation exit\n        if (!query(\"GET_ALLOW_FILE_TYPE_VALIDATION\")) {\n            return true;\n        }\n        // we validate the file against the accepted file types\n        return validateFile(file, query(\"GET_ACCEPTED_FILE_TYPES\"));\n    });\n    // called for each file that is loaded\n    // right before it is set to the item state\n    // should return a promise\n    addFilter(\"LOAD_FILE\", (file, { query })=>new Promise((resolve, reject)=>{\n            if (!query(\"GET_ALLOW_FILE_TYPE_VALIDATION\")) {\n                resolve(file);\n                return;\n            }\n            const acceptedFileTypes = query(\"GET_ACCEPTED_FILE_TYPES\");\n            // custom type detector method\n            const typeDetector = query(\"GET_FILE_VALIDATE_TYPE_DETECT_TYPE\");\n            // if invalid, exit here\n            const validationResult = validateFile(file, acceptedFileTypes, typeDetector);\n            const handleRejection = ()=>{\n                const acceptedFileTypesMapped = acceptedFileTypes.map(applyMimeTypeMap(query(\"GET_FILE_VALIDATE_TYPE_LABEL_EXPECTED_TYPES_MAP\"))).filter((label)=>label !== false);\n                const acceptedFileTypesMappedUnique = acceptedFileTypesMapped.filter((item, index)=>acceptedFileTypesMapped.indexOf(item) === index);\n                reject({\n                    status: {\n                        main: query(\"GET_LABEL_FILE_TYPE_NOT_ALLOWED\"),\n                        sub: replaceInString(query(\"GET_FILE_VALIDATE_TYPE_LABEL_EXPECTED_TYPES\"), {\n                            allTypes: acceptedFileTypesMappedUnique.join(\", \"),\n                            allButLastType: acceptedFileTypesMappedUnique.slice(0, -1).join(\", \"),\n                            lastType: acceptedFileTypesMappedUnique[acceptedFileTypesMappedUnique.length - 1]\n                        })\n                    }\n                });\n            };\n            // has returned new filename immidiately\n            if (typeof validationResult === \"boolean\") {\n                if (!validationResult) {\n                    return handleRejection();\n                }\n                return resolve(file);\n            }\n            // is promise\n            validationResult.then(()=>{\n                resolve(file);\n            }).catch(handleRejection);\n        }));\n    // expose plugin\n    return {\n        // default options\n        options: {\n            // Enable or disable file type validation\n            allowFileTypeValidation: [\n                true,\n                Type.BOOLEAN\n            ],\n            // What file types to accept\n            acceptedFileTypes: [\n                [],\n                Type.ARRAY\n            ],\n            // - must be comma separated\n            // - mime types: image/png, image/jpeg, image/gif\n            // - extensions: .png, .jpg, .jpeg ( not enabled yet )\n            // - wildcards: image/*\n            // label to show when a type is not allowed\n            labelFileTypeNotAllowed: [\n                \"File is of invalid type\",\n                Type.STRING\n            ],\n            // nicer label\n            fileValidateTypeLabelExpectedTypes: [\n                \"Expects {allButLastType} or {lastType}\",\n                Type.STRING\n            ],\n            // map mime types to extensions\n            fileValidateTypeLabelExpectedTypesMap: [\n                {},\n                Type.OBJECT\n            ],\n            // Custom function to detect type of file\n            fileValidateTypeDetectType: [\n                null,\n                Type.FUNCTION\n            ]\n        }\n    };\n};\n// fire pluginloaded event if running in browser, this allows registering the plugin when using async script tags\nconst isBrowser =  false && 0;\nif (isBrowser) {\n    document.dispatchEvent(new CustomEvent(\"FilePond:pluginloaded\", {\n        detail: plugin\n    }));\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (plugin);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/filepond-plugin-file-validate-type/dist/filepond-plugin-file-validate-type.esm.js\n");

/***/ })

};
;