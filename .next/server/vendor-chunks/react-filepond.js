"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-filepond";
exports.ids = ["vendor-chunks/react-filepond"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-filepond/dist/react-filepond.esm.js":
/*!****************************************************************!*\
  !*** ./node_modules/react-filepond/dist/react-filepond.esm.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FilePond: () => (/* binding */ FilePond),\n/* harmony export */   FileStatus: () => (/* reexport safe */ filepond__WEBPACK_IMPORTED_MODULE_1__.FileStatus),\n/* harmony export */   registerPlugin: () => (/* reexport safe */ filepond__WEBPACK_IMPORTED_MODULE_1__.registerPlugin)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var filepond__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! filepond */ \"(ssr)/./node_modules/filepond/dist/filepond.esm.js\");\n/*!\n * react-filepond v7.1.3\n * A handy FilePond adapter component for React\n * \n * Copyright (c) 2024 PQINA\n * https://pqina.nl/filepond\n * \n * Licensed under the MIT license.\n */\n\n\n\n// Import required methods and styles from the FilePond module, should not need anything else\n\n\n// We need to be able to call the registerPlugin method directly so we can add plugins\n\n\n// Do this once\nconst isSupported = (0,filepond__WEBPACK_IMPORTED_MODULE_1__.supported)();\n\n// filtered methods\nconst filteredMethods = [\n  \"setOptions\",\n  \"on\",\n  \"off\",\n  \"onOnce\",\n  \"appendTo\",\n  \"insertAfter\",\n  \"insertBefore\",\n  \"isAttachedTo\",\n  \"replaceElement\",\n  \"restoreElement\",\n  \"destroy\",\n];\n\n// The React <FilePond/> wrapper\nclass FilePond extends (react__WEBPACK_IMPORTED_MODULE_0___default().Component) {\n  constructor(props) {\n    super(props);\n    this.allowFilesSync = true;\n  }\n\n  // Will setup FilePond instance when mounted\n  componentDidMount() {\n    // clone the input so we can restore it in unmount\n    this._input = this._element.querySelector('input[type=\"file\"]');\n    this._inputClone = this._input.cloneNode();\n\n    // exit here if not supported\n    if (!isSupported) return;\n\n    const options = Object.assign({}, this.props);\n\n    // if onupdate files is defined, make sure setFiles does not cause race condition\n    if (options.onupdatefiles) {\n      const cb = options.onupdatefiles;\n      options.onupdatefiles = (items) => {\n        this.allowFilesSync = false;\n        cb(items);\n      };\n    }\n\n    // Create our pond\n    this._pond = (0,filepond__WEBPACK_IMPORTED_MODULE_1__.create)(this._input, options);\n\n    // Reference pond methods to FilePond component instance\n    Object.keys(this._pond)\n      .filter((key) => !filteredMethods.includes(key))\n      .forEach((key) => {\n        this[key] = this._pond[key];\n      });\n  }\n\n  // Will clean up FilePond instance when unmounted\n  componentWillUnmount() {\n    // exit when no pond defined\n    if (!this._pond) return;\n\n    // This fixed <Strict> errors\n\n    // FilePond destroy is async so we have to move FilePond to a bin element so it can no longer affect current element tree as React unmount / mount is sync\n    const bin = document.createElement(\"div\");\n    bin.append(this._pond.element);\n    bin.id = \"foo\";\n\n    // now we call destroy so FilePond can start it's destroy logic\n    this._pond.destroy();\n    this._pond = undefined;\n\n    // we re-add the original file input element so everything is as it was before\n    this._element.append(this._inputClone);\n  }\n\n  shouldComponentUpdate() {\n    if (!this.allowFilesSync) {\n      this.allowFilesSync = true;\n      return false;\n    }\n    return true;\n  }\n\n  // Something changed\n  componentDidUpdate() {\n    // exit when no pond defined\n    if (!this._pond) return;\n\n    const options = Object.assign({}, this.props);\n\n    // this is only set onces, on didmount\n    delete options.onupdatefiles;\n\n    // update pond options based on new props\n    this._pond.setOptions(options);\n  }\n\n  // Renders basic element hook for FilePond to attach to\n  render() {\n    const {\n      id,\n      name,\n      className,\n      allowMultiple,\n      required,\n      captureMethod,\n      acceptedFileTypes,\n    } = this.props;\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(\n      \"div\",\n      {\n        className: \"filepond--wrapper\",\n        ref: (element) => (this._element = element),\n      },\n      (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"input\", {\n        type: \"file\",\n        name,\n        id,\n        accept: acceptedFileTypes,\n        multiple: allowMultiple,\n        required: required,\n        className: className,\n        capture: captureMethod,\n      })\n    );\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZmlsZXBvbmQvZGlzdC9yZWFjdC1maWxlcG9uZC5lc20uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUUwRDs7QUFFMUQ7QUFDeUU7O0FBRXpFO0FBQ3NDOztBQUV0QztBQUNBLG9CQUFvQixtREFBUzs7QUFFN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNPLHVCQUF1Qix3REFBZTtBQUM3QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsb0NBQW9DOztBQUVwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsaUJBQWlCLGdEQUFNOztBQUV2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsb0NBQW9DOztBQUVwQztBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTixXQUFXLG9EQUFhO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLE1BQU0sb0RBQWE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcdG1vc2VzXFxPbmVEcml2ZSAtIFRlc2xhXFxEb2N1bWVudHNcXHRpdGxlLXNjYW5uZXJcXG5vZGVfbW9kdWxlc1xccmVhY3QtZmlsZXBvbmRcXGRpc3RcXHJlYWN0LWZpbGVwb25kLmVzbS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIHJlYWN0LWZpbGVwb25kIHY3LjEuM1xuICogQSBoYW5keSBGaWxlUG9uZCBhZGFwdGVyIGNvbXBvbmVudCBmb3IgUmVhY3RcbiAqIFxuICogQ29weXJpZ2h0IChjKSAyMDI0IFBRSU5BXG4gKiBodHRwczovL3BxaW5hLm5sL2ZpbGVwb25kXG4gKiBcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgUmVhY3QsIHsgY3JlYXRlRWxlbWVudCwgdXNlQ2FsbGJhY2sgfSBmcm9tIFwicmVhY3RcIjtcblxuLy8gSW1wb3J0IHJlcXVpcmVkIG1ldGhvZHMgYW5kIHN0eWxlcyBmcm9tIHRoZSBGaWxlUG9uZCBtb2R1bGUsIHNob3VsZCBub3QgbmVlZCBhbnl0aGluZyBlbHNlXG5pbXBvcnQgeyBjcmVhdGUsIHN1cHBvcnRlZCwgcmVnaXN0ZXJQbHVnaW4sIEZpbGVTdGF0dXMgfSBmcm9tIFwiZmlsZXBvbmRcIjtcblxuLy8gV2UgbmVlZCB0byBiZSBhYmxlIHRvIGNhbGwgdGhlIHJlZ2lzdGVyUGx1Z2luIG1ldGhvZCBkaXJlY3RseSBzbyB3ZSBjYW4gYWRkIHBsdWdpbnNcbmV4cG9ydCB7IHJlZ2lzdGVyUGx1Z2luLCBGaWxlU3RhdHVzIH07XG5cbi8vIERvIHRoaXMgb25jZVxuY29uc3QgaXNTdXBwb3J0ZWQgPSBzdXBwb3J0ZWQoKTtcblxuLy8gZmlsdGVyZWQgbWV0aG9kc1xuY29uc3QgZmlsdGVyZWRNZXRob2RzID0gW1xuICBcInNldE9wdGlvbnNcIixcbiAgXCJvblwiLFxuICBcIm9mZlwiLFxuICBcIm9uT25jZVwiLFxuICBcImFwcGVuZFRvXCIsXG4gIFwiaW5zZXJ0QWZ0ZXJcIixcbiAgXCJpbnNlcnRCZWZvcmVcIixcbiAgXCJpc0F0dGFjaGVkVG9cIixcbiAgXCJyZXBsYWNlRWxlbWVudFwiLFxuICBcInJlc3RvcmVFbGVtZW50XCIsXG4gIFwiZGVzdHJveVwiLFxuXTtcblxuLy8gVGhlIFJlYWN0IDxGaWxlUG9uZC8+IHdyYXBwZXJcbmV4cG9ydCBjbGFzcyBGaWxlUG9uZCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuYWxsb3dGaWxlc1N5bmMgPSB0cnVlO1xuICB9XG5cbiAgLy8gV2lsbCBzZXR1cCBGaWxlUG9uZCBpbnN0YW5jZSB3aGVuIG1vdW50ZWRcbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgLy8gY2xvbmUgdGhlIGlucHV0IHNvIHdlIGNhbiByZXN0b3JlIGl0IGluIHVubW91bnRcbiAgICB0aGlzLl9pbnB1dCA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcignaW5wdXRbdHlwZT1cImZpbGVcIl0nKTtcbiAgICB0aGlzLl9pbnB1dENsb25lID0gdGhpcy5faW5wdXQuY2xvbmVOb2RlKCk7XG5cbiAgICAvLyBleGl0IGhlcmUgaWYgbm90IHN1cHBvcnRlZFxuICAgIGlmICghaXNTdXBwb3J0ZWQpIHJldHVybjtcblxuICAgIGNvbnN0IG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLnByb3BzKTtcblxuICAgIC8vIGlmIG9udXBkYXRlIGZpbGVzIGlzIGRlZmluZWQsIG1ha2Ugc3VyZSBzZXRGaWxlcyBkb2VzIG5vdCBjYXVzZSByYWNlIGNvbmRpdGlvblxuICAgIGlmIChvcHRpb25zLm9udXBkYXRlZmlsZXMpIHtcbiAgICAgIGNvbnN0IGNiID0gb3B0aW9ucy5vbnVwZGF0ZWZpbGVzO1xuICAgICAgb3B0aW9ucy5vbnVwZGF0ZWZpbGVzID0gKGl0ZW1zKSA9PiB7XG4gICAgICAgIHRoaXMuYWxsb3dGaWxlc1N5bmMgPSBmYWxzZTtcbiAgICAgICAgY2IoaXRlbXMpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgb3VyIHBvbmRcbiAgICB0aGlzLl9wb25kID0gY3JlYXRlKHRoaXMuX2lucHV0LCBvcHRpb25zKTtcblxuICAgIC8vIFJlZmVyZW5jZSBwb25kIG1ldGhvZHMgdG8gRmlsZVBvbmQgY29tcG9uZW50IGluc3RhbmNlXG4gICAgT2JqZWN0LmtleXModGhpcy5fcG9uZClcbiAgICAgIC5maWx0ZXIoKGtleSkgPT4gIWZpbHRlcmVkTWV0aG9kcy5pbmNsdWRlcyhrZXkpKVxuICAgICAgLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICB0aGlzW2tleV0gPSB0aGlzLl9wb25kW2tleV07XG4gICAgICB9KTtcbiAgfVxuXG4gIC8vIFdpbGwgY2xlYW4gdXAgRmlsZVBvbmQgaW5zdGFuY2Ugd2hlbiB1bm1vdW50ZWRcbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgLy8gZXhpdCB3aGVuIG5vIHBvbmQgZGVmaW5lZFxuICAgIGlmICghdGhpcy5fcG9uZCkgcmV0dXJuO1xuXG4gICAgLy8gVGhpcyBmaXhlZCA8U3RyaWN0PiBlcnJvcnNcblxuICAgIC8vIEZpbGVQb25kIGRlc3Ryb3kgaXMgYXN5bmMgc28gd2UgaGF2ZSB0byBtb3ZlIEZpbGVQb25kIHRvIGEgYmluIGVsZW1lbnQgc28gaXQgY2FuIG5vIGxvbmdlciBhZmZlY3QgY3VycmVudCBlbGVtZW50IHRyZWUgYXMgUmVhY3QgdW5tb3VudCAvIG1vdW50IGlzIHN5bmNcbiAgICBjb25zdCBiaW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGJpbi5hcHBlbmQodGhpcy5fcG9uZC5lbGVtZW50KTtcbiAgICBiaW4uaWQgPSBcImZvb1wiO1xuXG4gICAgLy8gbm93IHdlIGNhbGwgZGVzdHJveSBzbyBGaWxlUG9uZCBjYW4gc3RhcnQgaXQncyBkZXN0cm95IGxvZ2ljXG4gICAgdGhpcy5fcG9uZC5kZXN0cm95KCk7XG4gICAgdGhpcy5fcG9uZCA9IHVuZGVmaW5lZDtcblxuICAgIC8vIHdlIHJlLWFkZCB0aGUgb3JpZ2luYWwgZmlsZSBpbnB1dCBlbGVtZW50IHNvIGV2ZXJ5dGhpbmcgaXMgYXMgaXQgd2FzIGJlZm9yZVxuICAgIHRoaXMuX2VsZW1lbnQuYXBwZW5kKHRoaXMuX2lucHV0Q2xvbmUpO1xuICB9XG5cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlKCkge1xuICAgIGlmICghdGhpcy5hbGxvd0ZpbGVzU3luYykge1xuICAgICAgdGhpcy5hbGxvd0ZpbGVzU3luYyA9IHRydWU7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gU29tZXRoaW5nIGNoYW5nZWRcbiAgY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgIC8vIGV4aXQgd2hlbiBubyBwb25kIGRlZmluZWRcbiAgICBpZiAoIXRoaXMuX3BvbmQpIHJldHVybjtcblxuICAgIGNvbnN0IG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLnByb3BzKTtcblxuICAgIC8vIHRoaXMgaXMgb25seSBzZXQgb25jZXMsIG9uIGRpZG1vdW50XG4gICAgZGVsZXRlIG9wdGlvbnMub251cGRhdGVmaWxlcztcblxuICAgIC8vIHVwZGF0ZSBwb25kIG9wdGlvbnMgYmFzZWQgb24gbmV3IHByb3BzXG4gICAgdGhpcy5fcG9uZC5zZXRPcHRpb25zKG9wdGlvbnMpO1xuICB9XG5cbiAgLy8gUmVuZGVycyBiYXNpYyBlbGVtZW50IGhvb2sgZm9yIEZpbGVQb25kIHRvIGF0dGFjaCB0b1xuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgaWQsXG4gICAgICBuYW1lLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgYWxsb3dNdWx0aXBsZSxcbiAgICAgIHJlcXVpcmVkLFxuICAgICAgY2FwdHVyZU1ldGhvZCxcbiAgICAgIGFjY2VwdGVkRmlsZVR5cGVzLFxuICAgIH0gPSB0aGlzLnByb3BzO1xuICAgIHJldHVybiBjcmVhdGVFbGVtZW50KFxuICAgICAgXCJkaXZcIixcbiAgICAgIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcImZpbGVwb25kLS13cmFwcGVyXCIsXG4gICAgICAgIHJlZjogKGVsZW1lbnQpID0+ICh0aGlzLl9lbGVtZW50ID0gZWxlbWVudCksXG4gICAgICB9LFxuICAgICAgY3JlYXRlRWxlbWVudChcImlucHV0XCIsIHtcbiAgICAgICAgdHlwZTogXCJmaWxlXCIsXG4gICAgICAgIG5hbWUsXG4gICAgICAgIGlkLFxuICAgICAgICBhY2NlcHQ6IGFjY2VwdGVkRmlsZVR5cGVzLFxuICAgICAgICBtdWx0aXBsZTogYWxsb3dNdWx0aXBsZSxcbiAgICAgICAgcmVxdWlyZWQ6IHJlcXVpcmVkLFxuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgICAgY2FwdHVyZTogY2FwdHVyZU1ldGhvZCxcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-filepond/dist/react-filepond.esm.js\n");

/***/ })

};
;